<Job title="Net Database Procedure Import">
 <IfYesDialog text="This job will update the Net database procedures. Ok to proceed?">
  <SQLExec ignoreerror="YES">
<![CDATA[drop procedure pears.NetAgencyCandidateAdd]]>
  </SQLExec>
  <SQLExec parameters="NO" xProcName="NetAgencyCandidateAdd">
<![CDATA[create procedure pears.NetAgencyCandidateAdd(in pWebUserID char(20),in pForeNames char(50),in pSurname char(50),in pReference char(50))
result(pResult char(250))
begin
  declare @PersID char(20);
  declare @SecAgID char(20);
  if IQXNetHasPermission(pWebUserID,'ADDCANDIDATES') = 0 then
    select '99:~Permission denied';
    return
  end if;
  set @SecAgID=(select first employment.companyid from employment key join iqxnetuserlink where iqxnetuserlink.iqxnetuserid = pwebuserid);
  set @PersID=uniquekey(pforenames+psurname);
  insert into person( personid,staffid,name,keyname,forenames,surname,salutation,status) values( @persid,userstaffid,string(pforenames,' ',psurname),
    makekeyname(string(psurname,' ',pforenames)),pforenames,psurname,pforenames,'A') ;
  insert into pay_employee( personid,secondaryagencyid,secondaryagencyref) values( @persid,@secagid,ucase(pReference)) ;
  select '0:~Success'
end]]>
  </SQLExec>
  <SQLExec ignoreerror="YES">
<![CDATA[grant execute on pears.NetAgencyCandidateAdd to IQXNet]]>
  </SQLExec>
  <SQLExec ignoreerror="YES">
<![CDATA[drop procedure pears.NetAgencyCandidateProgress]]>
  </SQLExec>
  <SQLExec parameters="NO" xProcName="NetAgencyCandidateProgress">
<![CDATA[create procedure pears.NetAgencyCandidateProgress(in pWebUserID char(20),in pPersonID char(20))
result(dFromDate date,tFromTime time,CompanyName char(100),JobDescription char(100),sFrom char(20),sTo char(20),State char(50))
begin
  select vacancy.startdate as d1,cast('00:00' as time) as t1,company.name,vacancy.position,dateformat(vacancy.startdate,'dd/mm/yyyy'),dateformat(vacancy.finishdate,'dd/mm/yyyy'),status.name
    from company key join employment key join vacancy key join progress join status on status.type = 'R' and status.status = progress.status
    where progress.personid = pPersonID union all
  select p.shiftdate as d1,p.timefrom as t1,company.name,string(vacancy.position,' - ',p.description),
    string(dateformat(p.shiftdate,'dd/mm/yyyy'),' ',dateformat(p.timefrom,'hh:nn')),
    string(dateformat((if p.TimeFrom < p.TimeTo then p.ShiftDate else p.ShiftDate+1
    endif),'dd/mm/yyyy'),' ',dateformat(p.timeto,'hh:nn')),
    status.name
    from company key join employment key join vacancy key join tempshiftplan as p key join tempshiftprogress join status on status.type = 'S' and status.status = tempshiftprogress.status
    where tempshiftprogress.personid = pPersonID order by
    1 asc,2 asc
end]]>
  </SQLExec>
  <SQLExec ignoreerror="YES">
<![CDATA[grant execute on pears.NetAgencyCandidateProgress to IQXNet]]>
  </SQLExec>
  <SQLExec ignoreerror="YES">
<![CDATA[drop procedure pears.NetAgencyCandidates]]>
  </SQLExec>
  <SQLExec parameters="NO" xProcName="NetAgencyCandidates">
<![CDATA[create procedure pears.NetAgencyCandidates(in pWebUserID char(20))
result(PersonID char(20),CandidateName char(100),CandidateReference char(100))
begin
  declare @SecAgID char(20);
  set @SecAgID=(select first employment.companyid from employment key join iqxnetuserlink where iqxnetuserlink.iqxnetuserid = pwebuserid);
  select person.personid,
    person.name,
    pay_employee.secondaryagencyref
    from person key join pay_employee
    where pay_employee.secondaryagencyid = @secagid order by
    person.keyname asc
end]]>
  </SQLExec>
  <SQLExec ignoreerror="YES">
<![CDATA[grant execute on pears.NetAgencyCandidates to IQXNet]]>
  </SQLExec>
  <SQLExec ignoreerror="YES">
<![CDATA[drop procedure pears.NetAgencyCandidateSubmit]]>
  </SQLExec>
  <SQLExec parameters="NO" xProcName="NetAgencyCandidateSubmit">
<![CDATA[create procedure pears.NetAgencyCandidateSubmit(in pWebUserID char(20),in pPersonID char(20),in pVacancyID char(20) default null,in pShiftPlanID char(20) default null)
result(pResult char(250))
begin
  declare @SecAgID char(20);
  declare @sname char(100);
  if IQXNetHasPermission(pWebUserID,'SUBMITCANDIDATES') = 0 then
    select '99:~Permission denied';
    return
  end if;
  set @SecAgID=(select first employment.companyid from employment key join iqxnetuserlink where iqxnetuserlink.iqxnetuserid = pwebuserid);
  if trim(isnull(pShiftPlanID,'')) <> '' then
    if not pshiftplanid = any(select tempshiftplanid from cascadedshift where secondaryagencyid = @secagid) then
      select '99:~Permission denied';
      return
    end if;
    insert into tempshiftprogress( tempshiftprogressid,tempshiftplanid,personid,staffid,status) values( uniquekey(ppersonid+pshiftplanid),pshiftplanid,ppersonid,userstaffid,'A') 
  else
    if not pvacancyid = any(select vacancyid from cascadedvacancy where secondaryagencyid = @secagid) then
      select '99:~Permission denied';
      return
    end if;
    insert into progress( progressid,vacancyid,personid,staffid,status,actiondate) values( uniquekey(ppersonid+pvacancyid),pvacancyid,ppersonid,userstaffid,'A',current date) 
  end if;
  set @sname=(select first name from person where personid = ppersonid);
  call IQXNetPopup(pWebUserID,null,null,pvacancyid,null,null,null,'Secondary Agency candidate submitted',@sname);
  select '0:~Success'
end]]>
  </SQLExec>
  <SQLExec ignoreerror="YES">
<![CDATA[grant execute on pears.NetAgencyCandidateSubmit to IQXNet]]>
  </SQLExec>
  <SQLExec ignoreerror="YES">
<![CDATA[drop procedure pears.NetAgencyContact]]>
  </SQLExec>
  <SQLExec parameters="NO" xProcName="NetAgencyContact">
<![CDATA[create procedure pears.NetAgencyContact(in pWebUserID char(20))
result(employmentid char(20),directphone char(250),mobile char(250),email char(250),directfax char(250),cascademethod char(1),cascadeaddress char(250))
begin
  select first employment.employmentid,
    getphone('CP','Direct Telephone',employment.employmentid),
    getphone('CP','Mobile',employment.employmentid),
    getphone('CP','E-mail',employment.employmentid),
    getphone('CP','Direct Fax',employment.employmentid),
    cascadedeliveryaddress.deliverymethod,
    cascadedeliveryaddress.address
    from employment key join iqxnetuserlink
    ,employment left outer join cascadedeliveryaddress on employment.companyid = cascadedeliveryaddress.companyid
    where iqxnetuserlink.iqxnetuserid = pWebUserID
end]]>
  </SQLExec>
  <SQLExec ignoreerror="YES">
<![CDATA[grant execute on pears.NetAgencyContact to IQXNet]]>
  </SQLExec>
  <SQLExec ignoreerror="YES">
<![CDATA[drop procedure pears.NetAgencyContactSet]]>
  </SQLExec>
  <SQLExec parameters="NO" xProcName="NetAgencyContactSet">
<![CDATA[create procedure pears.NetAgencyContactSet(in pWebUserID char(20),in pemploymentid char(20),in pdirectphone char(250) default 'NOT_SET',in pmobile char(250) default 'NOT_SET',in pemail char(250) default 'NOT_SET',in pdirectfax char(250) default 'NOT_SET',in pcascademethod char(1) default '$',in pcascadeaddress char(250) default 'NOT_SET',in pOLDdirectphone char(250) default 'NOT_SET',in pOLDmobile char(250) default 'NOT_SET',in pOLDemail char(250) default 'NOT_SET',in pOLDdirectfax char(250) default 'NOT_SET',in pOLDcascademethod char(1) default '$',in pOLDcascadeaddress char(250) default 'NOT_SET')
result(pResult char(250))
begin
  if not pemploymentid = any(select employmentid from iqxnetuserlink where iqxnetuserid = pwebuserid) then
    select '99:~Permission denied';
    return
  end if;
  if isnull(pcascademethod,'') <> isnull(pOLDcascademethod,'') or isnull(pcascadeaddress,'') <> isnull(pOLDcascadeaddress,'') then
    if isnull(pcascademethod,'') = '$' or isnull(pCascadeAddress,'') = 'NOT_SET' then
      select '3:~Cascade method and Cascade address must BOTH be given values (or neither)';
      return
    end if;
    if isnull(pcascademethod,'') not in( 'E','F','W','N') then
      select '1:~Invalid cascade method';
      return
    end if;
    if pcascademethod in( 'E','F') and trim(isnull(pcascadeaddress,'')) = '' then
      select '2:~Cascade address must be specified';
      return
    end if;
    insert into cascadedeliveryaddress( companyid,deliverymethod) select distinct employment.companyid,'E' from employment key join iqxnetuserlink where iqxnetuserid = pWebUserID
        and not employment.companyid = any(select companyid from cascadedeliveryaddress);
    update cascadedeliveryaddress set deliverymethod = ucase(pcascademethod),address = pcascadeaddress where companyid
       = any(select employment.companyid from employment key join iqxnetuserlink where iqxnetuserid = pWebUserID)
  end if;
  if isnull(pdirectphone,'') <> isnull(pOLDdirectphone,'') then
    call IQXNetSetPhones(pWebUserID,'CP','Direct Telephone',pdirectphone)
  end if;
  if isnull(pmobile,'') <> isnull(pOLDmobile,'') then
    call IQXNetSetPhones(pWebUserID,'CP','Mobile',pmobile)
  end if;
  if isnull(pemail,'') <> isnull(pOLDemail,'') then
    call IQXNetSetPhones(pWebUserID,'CP','E-mail',pemail);
    update iqxnetuserlink key join iqxnetuser set iqxnetuser.emailaddress = pemail where iqxnetuserlink.employmentid = pemploymentid
  end if;
  if isnull(pdirectfax,'') <> isnull(pOLDdirectfax,'') then
    call IQXNetSetPhones(pWebUserID,'CP','Direct Fax',pdirectfax)
  end if;
  select '0:~Success'
end]]>
  </SQLExec>
  <SQLExec ignoreerror="YES">
<![CDATA[grant execute on pears.NetAgencyContactSet to IQXNet]]>
  </SQLExec>
  <SQLExec ignoreerror="YES">
<![CDATA[drop procedure pears.NetAgencyProvTimesheets]]>
  </SQLExec>
  <SQLExec parameters="NO" xProcName="NetAgencyProvTimesheets">
<![CDATA[create procedure pears.NetAgencyProvTimesheets(in pWebUserID char(20))
result(tempprovtimesheetid char(20),serialnumber char(20),tempname char(60),position char(60),companyname char(60),weekenddate date,timesheettype char(1),completed smallint)
begin
  select t.tempprovtimesheetid,t.serialnumber,string(person.surname,', ',person.forenames) as tempname,vacancy.position,company.name as companyname,
    NetTimesheetEndDate(1,1,t.tempprovtimesheetid) as weekenddate,
    if NetVacancyHasRateScript(t.tempjobtypeid,t.vacancyid) = 0 then 'C'
    else if tempdesk.desktype = 'S' then 'S' else if tempdesk.desktype = 'W'
    and exists(select * from placement where placementid = t.placementid and worknormalhours is not null and workstarttime is not null
      and(isnull(workmonday,0) = 1 or isnull(worktuesday,0) = 1 or isnull(workwednesday,0) = 1 or isnull(workthursday,0) = 1 or isnull(workfriday,0) = 1
      or isnull(worksaturday,0) = 1 or isnull(worksunday,0) = 1)) then 'T'
    else 'C'
    endif
    endif
    endif as timesheettype,if t.extnumber = 2 then 1 else 0
    endif as completed from tempprovtimesheet as t key join vacancy key join employment key join company,tempprovtimesheet as t
    key join tempdesk,tempprovtimesheet as t key join person key join pay_employee key join company as agcomp key join employment as agemp key join iqxnetuserlink
    where iqxnetuserlink.iqxnetuserid = pWebUserID and t.extnumber > 0
    and weekenddate > current date-60 order by
    weekenddate asc,t.serialnumber asc,tempname asc
end]]>
  </SQLExec>
  <SQLExec ignoreerror="YES">
<![CDATA[grant execute on pears.NetAgencyProvTimesheets to IQXNet]]>
  </SQLExec>
  <SQLExec ignoreerror="YES">
<![CDATA[drop procedure pears.NetAgencyVacancies]]>
  </SQLExec>
  <SQLExec parameters="NO" xProcName="NetAgencyVacancies">
<![CDATA[create procedure pears.NetAgencyVacancies(in pWebUserID char(20))
result(RowID char(30),StartDate date,StartTime time,FinishDate date,FinishTime time,IsShift smallint,VacancyID char(20),TempShiftPlanID char(20),Position char(50),ShiftDescription char(50),CompanyName char(60),ContactName char(30),Status char(40),Department char(30),Consultant char(60),OurRef char(20),TheirRef char(50),ContractRef char(20),CascadeDateTime timestamp,CascadeLevel smallint,WhenEntered timestamp,SubmittedCandidates long varchar,IsCurrent smallint,LongDescription long varchar)
begin
  declare @DateRangeStart date;
  declare @DateRangeEnd date;
  declare @SecAgID char(20);
  set @DateRangeStart=dateadd(week,-4,current date);
  set @DateRangeEnd=dateadd(week,4,current date);
  set @SecAgID=(select first employment.companyid from employment key join iqxnetuserlink where iqxnetuserlink.iqxnetuserid = pwebuserid);
  select 'V'+v.VacancyID as RowID,
    v.StartDate,
    cast(null as time) as StartTime,
    v.FinishDate,
    cast(null as time) as FinishTime,
    0 as IsShift,
    v.VacancyID,
    cast(null as char(20)) as TempShiftPlanID,
    v.Position as Position,
    cast(null as char(50)) as ShiftDescription,
    Company.Name as CompanyName,
    Person.Name as ContactName,
    (select Name from Status where Status.Status = v.Status and Status.Type = 'V') as Status,
    (select Name from Department where Department.DepartmentID = v.DepartmentID) as Department,
    (select Name from Staff where Staff.StaffID = v.StaffID) as Consultant,
    v.RefCode as OurRef,
    v.TheirRef,
    v.ContractRef,
    v.CascadeDateTime,
    v.CascadeLevel,
    v.WhenEntered,
    (select list(person.name,', ') from vacancy key join progress key join person key join pay_employee where vacancy.vacancyid = v.vacancyid and pay_employee.secondaryagencyid = @secagid) as SubmittedCandidates,
    (if v.status = 'C' then 1 else 0
    endif) as IsCurrent,v.OtherNotes as LongDescription
    from Vacancy as v key join Employment key join(Company,Person)
    ,Vacancy as v key join CascadedVacancy as cv
    where cv.secondaryagencyid = @secagid
    and v.StartDate <= @DateRangeEnd and isnull(v.FinishDate,@DateRangeEnd) >= @DateRangeStart and v.temp = 1
    and isnull((select desktype from tempdesk where tempdeskid = v.tempdeskid),'') <> 'S' union all
  select 'P'+p.TempShiftPlanID as RowID,
    p.ShiftDate as StartDate,
    p.TimeFrom as StartTime,
    (if p.TimeFrom < p.TimeTo then p.ShiftDate else p.ShiftDate+1
    endif) as FinishDate,p.TimeTo as FinishTime,
    1 as IsShift,
    v.VacancyID,
    p.TempShiftPlanID,
    v.Position,
    p.Description as ShiftDescription,
    Company.Name as CompanyName,
    Person.Name as ContactName,
    (select Name from Status where Status.Status = v.Status and Status.Type = 'V') as Status,
    (select Name from Department where Department.DepartmentID = v.DepartmentID) as Department,
    (select Name from Staff where Staff.StaffID = v.StaffID) as Consultant,
    cast(p.ShiftSerialNumber as char(20)) as OurRef,
    p.ReferenceCode as TheirRef,
    v.ContractRef,
    p.CascadeDateTime,
    p.CascadeLevel,
    p.WhenEntered,
    (select list(person.name,', ') from tempshiftprogress key join person key join pay_employee where tempshiftprogress.tempshiftplanid = p.tempshiftplanid and pay_employee.secondaryagencyid = @secagid) as SubmittedCandidates,
    (if exists(select * from tempshift where tempshiftplanid = p.tempshiftplanid and not(state = 'C' and isnull(crefill,0) = 1)) then 0 else 1
    endif) as IsCurrent,cast(null as long varchar) as LongDescription
    from TempShiftPlan as p key join Vacancy as v key join Employment key join(Company,Person)
    ,TempShiftPlan as p key join CascadedShift as cs
    where cs.secondaryagencyid = @secagid
    and p.ShiftDate between @DateRangeStart and @DateRangeEnd order by
    1 asc,2 asc
end]]>
  </SQLExec>
  <SQLExec ignoreerror="YES">
<![CDATA[grant execute on pears.NetAgencyVacancies to IQXNet]]>
  </SQLExec>
  <SQLExec ignoreerror="YES">
<![CDATA[drop procedure pears.NetAlreadyApplied]]>
  </SQLExec>
  <SQLExec parameters="NO" xProcName="NetAlreadyApplied">
<![CDATA[create procedure pears.NetAlreadyApplied(in pWebUserId char(20),in JobID char(20) default null)
result(Applied char(250))
begin
  declare Person char(20);
  declare AppliedFor char(20);
  if pWebUserId is null then
    select '99:~You are not logged in';
    return
  end if;
  set Person=(select first IQXNetUserLink.PersonID from IQXNetUserLink where iqxnetuserlink.iqxnetuserid = pwebuserid and IQXNetUserLink.PersonID is not null);
  set AppliedFor=(select first status from progress where vacancyid = JobId and personid = person);
  if AppliedFor is not null then
    select '1:~Already Applied';
    return
  end if;
  if AppliedFor is null then
    select '1:~Apply'
  end if
end]]>
  </SQLExec>
  <SQLExec ignoreerror="YES">
<![CDATA[grant execute on pears.NetAlreadyApplied to IQXNet]]>
  </SQLExec>
  <SQLExec ignoreerror="YES">
<![CDATA[drop procedure pears.NetCalendarShifts]]>
  </SQLExec>
  <SQLExec parameters="NO" xProcName="NetCalendarShifts">
<![CDATA[create procedure pears.NetCalendarShifts(in pWebUserID char(20),in pstart double,in pend double)
result(shiftdate char(20),role char(1),shiftcount integer,title char(50),tipArray long varchar)
begin
  declare dStart date;
  declare dEnd date;
  set dstart=dateadd(second,pstart,'1970-01-01');
  set dend=dateadd(second,pend,'1970-01-01');
  select dateformat(subby.shiftdate,'yyyy-mm-dd') as caldate,'F' as role,
    subby.cnt as shiftcount,
    string('Filled: ',subby.cnt) as title,
    string('[',
    (select list(string('{{"name":',netjsstring(person.name),',"id":',netjsstring(person.personid),',"descrip":',
      netjsstring(string(v.position,' ',
      isnull(st.description,string(dateformat(s.timefrom,'hh:nn'),'-',dateformat(s.timeto,'hh:nn'))))),'}'),',')
      from tempshift as s key join(tempshiftplan as p,person)
      ,tempshiftplan as p key join vacancy as v key join employment
      ,tempshiftplan as p key left outer join tempshifttype as st
      where s.state in( 'P','B','W') 
      and s.shiftdate = subby.shiftdate
      and p.description <> 'Added Time'
      and employment.companyid = any(select companyid from employment key join iqxnetuserlink where iqxnetuserid = pWebUserID)),']') as tipArray
    from(select s.shiftdate,count(*) as cnt
      from tempshift as s key join tempshiftplan as p key join vacancy as v key join employment
      where s.state in( 'P','B','W') 
      and s.shiftdate between dstart and dend
      and p.description <> 'Added Time'
      and employment.companyid = any(select companyid from employment key join iqxnetuserlink where iqxnetuserid = pWebUserID)
      group by s.shiftdate) as subby union all
  select dateformat(subby.shiftdate,'yyyy-mm-dd'),'U',
    subby.cnt,
    string('Unfilled: ',subby.cnt),
    string('[',
    (select list(string('{{"descrip":',
      netjsstring(string(v.position,' ',isnull(st.description,string(dateformat(p.timefrom,'hh:nn'),'-',dateformat(p.timeto,'hh:nn'))))),'}'),',')
      from tempshiftplan as p key join vacancy as v key join employment
      ,tempshiftplan as p key left outer join tempshifttype as st
      where not exists(select * from tempshift where tempshiftplanid = p.tempshiftplanid and not(state = 'C' and crefill = 1))
      and p.shiftdate = subby.shiftdate
      and employment.companyid = any(select companyid from employment key join iqxnetuserlink where iqxnetuserid = pWebUserID)),']')
    from(select p.shiftdate,count(*) as cnt
      from tempshiftplan as p key join vacancy key join employment
      where not exists(select * from tempshift where tempshiftplanid = p.tempshiftplanid and not(state = 'C' and crefill = 1))
      and p.shiftdate between dstart and dend
      and employment.companyid = any(select companyid from employment key join iqxnetuserlink where iqxnetuserid = pWebUserID)
      group by p.shiftdate) as subby order by
    1 asc,2 desc
end]]>
  </SQLExec>
  <SQLExec ignoreerror="YES">
<![CDATA[grant execute on pears.NetCalendarShifts to IQXNet]]>
  </SQLExec>
  <SQLExec ignoreerror="YES">
<![CDATA[drop procedure pears.NetCandidateAddEventsMultiDay]]>
  </SQLExec>
  <SQLExec parameters="NO" xProcName="NetCandidateAddEventsMultiDay">
<![CDATA[create procedure pears.NetCandidateAddEventsMultiDay(in pWebUserID char(20),in pvacancyid char(20),in p1Date char(25) default
null,in p1Event char(20) default null,in p1From char(25) default null,in p1To char(25) default null,in p1Brk char(20) default null,in p1Qty char(20) default null,in p1Note char(50) default null,in p2Date char(25) default
null,in p2Event char(20) default null,in p2From char(25) default null,in p2To char(25) default null,in p2Brk char(20) default null,in p2Qty char(20) default null,in p2Note char(50) default null,in p3Date char(25) default
null,in p3Event char(20) default null,in p3From char(25) default null,in p3To char(25) default null,in p3Brk char(20) default null,in p3Qty char(20) default null,in p3Note char(50) default null,in p4Date char(25) default
null,in p4Event char(20) default null,in p4From char(25) default null,in p4To char(25) default null,in p4Brk char(20) default null,in p4Qty char(20) default null,in p4Note char(50) default null,in p5Date char(25) default
null,in p5Event char(20) default null,in p5From char(25) default null,in p5To char(25) default null,in p5Brk char(20) default null,in p5Qty char(20) default null,in p5Note char(50) default null,in p6Date char(25) default
null,in p6Event char(20) default null,in p6From char(25) default null,in p6To char(25) default null,in p6Brk char(20) default null,in p6Qty char(20) default null,in p6Note char(50) default null,in p7Date char(25) default
null,in p7Event char(20) default null,in p7From char(25) default null,in p7To char(25) default null,in p7Brk char(20) default null,in p7Qty char(20) default null,in p7Note char(50) default null,in p8Date char(25) default
null,in p8Event char(20) default null,in p8From char(25) default null,in p8To char(25) default null,in p8Brk char(20) default null,in p8Qty char(20) default null,in p8Note char(50) default null,in p9Date char(25) default
null,in p9Event char(20) default null,in p9From char(25) default null,in p9To char(25) default null,in p9Brk char(20) default null,in p9Qty char(20) default null,in p9Note char(50) default null,in p10Date char(25) default
null,in p10Event char(20) default null,in p10From char(25) default null,in p10To char(25) default null,in p10Brk char(20) default null,in p10Qty char(20) default null,in p10Note char(50) default null)
result(pResult char(250))
begin
  declare swebusername char(50);
  declare CanAuthorise smallint;
  declare thelog long varchar;
  declare local temporary table IDs(
    ID char(20) null,
    ) not transactional;
  insert into IDs( ID) 
    select distinct e.companyid from iqxnetuserlink as l key join employment as e where l.iqxnetuserid = pWebUserID;
  if not pvacancyid = any(select v.vacancyid from vacancy as v key join employment as e join IDs on e.companyid = IDs.ID) then
    select '99:~Permission denied';
    return
  end if;
  if IQXNetHasPermission(pWebUserID,'ORDERJOBS') = 0 then
    select '99:~Permission denied';
    return
  end if;
  set swebusername=(select name from iqxnetuser where iqxnetuserid = pwebuserid);
  set CanAuthorise=IQXNetHasPermission(pWebUserID,'AUTHORISEJOBS');
  call NetCandidateAddEventsOneDay(pdate = iqxnetstringtodate(p1date),pshifttemplateid = p1,ptimefrom = p1from,ptimeto = p1to,pbreak = p1brk,pnote = p1note,pqty = p1qty,pwebuserid = pwebuserid,pvacancyid = pvacancyid,pcanauthorise = canauthorise,ptheirref = ptheirref,porderreason = porderreason,pwebusername = swebusername,plog = thelog);
  call NetCandidateAddEventsOneDay(pdate = iqxnetstringtodate(p2date),pshifttemplateid = p2,ptimefrom = p2from,ptimeto = p2to,pbreak = p2brk,pnote = p2note,pqty = p2qty,pwebuserid = pwebuserid,pvacancyid = pvacancyid,pcanauthorise = canauthorise,ptheirref = ptheirref,porderreason = porderreason,pwebusername = swebusername,plog = thelog);
  call NetCandidateAddEventsOneDay(pdate = iqxnetstringtodate(p3date),pshifttemplateid = p3,ptimefrom = p3from,ptimeto = p3to,pbreak = p3brk,pnote = p3note,pqty = p3qty,pwebuserid = pwebuserid,pvacancyid = pvacancyid,pcanauthorise = canauthorise,ptheirref = ptheirref,porderreason = porderreason,pwebusername = swebusername,plog = thelog);
  call NetCandidateAddEventsOneDay(pdate = iqxnetstringtodate(p4date),pshifttemplateid = p4,ptimefrom = p4from,ptimeto = p4to,pbreak = p4brk,pnote = p4note,pqty = p4qty,pwebuserid = pwebuserid,pvacancyid = pvacancyid,pcanauthorise = canauthorise,ptheirref = ptheirref,porderreason = porderreason,pwebusername = swebusername,plog = thelog);
  call NetCandidateAddEventsOneDay(pdate = iqxnetstringtodate(p5date),pshifttemplateid = p5,ptimefrom = p5from,ptimeto = p5to,pbreak = p5brk,pnote = p5note,pqty = p5qty,pwebuserid = pwebuserid,pvacancyid = pvacancyid,pcanauthorise = canauthorise,ptheirref = ptheirref,porderreason = porderreason,pwebusername = swebusername,plog = thelog);
  call NetCandidateAddEventsOneDay(pdate = iqxnetstringtodate(p6date),pshifttemplateid = p6,ptimefrom = p6from,ptimeto = p6to,pbreak = p6brk,pnote = p6note,pqty = p6qty,pwebuserid = pwebuserid,pvacancyid = pvacancyid,pcanauthorise = canauthorise,ptheirref = ptheirref,porderreason = porderreason,pwebusername = swebusername,plog = thelog);
  call NetCandidateAddEventsOneDay(pdate = iqxnetstringtodate(p7date),pshifttemplateid = p7,ptimefrom = p7from,ptimeto = p7to,pbreak = p7brk,pnote = p7note,pqty = p7qty,pwebuserid = pwebuserid,pvacancyid = pvacancyid,pcanauthorise = canauthorise,ptheirref = ptheirref,porderreason = porderreason,pwebusername = swebusername,plog = thelog);
  call NetCandidateAddEventsOneDay(pdate = iqxnetstringtodate(p8date),pshifttemplateid = p8,ptimefrom = p8from,ptimeto = p8to,pbreak = p8brk,pnote = p8note,pqty = p8qty,pwebuserid = pwebuserid,pvacancyid = pvacancyid,pcanauthorise = canauthorise,ptheirref = ptheirref,porderreason = porderreason,pwebusername = swebusername,plog = thelog);
  call NetCandidateAddEventsOneDay(pdate = iqxnetstringtodate(p9date),pshifttemplateid = p9,ptimefrom = p9from,ptimeto = p9to,pbreak = p9brk,pnote = p9note,pqty = p9qty,pwebuserid = pwebuserid,pvacancyid = pvacancyid,pcanauthorise = canauthorise,ptheirref = ptheirref,porderreason = porderreason,pwebusername = swebusername,plog = thelog);
  call NetCandidateAddEventsOneDay(pdate = iqxnetstringtodate(p10date),pshifttemplateid = p10,ptimefrom = p10from,ptimeto = p10to,pbreak = p10brk,pnote = p10note,pqty = p10qty,pwebuserid = pwebuserid,pvacancyid = pvacancyid,pcanauthorise = canauthorise,ptheirref = ptheirref,porderreason = porderreason,pwebusername = swebusername,plog = thelog);
  if CanAuthorise = 1 then
    call IQXNetPopup(pWebUserID,null,null,pvacancyid,null,null,null,'New shift requirement(s) added',thelog)
  end if;
  select '0:~Success'
end]]>
  </SQLExec>
  <SQLExec ignoreerror="YES">
<![CDATA[grant execute on pears.NetCandidateAddEventsMultiDay to IQXNet]]>
  </SQLExec>
  <SQLExec ignoreerror="YES">
<![CDATA[drop procedure pears.NetCandidateAddEventsOneDay]]>
  </SQLExec>
  <SQLExec parameters="NO" xProcName="NetCandidateAddEventsOneDay">
<![CDATA[create procedure pears.NetCandidateAddEventsOneDay(in pWebUserID char(20),in pvacancyid char(20),in pshifttemplateid char(20),in pDateFrom date,in pTimeFrom char(25) default
null,in pDateTo date,in pTimeTo char(25) default null,in pBreak char(20) default null,in pTheirRef char(50) default null,in pNote char(50) default null,in pQty char(20) default null,in pShiftType char(50) default null,in pSkills char(100) default
null,in pGrade char(50) default null,in pWebUserName char(50) default null,in pCanAuthorise smallint default 0,inout pLog long varchar)
begin
  declare sid char(20);
  declare cnt integer;
  declare i integer;
  declare tfrom time;
  declare tto time;
  declare ibreak integer;
  declare slog char(200);
  declare pOrderReason char(100);
  if pdateFrom is null then
    return
  end if;
  set i=charindex('|',pshifttemplateid);
  if i > 0 then // Get rid of any extra info tacked onto the code
    set pshifttemplateid="left"(pshifttemplateid,i-1)
  end if;
  if trim(isnull(pshifttemplateid,'')) = '' then
    return
  end if;
  set cnt=isnull(iqxnetstringtointeger(pqty),0);
  if cnt <= 0 then
    return
  end if;
  set tfrom=iqxnetstringtotime(pTimeFrom);
  set tto=iqxnetstringtotime(pTimeTo);
  set ibreak=iqxnetstringtointeger(pbreak); // If times and break not supplied they will come from the template
  while cnt > 0 loop
    set sid=uniquekey(cnt);
    insert into tempshiftplan( TempShiftPlanID,VacancyID,TimeFrom,TimeTo,BreakMinutes,ShiftDate,Moveable,Description,ClientNote,EssentialSkill,EssentialSkillChoiceList,EssentialSkillGradeID,ReferenceCode,ReferenceRequired,ClientMustConfirm,TempMustConfirm,OrderedBy,TempShiftTypeID,AnalysisCode,RecoveryHours,TempShiftOrderReasonID) 
      select sid,pvacancyid,isnull(tfrom,timefrom),isnull(tto,timeto),isnull(ibreak,breakminutes),pdateFrom,Moveable,Description,pNote,string(taglocation,';',tagid,';',tagchoiceid,';',gradetagid),replace(pskills,"char"(9),';'),pgrade,ucase(pTheirRef),ReferenceRequired,ClientMustConfirm,TempMustConfirm,pWebUserName,TempShiftTypeID,AnalysisCode,RecoveryHours,nullif(pOrderReason,'')
        from tempshifttemplate where tempshifttemplateid = pshifttemplateid;
    call NetSetShiftPlanCascade(sid);
    if pCanAuthorise = 0 then
      insert into tempshift( tempshiftid,vacancyid,shiftdate,timefrom,timeto,breakminutes,state,tempshiftplanid,cancelreason) 
        select sid,pvacancyid,pdateFrom,isnull(tfrom,timefrom),isnull(tto,timeto),isnull(ibreak,breakminutes),'C',sid,'~'
          from tempshifttemplate where tempshifttemplateid = pshifttemplateid
    end if;
    set slog=(select string(dateformat(pdateFrom,'dd/mm/yyyy'),' ',dateformat(isnull(tfrom,timefrom),'hh:nn'),'-',dateformat(isnull(tto,timeto),'hh:nn'),' ',description)
        from tempshifttemplate where tempshifttemplateid = pshifttemplateid);
    set pLog=string(pLog,slog,"char"(13),"char"(10));
    set cnt=cnt-1
  end loop
end]]>
  </SQLExec>
  <SQLExec ignoreerror="YES">
<![CDATA[grant execute on pears.NetCandidateAddEventsOneDay to IQXNet]]>
  </SQLExec>
  <SQLExec ignoreerror="YES">
<![CDATA[drop procedure pears.NetCandidateCalendar]]>
  </SQLExec>
  <SQLExec parameters="NO" xProcName="NetCandidateCalendar">
<![CDATA[create procedure pears.NetCandidateCalendar(in pWebUserID char(20),in pstart double,in pend double)
result(id char(20),title char(100),className char(50),allDay char(5),shiftStart char(20),shiftEnd char(20),description char(250),editable char(5),deletable char(5),confirmable char(5),unconfirmable char(5))
begin
  declare t char(5);
  declare f char(5);
  declare dStart date;
  declare dEnd date;
  set t='true';
  set f='false';
  set dstart=dateadd(second,pstart,'1970-01-01');
  set dend=dateadd(second,pend,'1970-01-01');
  select s.tempshiftid,
    (case s.state when 'H' then 'Holiday' when 'U' then 'Unavailable' when 'A' then 'Available' when 'C' then 'Cancelled' when 'P' then 'Provisionally Working'
    else 'Working'
    end) as title,(case s.state when 'H' then 'calendarUnavailable' when 'U' then 'calendarUnavailable' when 'A' then 'calendarAvailable' when 'P' then 'calendarBooked' when 'C' then 'calendarCancelled' end) as className,
    (if s.timefrom is null or s.timeto is null then t else f
    endif) as allDay,(if allDay = t then dateformat(s.shiftdate,'yyyy-mm-dd')
    else dateformat(s.shiftdate+s.timefrom,'yyyy-mm-ddThh:nn:ssZ')
    endif) as shiftStart,(if allDay = t then dateformat(s.shiftdate,'yyyy-mm-dd')
    else if s.timeto >= s.timefrom then dateformat(s.shiftdate+s.timeto,'yyyy-mm-ddThh:nn:ssZ')
    else dateformat(dateadd(day,1,s.shiftdate+s.timeto),'yyyy-mm-ddThh:nn:ssZ')
    endif
    endif) as shiftEnd,string(vacancy.position,' ',company.name) as description,
    (if s.state in( 'H','A','U') then t else f
    endif) as editable,editable as deleteable,
    (if s.state = 'P' and isnull(tempconfirmed,0) = 0 then t else f
    endif) as confirmable,(if s.state = 'P' and isnull(tempconfirmed,0) = 1 then t else f
    endif) as unconfirmable from tempshift as s key join person key join iqxnetuserlink
    ,tempshift as s key left outer join tempshiftunavailablereason
    ,tempshift as s key left outer join(vacancy key join employment key join company)
    where iqxnetuserlink.iqxnetuserid = pwebuserid
    and s.shiftdate >= dstart-1 and s.shiftdate <= dend and not(s.state = 'C' and isnull(s.tempconfirmed,0) = 1) union all
  select e.employmentid,'Working','',t,
    dateformat(e.startdate,'yyyy-mm-dd'),dateformat(isnull(e.leavedate,dend),'yyyy-mm-dd'),
    string(e.position,' ',company.name),f,f,f,f
    from employment as e key join(person,company)
    ,person key join iqxnetuserlink
    where iqxnetuserlink.iqxnetuserid = pwebuserid
    and(e.leavedate is null or e.leavedate >= dstart) and e.startdate <= dend
    and isnull(e.concurrent,0) = 0 order by
    shiftstart asc
end]]>
  </SQLExec>
  <SQLExec ignoreerror="YES">
<![CDATA[grant execute on pears.NetCandidateCalendar to IQXNet]]>
  </SQLExec>
  <SQLExec ignoreerror="YES">
<![CDATA[drop procedure pears.NetCandidateCalendarSave]]>
  </SQLExec>
  <SQLExec parameters="NO" xProcName="NetCandidateCalendarSave">
<![CDATA[create procedure pears.NetCandidateCalendarSave() /* [IN | OUT | INOUT] parameter_name parameter_type [DEFAULT default_value], ... */
/* RESULT( column_name column_type, ... ) */
begin
  /* Type the procedure statements here */
end]]>
  </SQLExec>
  <SQLExec ignoreerror="YES">
<![CDATA[grant execute on pears.NetCandidateCalendarSave to IQXNet]]>
  </SQLExec>
  <SQLExec ignoreerror="YES">
<![CDATA[drop procedure pears.NetCandidateDepartmentRegister]]>
  </SQLExec>
  <SQLExec parameters="NO" xProcName="NetCandidateDepartmentRegister">
<![CDATA[create procedure pears.NetCandidateDepartmentRegister(in pWebUserID char(20),in pdepartmentid char(10),in ppersonid char(20) default null,in ptemp smallint default
null,in pperm smallint default null,in qanswers long varchar default null)
result(pResult char(250))
begin
  if trim(isnull(ppersonid,'')) = '' then
    set ppersonid=(select first personid from iqxnetuserlink where iqxnetuserid = pwebuserid)
  end if;
  if not ppersonid = any(select personid from iqxnetuserlink where iqxnetuserid = pwebuserid) then
    select '99:~Permission denied';
    return
  end if;
  set ptemp=isnull(ptemp,0);
  set pperm=isnull(pperm,0);
  if ptemp = 0 and pperm = 0 then
    delete from search where personid = ppersonid and departmentid = pdepartmentid
  else
    update search set temp = ptemp,permanent = pperm where personid = ppersonid and departmentid = pdepartmentid;
    if @@rowcount = 0 then
      insert into search( searchid,personid,departmentid,temp,permanent) values( uniquekey(''),ppersonid,pdepartmentid,ptemp,pperm) 
    end if
  end if;
  call IQXNetSaveQuestionnaire(ppersonid,qanswers);
  select '0:~Success'
end]]>
  </SQLExec>
  <SQLExec ignoreerror="YES">
<![CDATA[grant execute on pears.NetCandidateDepartmentRegister to IQXNet]]>
  </SQLExec>
  <SQLExec ignoreerror="YES">
<![CDATA[drop procedure pears.NetCandidateDiary]]>
  </SQLExec>
  <SQLExec parameters="NO" xProcName="NetCandidateDiary">
<![CDATA[create procedure pears.NetCandidateDiary(in pWebUserID char(20))
result(DiaryID char(50),DiaryClass char(50),ActionType char(50),Description char(100),DiaryStatus char(50),DateFrom date,DateTo date,TimeFrom time,TimeTo time)
begin
  declare pstart date;
  set pstart=current date;
  while dow(pstart) <> 2 loop
    set pstart=pstart-1
  end loop;
  select string('Shift_',s.tempshiftid) as DiaryID,
    (case s.state when 'H' then 'Holiday' when 'U' then 'Unavailable' when 'A' then 'Available' when 'C' then 'Cancelled'
    else 'Working'
    end) as DiaryClass,(case s.state when 'H' then 'deleteable_shift' when 'U' then 'deleteable_shift' when 'A' then 'deleteable_shift' when 'P' then 'confirmable_shift' when 'C' then 'cancelled_shift' end) as ActionType,
    isnull(company.name,tempshiftunavailablereason.name) as Description,
    (if s.state = 'P' then 'Provisional'
    else ''
    endif) as DiaryStatus,s.shiftdate as DateFrom,
    isnull((if s.timeto <= s.timefrom then s.shiftdate+1 else s.shiftdate
    endif),s.shiftdate) as DateTo,
    s.TimeFrom,
    s.TimeTo
    from tempshift as s key join person key join iqxnetuserlink
    ,tempshift as s key left outer join tempshiftunavailablereason
    ,tempshift as s key left outer join(vacancy key join employment key join company)
    where iqxnetuserlink.iqxnetuserid = pwebuserid
    and s.shiftdate >= pstart-1 and not(s.state = 'C' and isnull(s.tempconfirmed,0) = 1) union all
  select string('Employment_',e.employmentid) as DiaryID,'Working' as DiaryClass,'' as ActionType,
    company.name as Description,'' as DiaryStatus,
    e.startdate as DateFrom,
    e.leavedate as DateTo,
    cast(null as time) as TimeFrom,
    cast(null as time) as TimeTo
    from employment as e key join(person,company)
    ,person key join iqxnetuserlink
    where iqxnetuserlink.iqxnetuserid = pwebuserid
    and(e.leavedate is null or e.leavedate >= pstart)
    and isnull(e.concurrent,0) = 0 order by
    DateFrom asc,TimeFrom asc
end]]>
  </SQLExec>
  <SQLExec ignoreerror="YES">
<![CDATA[grant execute on pears.NetCandidateDiary to IQXNet]]>
  </SQLExec>
  <SQLExec ignoreerror="YES">
<![CDATA[drop procedure pears.NetCandidateDiaryActionSave]]>
  </SQLExec>
  <SQLExec parameters="NO" xProcName="NetCandidateDiaryActionSave">
<![CDATA[create procedure pears.NetCandidateDiaryActionSave(in pWebUserID char(20),in pActions long varchar)
result(pResult char(250))
begin
  declare persid char(20);
  declare i smallint;
  declare s char(100);
  declare sAction char(20);
  set persid=(select first personid from iqxnetuserlink where iqxnetuserid = pwebuserid);
  if persid is null then
    select '99:~Permission denied';
    return
  end if;
  set pActions=trim(isnull(pActions,''));
  looplabel: loop
    if pActions = '' then
      leave looplabel
    end if;
    set i=charindex(',',pActions);
    if i = 0 then
      set s=pActions;
      set pActions=''
    else
      set s=trim("left"(pActions,i-1));
      set pActions=trim("right"(pActions,length(pActions)-i))
    end if;
    if s like 'Shift%' then
      set s="right"(s,length(s)-6);
      set i=charindex('=',s);
      set sAction="right"(s,length(s)-i);
      set s="left"(s,i-1);
      if saction = 'Delete' then
        delete from tempshift where tempshiftid = s and personid = persid and state in( 'A','U','H') 
      else if saction = 'Confirm' then
          update tempshift set tempconfirmed = 1 where tempshiftid = s and personid = persid and state in( 'P','C') ;
          call IQXNetRequestAction(pWebUserID,'CandidateConfirm','SHIFT',s)
        else if saction = 'Reject' then
            update tempshift set state = 'C',whencancelled = current timestamp,whocancelled = userstaffid,crefill = 1,clientconfirmed = 0,tempconfirmed = 1,cancelreason = 'T'
              where tempshiftid = s and personid = persid and state = 'P';
            call IQXNetRequestAction(pWebUserID,'CandidateReject','SHIFT',s)
          else if saction = 'Acknowledge' then
              update tempshift set tempconfirmed = 1
                where tempshiftid = s and personid = persid and state = 'C'
            end if
          end if
        end if
      end if
    end if
  end loop looplabel;
  select '0:~Success'
end]]>
  </SQLExec>
  <SQLExec ignoreerror="YES">
<![CDATA[grant execute on pears.NetCandidateDiaryActionSave to IQXNet]]>
  </SQLExec>
  <SQLExec ignoreerror="YES">
<![CDATA[drop procedure pears.NetCandidateDiaryAdd]]>
  </SQLExec>
  <SQLExec parameters="NO" xProcName="NetCandidateDiaryAdd">
<![CDATA[create procedure pears.NetCandidateDiaryAdd(in pWebUserID char(20) default null,in pshifttype char(10) default null,in pdatefrom char(50) default null,in pdateto char(50) default null,in ptimefrom char(50) default
null,in ptimeto char(50) default null,in IDCode char(20) default null,in pState char(2) default null)
result(pResult char(250))
begin
  declare persid char(20);
  declare dfrom date;
  declare dto date;
  declare tfrom time;
  declare tto time;
  set persid=(select first personid from iqxnetuserlink where iqxnetuserid = pwebuserid);
  if persid is null then
    select '99:~Permission denied';
    return
  end if;
  set pState=trim(isnull("left"(pState,1),''));
  if pState = 'C' then //Cancel
    update tempshift set state = pState,whencancelled = current timestamp,whocancelled = userstaffid,crefill = 1,clientconfirmed = 0,tempconfirmed = 1,cancelreason = 'T'
      where tempShiftID = IDCode and personid = persid and vacancyid is not null;
    call IQXNetRequestAction(pWebUserID,'CandidateReject','SHIFT',IDCode);
    select '0:~Success';
    return
  end if;
  if pState = 'F' then //conFirm
    update tempshift set tempconfirmed = 1 where tempshiftid = IDCode and personid = persid and vacancyid is not null;
    call IQXNetRequestAction(pWebUserID,'CandidateConfirm','SHIFT',IDCode);
    select '0:~Success';
    return
  end if;
  if pState = 'D' then //delete
    delete from tempshift where tempshiftid = IDCode and personid = persid and vacancyid is null and state in( 'H','A','U') ;
    call IQXNetRequestAction(pWebUserID,'CandidateDelete','SHIFT',IDCode);
    select '0:~Success';
    return
  end if;
  set pshifttype=trim(isnull(pshifttype,''));
  if substring(pshifttype,2,1) = 'W' then -- Whole days
    set ptimefrom='';
    set ptimeto=''
  end if;
  set pshifttype="left"(pshifttype,1);
  set dfrom=iqxnetstringtodate(pdatefrom);
  set dto=iqxnetstringtodate(pdateto);
  set tfrom=iqxnetstringtotime(ptimefrom);
  set tto=iqxnetstringtotime(ptimeto);
  if IDCode <> '' and pState = '' then
    update tempshift set shiftdate = dfrom,timefrom = tfrom,timeto = tto where tempShiftID = IDCode and vacancyid is null and personid = persid;
    select '0:~Success';
    return
  end if;
  if pshifttype not in( 'H','A','U') then //Holiday/Available/Unavailable
    select '101:~invalid availability type';
    return
  end if;
  if(trim(isnull(pdatefrom,'')) <> '' and dfrom is null)
    or(trim(isnull(pdateto,'')) <> '' and dto is null)
    or(trim(isnull(ptimefrom,'')) <> '' and tfrom is null)
    or(trim(isnull(ptimeto,'')) <> '' and tto is null) then
    select '102:~Invalid date or time';
    return
  end if;
  if dfrom is null then
    select '103:~Invalid date';
    return
  end if;
  set dto=isnull(dto,dfrom);
  if tfrom is null then
    set tto=null
  end if;
  if tto is null then
    set tfrom=null
  end if;
  while dfrom <= dto loop
    insert into tempshift( tempshiftid,personid,shiftdate,timefrom,timeto,state) values( uniquekey(dfrom),persid,dfrom,tfrom,tto,pshifttype) ;
    set dfrom=dfrom+1
  end loop;
  select '0:~Success'
end]]>
  </SQLExec>
  <SQLExec ignoreerror="YES">
<![CDATA[grant execute on pears.NetCandidateDiaryAdd to IQXNet]]>
  </SQLExec>
  <SQLExec ignoreerror="YES">
<![CDATA[drop procedure pears.NetCandidateDiaryMultiAdd]]>
  </SQLExec>
  <SQLExec parameters="NO" xProcName="NetCandidateDiaryMultiAdd">
<![CDATA[create procedure pears.NetCandidateDiaryMultiAdd(in pWebUserID char(20),in pShiftType char(10),in pDateFrom char(50),in pMonTick char(3) default 'off',in pTimeFromMon char(25) default
null,in pTimeToMon char(25) default null,in pTueTick char(3) default 'off',in pTimeFromTue char(25) default
null,in pTimeToTue char(25) default null,in pWedTick char(3) default 'off',in pTimeFromWed char(25) default
null,in pTimeToWed char(25) default null,in pThuTick char(3) default 'off',in pTimeFromThu char(25) default
null,in pTimeToThu char(25) default null,in pFriTick char(3) default 'off',in pTimeFromFri char(25) default
null,in pTimeToFri char(25) default null,in pSatTick char(3) default 'off',in pTimeFromSat char(25) default
null,in pTimeToSat char(25) default null,in pSunTick char(3) default 'off',in pTimeFromSun char(25) default
null,in pTimeToSun char(25) default null)
result(pResult char(250))
begin
  declare persid char(20);
  declare dstart date;
  declare ddate date;
  declare dend date;
  declare tFrom time;
  declare tTo time;
  declare CanAuthorise smallint;
  declare pvacancyid char(20);
  declare thelog char(20);
  set persid=(select first personid from iqxnetuserlink where iqxnetuserid = pwebuserid);
  if persid is null then
    select '99:~Permission denied';
    return
  end if;
  set dstart=iqxnetstringtodate(pDateFrom);
  if dstart is null then
    select '500:~Invalid start date';
    return
  end if;
  if substring(pDateFrom,0,3) <> 'Mon' then
    select '500:~Start date must be a Monday';
    return
  end if;
  if pshifttype not in( 'H','A','U') then //Holiday/Available/Unavailable
    select '101:~invalid shift type';
    return
  end if;
  set CanAuthorise=IQXNetHasPermission(pWebUserID,'AUTHORISEJOBS');
  set ddate=dstart;
  if pMonTick = 'on' then
    set tFrom=iqxnetstringtotime(pTimeFromMon);
    set tTo=iqxnetstringtotime(pTimeToMon);
    insert into tempshift( tempshiftid,personid,shiftdate,timefrom,timeto,state) values( uniquekey(ddate),persid,ddate,tFrom,tTo,pshifttype) 
  end if;
  set ddate=ddate+1;
  if pTueTick = 'on' then
    set tFrom=iqxnetstringtotime(pTimeFromTue);
    set tTo=iqxnetstringtotime(pTimeToTue);
    insert into tempshift( tempshiftid,personid,shiftdate,timefrom,timeto,state) values( uniquekey(ddate),persid,ddate,tFrom,tTo,pshifttype) 
  end if;
  set ddate=ddate+1;
  if pWedTick = 'on' then
    set tFrom=iqxnetstringtotime(pTimeFromWed);
    set tTo=iqxnetstringtotime(pTimeToWed);
    insert into tempshift( tempshiftid,personid,shiftdate,timefrom,timeto,state) values( uniquekey(ddate),persid,ddate,tFrom,tTo,pshifttype) 
  end if;
  set ddate=ddate+1;
  if pThuTick = 'on' then
    set tFrom=iqxnetstringtotime(pTimeFromThu);
    set tTo=iqxnetstringtotime(pTimeToThu);
    insert into tempshift( tempshiftid,personid,shiftdate,timefrom,timeto,state) values( uniquekey(ddate),persid,ddate,tFrom,tTo,pshifttype) 
  end if;
  set ddate=ddate+1;
  if pFriTick = 'on' then
    set tFrom=iqxnetstringtotime(pTimeFromFri);
    set tTo=iqxnetstringtotime(pTimeToFri);
    insert into tempshift( tempshiftid,personid,shiftdate,timefrom,timeto,state) values( uniquekey(ddate),persid,ddate,tFrom,tTo,pshifttype) 
  end if;
  set ddate=ddate+1;
  if pSatTick = 'on' then
    set tFrom=iqxnetstringtotime(pTimeFromSat);
    set tTo=iqxnetstringtotime(pTimeToSat);
    insert into tempshift( tempshiftid,personid,shiftdate,timefrom,timeto,state) values( uniquekey(ddate),persid,ddate,tFrom,tTo,pshifttype) 
  end if;
  set ddate=ddate+1;
  if pSunTick = 'on' then
    set tFrom=iqxnetstringtotime(pTimeFromSun);
    set tTo=iqxnetstringtotime(pTimeToSun);
    insert into tempshift( tempshiftid,personid,shiftdate,timefrom,timeto,state) values( uniquekey(ddate),persid,ddate,tFrom,tTo,pshifttype) 
  end if;
  if CanAuthorise = 1 then
    call IQXNetPopup(pWebUserID,null,null,pvacancyid,null,null,null,'New shift requirement(s) added',thelog)
  end if;
  select '0:~Success'
end]]>
  </SQLExec>
  <SQLExec ignoreerror="YES">
<![CDATA[grant execute on pears.NetCandidateDiaryMultiAdd to IQXNet]]>
  </SQLExec>
  <SQLExec ignoreerror="YES">
<![CDATA[drop procedure pears.NetCandidateDiaryReasons]]>
  </SQLExec>
  <SQLExec parameters="NO" xProcName="NetCandidateDiaryReasons">
<![CDATA[create procedure pears.NetCandidateDiaryReasons(in pWebUserID char(20))
result(OrderReasonList long varchar)
begin
  select NetOrderReasonList(*) as OrderReasonList from dummy
end]]>
  </SQLExec>
  <SQLExec ignoreerror="YES">
<![CDATA[grant execute on pears.NetCandidateDiaryReasons to IQXNet]]>
  </SQLExec>
  <SQLExec ignoreerror="YES">
<![CDATA[drop procedure pears.NetCandidateDocuments]]>
  </SQLExec>
  <SQLExec parameters="NO" xProcName="NetCandidateDocuments">
<![CDATA[create procedure pears.NetCandidateDocuments(in pWebUserID char(20),in pPersonID char(20) default null)
result(DocType char(50),DocDescription char(50),LastUpdate timestamp,SpecialType char(50),DocumentID char(20),PersonID char(20),SortOrder integer)
begin
  declare userClass char(20);
  declare isCandorAgency smallint;
  if iqxnethaspermission(pwebuserid,'DOCCANDDOWNLOAD') = 0 then
    set pPersonID=null
  else
    set userClass=(select first iqxnetuserclassid from iqxnetuser where iqxnetuserid = pWebUserID);
    if userClass = 'CANDIDATE' then
      set isCandorAgency=1;
      set pPersonID=(select first personid from iqxnetuserlink where personid = isnull(pPersonID,personid) and iqxnetuserid = pwebuserid)
    else if userClass = 'AGENCY' then
        set isCandorAgency=1;
        set pPersonID=(select first pay_employee.personid
            from pay_employee key join company as agcomp key join employment as agemp key join iqxnetuserlink
            where pay_employee.personid = ppersonid and iqxnetuserlink.iqxnetuserid = pwebuserid)
      else
        set isCandorAgency=0
      end if
    end if
  end if;
  select documenttype.description,oledocument.description,isnull(blobstore.changedat,blobstore.createdat),'',oledocument.oledocumentid,oledocument.ownerid,100+isnull(documenttype.sortorder,0) as ord
    from oledocument join blobstore on blobstore.id = oledocument.oledocumentid and blobstore.class = 'O'
    ,oledocument key join documenttype
    where oledocument.ownertype = 'P' and oledocument.ownerid = ppersonid and(oledocument.rawfile = 1 or blobstore.zipped = 2)
    and(isCandorAgency = 1 or blobstore.publishtoweb = 1) union all
  select 'Primary','CV',isnull(blobstore.changedat,blobstore.createdat),'PRIMARY_CV',null,blobstore.id,1 as ord
    from blobstore where blobstore.class = 'V' and blobstore.id = pPersonID and blobstore.zipped = 2 and(isCandorAgency = 1 or blobstore.publishtoweb = 1) union all
  select 'Primary','Photo',isnull(blobstore.changedat,blobstore.createdat),'PRIMARY_PHOTO',null,blobstore.id,2 as ord
    from blobstore where blobstore.class = 'J' and blobstore.id = pPersonID and(isCandorAgency = 1 or blobstore.publishtoweb = 1) order by
    ord asc
end]]>
  </SQLExec>
  <SQLExec ignoreerror="YES">
<![CDATA[grant execute on pears.NetCandidateDocuments to IQXNet]]>
  </SQLExec>
  <SQLExec ignoreerror="YES">
<![CDATA[drop procedure pears.NetCandidateProfile]]>
  </SQLExec>
  <SQLExec parameters="NO" xProcName="NetCandidateProfile">
<![CDATA[create procedure pears.NetCandidateProfile(in pWebUserID char(20))
result(PersonID char(20),Forenames char(50),Surname char(50),Gender char(1),DOB date,HomePhone char(250),DayPhone char(250),Mobile char(250),Email char(250),Addr1 char(50),Addr2 char(50),Addr3 char(50),Town char(50),County char(50),Country char(50),Postcode char(50))
begin
  select first person.personid,person.forenames,person.surname,person.sex,person.dob,
    getphone('P','Home Telephone',person.personid) as HomePhone,getphone('P','Day Telephone',person.personid) as DayPhone,
    getphone('P','Mobile',person.personid) as Mobile,getphone('P','E-mail',person.personid) as Email,
    person.addr1,person.addr2,person.addr3,person.town,person.county,person.country,person.postcode
    from person key join iqxnetuserlink key join iqxnetuser where iqxnetuser.iqxnetuserid = pWebUserID
end]]>
  </SQLExec>
  <SQLExec ignoreerror="YES">
<![CDATA[grant execute on pears.NetCandidateProfile to IQXNet]]>
  </SQLExec>
  <SQLExec ignoreerror="YES">
<![CDATA[drop procedure pears.NetCandidateProfileBank]]>
  </SQLExec>
  <SQLExec parameters="NO" xProcName="NetCandidateProfileBank">
<![CDATA[create procedure pears.NetCandidateProfileBank(in pWebUserID char(20))
result(PersonID char(20),ni char(10),BankName char(30),BankSortCode char(8),BankAcName char(50),BankAcNo char(8),UniqueTaxReference char(20))
begin
  select person.personid,person.ni,Pay_Employee.BankName,Pay_Employee.BankSortCode,Pay_Employee.BankAcName,
    Pay_Employee.BankAcNo,Pay_Employee.UniqueTaxReference
    from person key left outer join Pay_Employee
    ,person key join iqxnetuserlink key join iqxnetuser
    where iqxnetuser.iqxnetuserid = pWebUserID
end]]>
  </SQLExec>
  <SQLExec ignoreerror="YES">
<![CDATA[grant execute on pears.NetCandidateProfileBank to IQXNet]]>
  </SQLExec>
  <SQLExec ignoreerror="YES">
<![CDATA[drop procedure pears.NetCandidateProfileSet]]>
  </SQLExec>
  <SQLExec parameters="NO" xProcName="NetCandidateProfileSet">
<![CDATA[create procedure pears.NetCandidateProfileSet(in pWebUserID char(20),in ppersonid char(20),in pForenames char(50) default 'NOT-SET',in pSurname char(50) default 'NOT-SET',in pGender char(20) default 'NOT-SET',in pdob char(20) default 'NOT-SET',in phomephone char(250) default 'NOT-SET',in pDayPhone char(250) default 'NOT-SET',in pMobile char(250) default 'NOT-SET',in pemail char(250) default 'NOT-SET',in pAddr1 char(50) default 'NOT-SET',in pAddr2 char(50) default 'NOT-SET',in pAddr3 char(50) default 'NOT-SET',in pTown char(50) default 'NOT-SET',in pCounty char(50) default 'NOT-SET',in pCountry char(50) default 'NOT-SET',in pPostcode char(50) default 'NOT-SET',in pOLDForenames char(50) default 'NOT-SET',in pOLDSurname char(50) default 'NOT-SET',in pOLDGender char(20) default 'NOT-SET',in pOLDdob char(20) default 'NOT-SET',in pOLDhomephone char(250) default 'NOT-SET',in pOLDDayPhone char(250) default 'NOT-SET',in pOLDMobile char(250) default 'NOT-SET',in pOLDemail char(250) default 'NOT-SET',in pOLDAddr1 char(50) default 'NOT-SET',in pOLDAddr2 char(50) default 'NOT-SET',in pOLDAddr3 char(50) default 'NOT-SET',in pOLDTown char(50) default 'NOT-SET',in pOLDCounty char(50) default 'NOT-SET',in pOLDCountry char(50) default 'NOT-SET',in pOLDPostcode char(50) default 'NOT-SET',in qanswers long varchar default
null)
result(pResult char(250))
begin
  declare dateofbirth date;
  declare bnamechanged smallint;
  declare ssql char(255);
  set bnamechanged=0;
  set ssql='';
  if not ppersonid = any(select personid from iqxnetuserlink where iqxnetuserid = pwebuserid) then
    select '99:~Permission denied';
    return
  end if;
  if isnull(pforenames,'') <> isnull(poldforenames,'') then
    set ssql=ssql+',forenames=pforenames';
    set ssql=ssql+',salutation=getword(pforenames,1)';
    set bnamechanged=1
  end if;
  if isnull(psurname,'') <> isnull(poldsurname,'') then
    set ssql=ssql+',surname=psurname';
    set bnamechanged=1
  end if;
  if bnamechanged = 1 then
    set ssql=ssql+',name=string(getword(pforenames,1),'' '',psurname)';
    set ssql=ssql+',keyname=makekeyname(string(psurname,'' '',pforenames))'
  end if;
  if isnull(pgender,'') <> isnull(poldgender,'') then
    set ssql=ssql+',sex=pgender'
  end if;
  if isnull(pdob,'') <> isnull(pOLDdob,'') then
    set dateofbirth=IQXNetStringToDate(pdob);
    if trim(isnull(pdob,'')) <> '' and dateofbirth is null then
      select '1:~Invalid date of birth';
      return
    end if;
    set ssql=ssql+',dob = dateofbirth'
  end if;
  if isnull(paddr1,'') <> isnull(poldaddr1,'') then
    set ssql=ssql+',addr1=paddr1'
  end if;
  if isnull(paddr2,'') <> isnull(poldaddr2,'') then
    set ssql=ssql+',addr2=paddr2'
  end if;
  if isnull(paddr3,'') <> isnull(poldaddr3,'') then
    set ssql=ssql+',addr3=paddr3'
  end if;
  if isnull(ptown,'') <> isnull(poldtown,'') then
    set ssql=ssql+',town=ptown'
  end if;
  if isnull(pcounty,'') <> isnull(poldcounty,'') then
    set ssql=ssql+',county=pcounty'
  end if;
  if isnull(pcountry,'') <> isnull(poldcountry,'') then
    set ssql=ssql+',country=pcountry'
  end if;
  if isnull(ppostcode,'') <> isnull(poldpostcode,'') then
    set ssql=ssql+',postcode=ucase(ppostcode)'
  end if;
  if ssql <> '' then
    execute immediate 'update person set '+stuff(ssql,1,1,'')+' where personid=ppersonid'
  end if;
  if isnull(phomephone,'') <> isnull(pOLDhomephone,'') then
    call setphone('P','Home Telephone',ppersonid,phomephone)
  end if;
  if isnull(pdayphone,'') <> isnull(pOLDdayphone,'') then
    call setphone('P','Day Telephone',ppersonid,pdayphone)
  end if;
  if isnull(pmobile,'') <> isnull(pOLDmobile,'') then
    call setphone('P','Mobile',ppersonid,pmobile)
  end if;
  if isnull(pemail,'') <> isnull(pOLDemail,'') then
    call setphone('P','E-mail',ppersonid,pemail);
    update iqxnetuserlink key join iqxnetuser set iqxnetuser.emailaddress = pemail where iqxnetuserlink.personid = ppersonid
  end if;
  call IQXNetSaveQuestionnaire(ppersonid,qanswers);
  call personrecordupdated(ppersonid);
  select '0:~Success'
end]]>
  </SQLExec>
  <SQLExec ignoreerror="YES">
<![CDATA[grant execute on pears.NetCandidateProfileSet to IQXNet]]>
  </SQLExec>
  <SQLExec ignoreerror="YES">
<![CDATA[drop procedure pears.NetCandidateProfileSetBank]]>
  </SQLExec>
  <SQLExec parameters="NO" xProcName="NetCandidateProfileSetBank">
<![CDATA[create procedure pears.NetCandidateProfileSetBank(in pWebUserID char(20),in ppersonid char(20),in pni char(10) default 'NOT-SET',in pBankName char(30) default 'NOT-SET',in pBankSortCode char(8) default 'NOT-SET',in pBankAcName char(50) default 'NOT-SET',in pBankAcNo char(8) default 'NOT-SET',in pUniqueTaxReference char(20) default 'NOT-SET',in poldni char(10) default 'NOT-SET',in poldBankName char(30) default 'NOT-SET',in poldBankSortCode char(8) default 'NOT-SET',in poldBankAcName char(50) default 'NOT-SET',in poldBankAcNo char(8) default 'NOT-SET',in poldUniqueTaxReference char(20) default 'NOT-SET')
result(pResult char(250))
begin
  declare ssql char(255); // sql string
  declare errmsg char(150);
  set ssql='';
  // check that the record is owned by the logged in user
  if not ppersonid = any(select personid from iqxnetuserlink where iqxnetuserid = pwebuserid) then
    select '99:~Permission denied';
    return
  end if;
  if isnull(pni,'') <> isnull(poldni,'') then // National insurance number goes into person table. others go into pay_Employee table
    set pni=ucase(pni);
    set errmsg=validateninumber(pni);
    if trim(isnull(errmsg,'')) <> '' then
      select '121:~'+errmsg;
      return
    end if;
    set ssql=ssql+'ni=pni'
  end if;
  if ssql <> '' then
    execute immediate 'update person set '+ssql+' where personid=ppersonid'
  end if;
  // check if record already present in Pay_Employee. If no, insert stub record first
  if not exists(select * from Pay_Employee where Personid = ppersonid) then
    // insert stub
    insert into pay_employee( personid) values( ppersonid) 
  end if;
  set ssql=''; // clear for second update to Pay_Employee table
  // update
  if isnull(pBankName,'') <> isnull(poldBankName,'') then
    set ssql=ssql+',BankName=pBankName'
  end if;
  if isnull(pBankSortCode,'') <> isnull(poldBankSortCode,'') then
    set ssql=ssql+',BankSortCode=pBankSortCode'
  end if;
  if isnull(pBankAcName,'') <> isnull(poldBankAcName,'') then
    set ssql=ssql+',BankAcName=pBankAcName'
  end if;
  if isnull(pBankAcNo,'') <> isnull(poldBankAcNo,'') then
    set ssql=ssql+',BankAcNo=pBankAcNo'
  end if;
  if isnull(pUniqueTaxReference,'') <> isnull(poldUniqueTaxReference,'') then
    set ssql=ssql+',UniqueTaxReference=pUniqueTaxReference'
  end if;
  if ssql <> '' then
    execute immediate 'update Pay_Employee set '+stuff(ssql,1,1,'')+' where personid=ppersonid'
  end if;
  call personrecordupdated(ppersonid);
  select '0:~Success'
end]]>
  </SQLExec>
  <SQLExec ignoreerror="YES">
<![CDATA[grant execute on pears.NetCandidateProfileSetBank to IQXNet]]>
  </SQLExec>
  <SQLExec ignoreerror="YES">
<![CDATA[drop procedure pears.NetCandidatePublicProfile]]>
  </SQLExec>
  <SQLExec parameters="NO" xProcName="NetCandidatePublicProfile">
<![CDATA[create procedure pears.NetCandidatePublicProfile(in pWebUserID char(20),in pPersonID char(20))
result(Name char(100),DOB char(20),hasPhoto smallint)
begin
  select first person.name,dateformat(person.dob,'dd/mm/yyyy') as DOB,
    if exists(select id from blobstore where class = 'J' and id = person.personid)
    and iqxnethaspermission(pWebUserID,'DOCCANDDOWNLOAD') = 1 then 1 else 0
    endif as hasPhoto from person
    where person.personid = pPersonID
end]]>
  </SQLExec>
  <SQLExec ignoreerror="YES">
<![CDATA[grant execute on pears.NetCandidatePublicProfile to IQXNet]]>
  </SQLExec>
  <SQLExec ignoreerror="YES">
<![CDATA[drop procedure pears.NetCandidateRegister]]>
  </SQLExec>
  <SQLExec parameters="NO" xProcName="NetCandidateRegister">
<![CDATA[create procedure pears.NetCandidateRegister(in pWebUserID char(20),in pNewWebUserID char(20),in pForenames char(50),in pSurname char(50),in pemail char(250),in pGender char(20) default
null,in pdob char(20) default null,in pNINumber char(20) default null,in phomephone char(250) default null,in pDayPhone char(250) default null,in pMobile char(250) default null,in pAddr1 char(50) default
null,in pAddr2 char(50) default null,in pAddr3 char(50) default null,in pTown char(50) default null,in pCounty char(50) default null,in pCountry char(50) default null,in pPostcode char(50) default null,in qanswers long varchar default
null)
result(pResult char(250))
begin
  declare dateofbirth date;
  declare ppersonid char(20);
  declare pfirstname char(50);
  declare pnewappnumber integer;
  declare pnewstatus char(1);
  declare chained char(3);
  set chained=(select connection_property('chained'));
  set dateofbirth=IQXNetStringToDate(pdob);
  if trim(isnull(pdob,'')) <> '' and dateofbirth is null then
    select '1:~Invalid date of birth';
    return
  end if;
  set ppersonid=uniquekey(pNewWebUserID);
  set pfirstname=getword(pforenames,1);
  if chained = 'On' then
    begin atomic
      update params set nextappnumber = isnull(nextappnumber,0)+1 where autoappnumber = 1;
      if @@rowcount > 0 then
        set pnewappnumber=(select first nextappnumber from params)
      else
        set pnewappnumber=null
      end if
    end
  else
    update params set nextappnumber = isnull(nextappnumber,0)+1 where autoappnumber = 1;
    if @@rowcount > 0 then
      set pnewappnumber=(select first nextappnumber from params)
    else
      set pnewappnumber=null
    end if
  end if;
  set pnewstatus=(select first initialapplicantstatus from params);
  set pnewstatus=isnull(pnewstatus,'C');
  insert into person( personid,forenames,surname,name,keyname,salutation,sex,dob,addr1,addr2,addr3,town,county,country,postcode,appnumber,staffid,status,registrationdate,ni) 
    values( ppersonid,pforenames,psurname,string(pfirstname,' ',psurname),makekeyname(string(psurname,' ',pforenames)),
    pfirstname,pgender,dateofbirth,paddr1,paddr2,paddr3,ptown,pcounty,pcountry,ucase(ppostcode),pnewappnumber,userstaffid,pnewstatus,current date,pNINumber) ;
  call personrecordupdated(ppersonid);
  insert into iqxnetuserlink( iqxnetuserlinkid,iqxnetuserid,personid) values( ppersonid,pnewwebuserid,ppersonid) ;
  if phomephone is not null then
    call setphone('P','Home Telephone',ppersonid,phomephone)
  end if;
  if pdayphone is not null then
    call setphone('P','Day Telephone',ppersonid,pdayphone)
  end if;
  if pmobile is not null then
    call setphone('P','Mobile',ppersonid,pmobile)
  end if;
  if pemail is not null then
    call setphone('P','E-mail',ppersonid,pemail)
  end if;
  call IQXNetSaveQuestionnaire(ppersonid,qanswers);
  select '0:~Success'
end]]>
  </SQLExec>
  <SQLExec ignoreerror="YES">
<![CDATA[grant execute on pears.NetCandidateRegister to IQXNet]]>
  </SQLExec>
  <SQLExec ignoreerror="YES">
<![CDATA[drop procedure pears.NetCandidateRegisterPreCheck]]>
  </SQLExec>
  <SQLExec parameters="NO" xProcName="NetCandidateRegisterPreCheck">
<![CDATA[create procedure pears.NetCandidateRegisterPreCheck(in pWebUserID char(20),in pForenames char(50),in pSurname char(50),in pemail char(250),in pGender char(20) default
null,in pdob char(20) default null,in pNINumber char(20) default null,in phomephone char(250) default null,in pDayPhone char(250) default null,in pMobile char(250) default null,in pAddr1 char(50) default
null,in pAddr2 char(50) default null,in pAddr3 char(50) default null,in pTown char(50) default null,in pCounty char(50) default null,in pCountry char(50) default null,in pPostcode char(50) default null,in qanswers long varchar default
null)
result(pResult char(250))
begin
  declare dateofbirth date;
  set dateofbirth=IQXNetStringToDate(pdob);
  if trim(isnull(pdob,'')) <> '' and dateofbirth is null then
    select '1:~Invalid date of birth';
    return
  end if;
  if dateofbirth is not null and ppostcode is not null then
    if exists(select * from person where postcode = ppostcode and dob = dateofbirth and similar(string(pforenames,' ',psurname),string(forenames,' ',surname)) >= 90) then
      select '9:~You may already be registered - please contact the agency';
      return
    end if
  end if;
  select '0:~Success'
end]]>
  </SQLExec>
  <SQLExec ignoreerror="YES">
<![CDATA[grant execute on pears.NetCandidateRegisterPreCheck to IQXNet]]>
  </SQLExec>
  <SQLExec ignoreerror="YES">
<![CDATA[drop procedure pears.NetCandidateRegistrations]]>
  </SQLExec>
  <SQLExec parameters="NO" xProcName="NetCandidateRegistrations">
<![CDATA[create procedure pears.NetCandidateRegistrations(in pWebUserID char(20))
result(DepartmentID char(10),PersonID char(20),DepartmentName char(100),TempJobs smallint,PermJobs smallint,Details char(100))
begin
  select department.departmentid,search.personid,department.name,isnull(search.temp,0) as TempJobs,isnull(search.permanent,0) as PermJobs,
    (if TempJobs*PermJobs <> 0 then 'Temp and Permanent Jobs' else if TempJobs <> 0 then 'Temp Jobs'
    else if PermJobs <> 0 then 'Permanent Jobs'
    else 'Not Registered'
    endif
    endif
    endif) as details from department left outer join search on department.departmentid = search.departmentid and search.personid = any(select personid from iqxnetuserlink where iqxnetuserid = pWebUserID)
    where department.searchable = 1 and department.publishtoweb = 1 order by
    department.sortorder asc,department.name asc
end]]>
  </SQLExec>
  <SQLExec ignoreerror="YES">
<![CDATA[grant execute on pears.NetCandidateRegistrations to IQXNet]]>
  </SQLExec>
  <SQLExec ignoreerror="YES">
<![CDATA[drop procedure pears.NetCandProvTimesheets]]>
  </SQLExec>
  <SQLExec parameters="NO" xProcName="NetCandProvTimesheets">
<![CDATA[create procedure pears.NetCandProvTimesheets(in pWebUserID char(20))
result(tempprovtimesheetid char(20),serialnumber char(20),tempname char(60),position char(60),companyname char(60),weekenddate date,timesheettype char(1),completed smallint)
begin
  select t.tempprovtimesheetid,t.serialnumber,string(person.surname,', ',person.forenames) as tempname,vacancy.position,company.name as companyname,
    NetTimesheetEndDate(1,1,t.tempprovtimesheetid) as weekenddate,
    if NetVacancyHasRateScript(t.tempjobtypeid,t.vacancyid) = 0 then 'C'
    else if tempdesk.desktype = 'S' then 'S' else if tempdesk.desktype = 'W'
    and exists(select * from placement where placementid = t.placementid and worknormalhours is not null and workstarttime is not null
      and(isnull(workmonday,0) = 1 or isnull(worktuesday,0) = 1 or isnull(workwednesday,0) = 1 or isnull(workthursday,0) = 1 or isnull(workfriday,0) = 1
      or isnull(worksaturday,0) = 1 or isnull(worksunday,0) = 1)) then 'T'
    else 'C'
    endif
    endif
    endif as timesheettype,if t.extnumber = 2 then 1 else 0
    endif as completed from tempprovtimesheet as t key join vacancy key join employment key join company,tempprovtimesheet as t
    key join tempdesk,tempprovtimesheet as t key join person key join iqxnetuserlink
    where iqxnetuserlink.iqxnetuserid = pWebUserID and t.extnumber > 0
    and weekenddate > current date-60 order by
    weekenddate asc,t.serialnumber asc,companyname asc
end]]>
  </SQLExec>
  <SQLExec ignoreerror="YES">
<![CDATA[grant execute on pears.NetCandProvTimesheets to IQXNet]]>
  </SQLExec>
  <SQLExec ignoreerror="YES">
<![CDATA[drop procedure pears.NetClientAddShifts]]>
  </SQLExec>
  <SQLExec parameters="NO" xProcName="NetClientAddShifts">
<![CDATA[create procedure pears.NetClientAddShifts(in pWebUserID char(20),in pvacancyid char(20),in pshifttemplateid char(20),in pshiftdate char(25),in ptimefrom char(25) default
null,in ptimeto char(25) default null,in pBreak char(20) default null,in pTheirRef char(50) default null,in pDescription long varchar default
null,in pSkills char(100) default null,in pGrade char(50) default null,in pNote char(50) default null,in pquantity char(25) default '1',in pTitle char(100) default
null)
result(pResult char(250))
begin
  declare swebusername char(50);
  declare sid char(20);
  declare cnt integer;
  declare ddate date;
  declare tfrom time;
  declare tto time;
  declare ibreak integer;
  declare CanAuthorise smallint;
  declare local temporary table IDs(
    ID char(20) null,
    ) not transactional;
  insert into IDs( ID) 
    select distinct e.companyid from iqxnetuserlink as l key join employment as e where l.iqxnetuserid = pWebUserID;
  if not pvacancyid = any(select v.vacancyid from vacancy as v key join employment as e join IDs on e.companyid = IDs.ID) then
    select '99:~Permission denied';
    return
  end if;
  if IQXNetHasPermission(pWebUserID,'ORDERJOBS') = 0 then
    select '99:~Permission denied';
    return
  end if;
  set swebusername=(select name from iqxnetuser where iqxnetuserid = pwebuserid);
  set cnt=iqxnetstringtointeger(pquantity);
  if cnt is null or cnt = 0 then
    select '450:~Invalid quantity';
    return
  end if;
  set ddate=iqxnetstringtodate(pshiftdate);
  if ddate is null then
    select '500:~Invalid shift date';
    return
  end if;
  set tfrom=iqxnetstringtotime(ptimefrom);
  if tfrom is null then
    select '500:~Invalid start time';
    return
  end if;
  set tto=iqxnetstringtotime(ptimeto);
  if tto is null then
    select '500:~Invalid end time';
    return
  end if;
  set ibreak=isnull(iqxnetstringtointeger(pbreak),0);
  set CanAuthorise=IQXNetHasPermission(pWebUserID,'AUTHORISEJOBS');
  while cnt > 0 loop
    set sid=uniquekey(cnt);
    insert into tempshiftplan( TempShiftPlanID,VacancyID,TimeFrom,TimeTo,BreakMinutes,ShiftDate,Moveable,Description,ClientNote,EssentialSkill,EssentialSkillChoiceList,EssentialSkillGradeID,ReferenceCode,ReferenceRequired,ClientMustConfirm,TempMustConfirm,OrderedBy,TempShiftTypeID,AnalysisCode,RecoveryHours) 
      select sid,pvacancyid,tfrom,tto,ibreak,ddate,Moveable,pDescription,pNote,string(taglocation,';',tagid,';',tagchoiceid,';',gradetagid),replace(pskills,"char"(9),';'),pgrade,ucase(pTheirRef),ReferenceRequired,ClientMustConfirm,TempMustConfirm,sWebUserName,TempShiftTypeID,AnalysisCode,RecoveryHours
        from tempshifttemplate where tempshifttemplateid = pshifttemplateid;
    call NetSetShiftPlanCascade(sid);
    if CanAuthorise = 0 then
      insert into tempshift( tempshiftid,vacancyid,shiftdate,timefrom,timeto,state,tempshiftplanid,cancelreason) 
        values( sid,pvacancyid,ddate,tfrom,tto,'C',sid,'~') 
    end if;
    set cnt=cnt-1
  end loop;
  if CanAuthorise = 1 then
    call IQXNetPopup(pWebUserID,null,null,pvacancyid,null,null,null,'New shift requirement(s) added',null)
  end if;
  select '0:~Success'
end]]>
  </SQLExec>
  <SQLExec ignoreerror="YES">
<![CDATA[grant execute on pears.NetClientAddShifts to IQXNet]]>
  </SQLExec>
  <SQLExec ignoreerror="YES">
<![CDATA[drop procedure pears.NetClientAddShiftsMultiDay]]>
  </SQLExec>
  <SQLExec parameters="NO" xProcName="NetClientAddShiftsMultiDay">
<![CDATA[create procedure pears.NetClientAddShiftsMultiDay(in pWebUserID char(20),in pvacancyid char(20),in pTheirRef char(50) default
null,in pOrderReason char(50) default null,in p1Date char(25) default
null,in p1 char(20) default null,in p1From char(25) default null,in p1To char(25) default null,in p1Brk char(20) default null,in p1Qty char(20) default null,in p1Note char(50) default null,in p2Date char(25) default
null,in p2 char(20) default null,in p2From char(25) default null,in p2To char(25) default null,in p2Brk char(20) default null,in p2Qty char(20) default null,in p2Note char(50) default null,in p3Date char(25) default
null,in p3 char(20) default null,in p3From char(25) default null,in p3To char(25) default null,in p3Brk char(20) default null,in p3Qty char(20) default null,in p3Note char(50) default null,in p4Date char(25) default
null,in p4 char(20) default null,in p4From char(25) default null,in p4To char(25) default null,in p4Brk char(20) default null,in p4Qty char(20) default null,in p4Note char(50) default null,in p5Date char(25) default
null,in p5 char(20) default null,in p5From char(25) default null,in p5To char(25) default null,in p5Brk char(20) default null,in p5Qty char(20) default null,in p5Note char(50) default null,in p6Date char(25) default
null,in p6 char(20) default null,in p6From char(25) default null,in p6To char(25) default null,in p6Brk char(20) default null,in p6Qty char(20) default null,in p6Note char(50) default null,in p7Date char(25) default
null,in p7 char(20) default null,in p7From char(25) default null,in p7To char(25) default null,in p7Brk char(20) default null,in p7Qty char(20) default null,in p7Note char(50) default null,in p8Date char(25) default
null,in p8 char(20) default null,in p8From char(25) default null,in p8To char(25) default null,in p8Brk char(20) default null,in p8Qty char(20) default null,in p8Note char(50) default null,in p9Date char(25) default
null,in p9 char(20) default null,in p9From char(25) default null,in p9To char(25) default null,in p9Brk char(20) default null,in p9Qty char(20) default null,in p9Note char(50) default null,in p10Date char(25) default
null,in p10 char(20) default null,in p10From char(25) default null,in p10To char(25) default null,in p10Brk char(20) default null,in p10Qty char(20) default null,in p10Note char(50) default null)
result(pResult char(250))
begin
  declare swebusername char(50);
  declare CanAuthorise smallint;
  declare thelog long varchar;
  declare local temporary table IDs(
    ID char(20) null,
    ) not transactional;
  insert into IDs( ID) 
    select distinct e.companyid from iqxnetuserlink as l key join employment as e where l.iqxnetuserid = pWebUserID;
  if not pvacancyid = any(select v.vacancyid from vacancy as v key join employment as e join IDs on e.companyid = IDs.ID) then
    select '99:~Permission denied';
    return
  end if;
  if IQXNetHasPermission(pWebUserID,'ORDERJOBS') = 0 then
    select '99:~Permission denied';
    return
  end if;
  set swebusername=(select name from iqxnetuser where iqxnetuserid = pwebuserid);
  set CanAuthorise=IQXNetHasPermission(pWebUserID,'AUTHORISEJOBS');
  call NetClientAddShiftsOneDay(pdate = iqxnetstringtodate(p1date),pshifttemplateid = p1,ptimefrom = p1from,ptimeto = p1to,pbreak = p1brk,pnote = p1note,pqty = p1qty,pwebuserid = pwebuserid,pvacancyid = pvacancyid,pcanauthorise = canauthorise,ptheirref = ptheirref,porderreason = porderreason,pwebusername = swebusername,plog = thelog);
  call NetClientAddShiftsOneDay(pdate = iqxnetstringtodate(p2date),pshifttemplateid = p2,ptimefrom = p2from,ptimeto = p2to,pbreak = p2brk,pnote = p2note,pqty = p2qty,pwebuserid = pwebuserid,pvacancyid = pvacancyid,pcanauthorise = canauthorise,ptheirref = ptheirref,porderreason = porderreason,pwebusername = swebusername,plog = thelog);
  call NetClientAddShiftsOneDay(pdate = iqxnetstringtodate(p3date),pshifttemplateid = p3,ptimefrom = p3from,ptimeto = p3to,pbreak = p3brk,pnote = p3note,pqty = p3qty,pwebuserid = pwebuserid,pvacancyid = pvacancyid,pcanauthorise = canauthorise,ptheirref = ptheirref,porderreason = porderreason,pwebusername = swebusername,plog = thelog);
  call NetClientAddShiftsOneDay(pdate = iqxnetstringtodate(p4date),pshifttemplateid = p4,ptimefrom = p4from,ptimeto = p4to,pbreak = p4brk,pnote = p4note,pqty = p4qty,pwebuserid = pwebuserid,pvacancyid = pvacancyid,pcanauthorise = canauthorise,ptheirref = ptheirref,porderreason = porderreason,pwebusername = swebusername,plog = thelog);
  call NetClientAddShiftsOneDay(pdate = iqxnetstringtodate(p5date),pshifttemplateid = p5,ptimefrom = p5from,ptimeto = p5to,pbreak = p5brk,pnote = p5note,pqty = p5qty,pwebuserid = pwebuserid,pvacancyid = pvacancyid,pcanauthorise = canauthorise,ptheirref = ptheirref,porderreason = porderreason,pwebusername = swebusername,plog = thelog);
  call NetClientAddShiftsOneDay(pdate = iqxnetstringtodate(p6date),pshifttemplateid = p6,ptimefrom = p6from,ptimeto = p6to,pbreak = p6brk,pnote = p6note,pqty = p6qty,pwebuserid = pwebuserid,pvacancyid = pvacancyid,pcanauthorise = canauthorise,ptheirref = ptheirref,porderreason = porderreason,pwebusername = swebusername,plog = thelog);
  call NetClientAddShiftsOneDay(pdate = iqxnetstringtodate(p7date),pshifttemplateid = p7,ptimefrom = p7from,ptimeto = p7to,pbreak = p7brk,pnote = p7note,pqty = p7qty,pwebuserid = pwebuserid,pvacancyid = pvacancyid,pcanauthorise = canauthorise,ptheirref = ptheirref,porderreason = porderreason,pwebusername = swebusername,plog = thelog);
  call NetClientAddShiftsOneDay(pdate = iqxnetstringtodate(p8date),pshifttemplateid = p8,ptimefrom = p8from,ptimeto = p8to,pbreak = p8brk,pnote = p8note,pqty = p8qty,pwebuserid = pwebuserid,pvacancyid = pvacancyid,pcanauthorise = canauthorise,ptheirref = ptheirref,porderreason = porderreason,pwebusername = swebusername,plog = thelog);
  call NetClientAddShiftsOneDay(pdate = iqxnetstringtodate(p9date),pshifttemplateid = p9,ptimefrom = p9from,ptimeto = p9to,pbreak = p9brk,pnote = p9note,pqty = p9qty,pwebuserid = pwebuserid,pvacancyid = pvacancyid,pcanauthorise = canauthorise,ptheirref = ptheirref,porderreason = porderreason,pwebusername = swebusername,plog = thelog);
  call NetClientAddShiftsOneDay(pdate = iqxnetstringtodate(p10date),pshifttemplateid = p10,ptimefrom = p10from,ptimeto = p10to,pbreak = p10brk,pnote = p10note,pqty = p10qty,pwebuserid = pwebuserid,pvacancyid = pvacancyid,pcanauthorise = canauthorise,ptheirref = ptheirref,porderreason = porderreason,pwebusername = swebusername,plog = thelog);
  if CanAuthorise = 1 then
    call IQXNetPopup(pWebUserID,null,null,pvacancyid,null,null,null,'New shift requirement(s) added',thelog)
  end if;
  select '0:~Success'
end]]>
  </SQLExec>
  <SQLExec ignoreerror="YES">
<![CDATA[grant execute on pears.NetClientAddShiftsMultiDay to IQXNet]]>
  </SQLExec>
  <SQLExec ignoreerror="YES">
<![CDATA[drop procedure pears.NetClientAddShiftsMultiWeek]]>
  </SQLExec>
  <SQLExec parameters="NO" xProcName="NetClientAddShiftsMultiWeek">
<![CDATA[create procedure pears.NetClientAddShiftsMultiWeek(in pWebUserID char(20),in pvacancyid char(20),in pstartdate char(25),in pExtraWeeks char(20) default
null,in pTheirRef char(50) default null,in pOrderReason char(50) default null,in pMonday char(20),in pMondayFrom char(25) default
null,in pMondayTo char(25) default null,in pMondayBrk char(20) default null,in pMondayQty char(20) default null,in pMondayNote char(50) default null,in pTuesday char(20),in pTuesdayFrom char(25) default
null,in pTuesdayTo char(25) default null,in pTuesdayBrk char(20) default null,in pTuesdayQty char(20) default null,in pTuesdayNote char(50) default null,in pWednesday char(20),in pWednesdayFrom char(25) default
null,in pWednesdayTo char(25) default null,in pWednesdayBrk char(20) default null,in pWednesdayQty char(20) default null,in pWednesdayNote char(50) default null,in pThursday char(20),in pThursdayFrom char(25) default
null,in pThursdayTo char(25) default null,in pThursdayBrk char(20) default null,in pThursdayQty char(20) default null,in pThursdayNote char(50) default null,in pFriday char(20),in pFridayFrom char(25) default
null,in pFridayTo char(25) default null,in pFridayBrk char(20) default null,in pFridayQty char(20) default null,in pFridayNote char(50) default null,in pSaturday char(20),in pSaturdayFrom char(25) default
null,in pSaturdayTo char(25) default null,in pSaturdayBrk char(20) default null,in pSaturdayQty char(20) default null,in pSaturdayNote char(50) default null,in pSunday char(20),in pSundayFrom char(25) default
null,in pSundayTo char(25) default null,in pSundayBrk char(20) default null,in pSundayQty char(20) default null,in pSundayNote char(50) default null)
result(pResult char(250))
begin
  declare swebusername char(50);
  declare ddate date;
  declare dstart date;
  declare dend date;
  declare idow integer;
  declare CanAuthorise smallint;
  declare thelog long varchar;
  declare local temporary table IDs(
    ID char(20) null,
    ) not transactional;
  insert into IDs( ID) 
    select distinct e.companyid from iqxnetuserlink as l key join employment as e where l.iqxnetuserid = pWebUserID;
  if not pvacancyid = any(select v.vacancyid from vacancy as v key join employment as e join IDs on e.companyid = IDs.ID) then
    select '99:~Permission denied';
    return
  end if;
  if IQXNetHasPermission(pWebUserID,'ORDERJOBS') = 0 then
    select '99:~Permission denied';
    return
  end if;
  set swebusername=(select name from iqxnetuser where iqxnetuserid = pwebuserid);
  set dstart=iqxnetstringtodate(pstartdate);
  if dstart is null then
    select '500:~Invalid start date';
    return
  end if;
  set CanAuthorise=IQXNetHasPermission(pWebUserID,'AUTHORISEJOBS');
  set ddate=dstart;
  set dend=dateadd(day,6+(7*isnull(iqxnetstringtointeger(pextraweeks),0)),dstart);
  while ddate <= dend loop
    set idow=dow(ddate);
    case idow
    when 1 then call NetClientAddShiftsOneDay(pshifttemplateid = psunday,ptimefrom = psundayfrom,ptimeto = psundayto,pbreak = psundaybrk,pnote = psundaynote,pqty = psundayqty,pwebuserid = pwebuserid,pvacancyid = pvacancyid,pcanauthorise = canauthorise,pdate = ddate,ptheirref = ptheirref,porderreason = porderreason,pwebusername = swebusername,plog = thelog)
    when 2 then call NetClientAddShiftsOneDay(pshifttemplateid = pmonday,ptimefrom = pmondayfrom,ptimeto = pmondayto,pbreak = pmondaybrk,pnote = pmondaynote,pqty = pmondayqty,pwebuserid = pwebuserid,pvacancyid = pvacancyid,pcanauthorise = canauthorise,pdate = ddate,ptheirref = ptheirref,porderreason = porderreason,pwebusername = swebusername,plog = thelog)
    when 3 then call NetClientAddShiftsOneDay(pshifttemplateid = ptuesday,ptimefrom = ptuesdayfrom,ptimeto = ptuesdayto,pbreak = ptuesdaybrk,pnote = ptuesdaynote,pqty = ptuesdayqty,pwebuserid = pwebuserid,pvacancyid = pvacancyid,pcanauthorise = canauthorise,pdate = ddate,ptheirref = ptheirref,porderreason = porderreason,pwebusername = swebusername,plog = thelog)
    when 4 then call NetClientAddShiftsOneDay(pshifttemplateid = pwednesday,ptimefrom = pwednesdayfrom,ptimeto = pwednesdayto,pbreak = pwednesdaybrk,pnote = pwednesdaynote,pqty = pwednesdayqty,pwebuserid = pwebuserid,pvacancyid = pvacancyid,pcanauthorise = canauthorise,pdate = ddate,ptheirref = ptheirref,porderreason = porderreason,pwebusername = swebusername,plog = thelog)
    when 5 then call NetClientAddShiftsOneDay(pshifttemplateid = pthursday,ptimefrom = pthursdayfrom,ptimeto = pthursdayto,pbreak = pthursdaybrk,pnote = pthursdaynote,pqty = pthursdayqty,pwebuserid = pwebuserid,pvacancyid = pvacancyid,pcanauthorise = canauthorise,pdate = ddate,ptheirref = ptheirref,porderreason = porderreason,pwebusername = swebusername,plog = thelog)
    when 6 then call NetClientAddShiftsOneDay(pshifttemplateid = pfriday,ptimefrom = pfridayfrom,ptimeto = pfridayto,pbreak = pfridaybrk,pnote = pfridaynote,pqty = pfridayqty,pwebuserid = pwebuserid,pvacancyid = pvacancyid,pcanauthorise = canauthorise,pdate = ddate,ptheirref = ptheirref,porderreason = porderreason,pwebusername = swebusername,plog = thelog)
    when 7 then call NetClientAddShiftsOneDay(pshifttemplateid = psaturday,ptimefrom = psaturdayfrom,ptimeto = psaturdayto,pbreak = psaturdaybrk,pnote = psaturdaynote,pqty = psaturdayqty,pwebuserid = pwebuserid,pvacancyid = pvacancyid,pcanauthorise = canauthorise,pdate = ddate,ptheirref = ptheirref,porderreason = porderreason,pwebusername = swebusername,plog = thelog)
    end case;
    set ddate=dateadd(day,1,ddate)
  end loop;
  if CanAuthorise = 1 then
    call IQXNetPopup(pWebUserID,null,null,pvacancyid,null,null,null,'New shift requirement(s) added',thelog)
  end if;
  select '0:~Success'
end]]>
  </SQLExec>
  <SQLExec ignoreerror="YES">
<![CDATA[grant execute on pears.NetClientAddShiftsMultiWeek to IQXNet]]>
  </SQLExec>
  <SQLExec ignoreerror="YES">
<![CDATA[drop procedure pears.NetClientAddShiftsOneDay]]>
  </SQLExec>
  <SQLExec parameters="NO" xProcName="NetClientAddShiftsOneDay">
<![CDATA[create procedure pears.NetClientAddShiftsOneDay(in pWebUserID char(20),in pvacancyid char(20),in pshifttemplateid char(20),in pdate date,in ptimefrom char(25) default
null,in ptimeto char(25) default null,in pBreak char(20) default null,in pTheirRef char(50) default null,in pNote char(50) default null,in pQty char(20) default null,in pOrderReason char(50) default
null,in pSkills char(100) default null,in pGrade char(50) default null,in pWebUserName char(50) default null,in pCanAuthorise smallint default 0,inout pLog long varchar)
begin
  declare sid char(20);
  declare cnt integer;
  declare i integer;
  declare tfrom time;
  declare tto time;
  declare ibreak integer;
  declare slog char(200);
  if pdate is null then
    return
  end if;
  set i=charindex('|',pshifttemplateid);
  if i > 0 then // Get rid of any extra info tacked onto the code
    set pshifttemplateid="left"(pshifttemplateid,i-1)
  end if;
  if trim(isnull(pshifttemplateid,'')) = '' then
    return
  end if;
  set cnt=isnull(iqxnetstringtointeger(pqty),0);
  if cnt <= 0 then
    return
  end if;
  set tfrom=iqxnetstringtotime(ptimefrom);
  set tto=iqxnetstringtotime(ptimeto);
  set ibreak=iqxnetstringtointeger(pbreak); // If times and break not supplied they will come from the template
  set slog=(select string(dateformat(pdate,'dd/mm/yyyy'),' ',dateformat(isnull(tfrom,timefrom),'hh:nn'),'-',dateformat(isnull(tto,timeto),'hh:nn'),' ',description,' Qty: ',cnt)
      from tempshifttemplate where tempshifttemplateid = pshifttemplateid);
  if trim(isnull(pnote,'')) <> '' then
    set slog=string(slog,' Note: ',pnote)
  end if;
  while cnt > 0 loop
    set sid=uniquekey(cnt);
    insert into tempshiftplan( TempShiftPlanID,VacancyID,TimeFrom,TimeTo,BreakMinutes,ShiftDate,Moveable,Description,ClientNote,EssentialSkill,EssentialSkillChoiceList,EssentialSkillGradeID,ReferenceCode,ReferenceRequired,ClientMustConfirm,TempMustConfirm,OrderedBy,TempShiftTypeID,AnalysisCode,RecoveryHours,TempShiftOrderReasonID) 
      select sid,pvacancyid,isnull(tfrom,timefrom),isnull(tto,timeto),isnull(ibreak,breakminutes),pdate,Moveable,Description,pNote,string(taglocation,';',tagid,';',tagchoiceid,';',gradetagid),replace(pskills,"char"(9),';'),pgrade,ucase(pTheirRef),ReferenceRequired,ClientMustConfirm,TempMustConfirm,pWebUserName,TempShiftTypeID,AnalysisCode,RecoveryHours,nullif(pOrderReason,'')
        from tempshifttemplate where tempshifttemplateid = pshifttemplateid;
    call NetSetShiftPlanCascade(sid);
    if pCanAuthorise = 0 then
      insert into tempshift( tempshiftid,vacancyid,shiftdate,timefrom,timeto,breakminutes,state,tempshiftplanid,cancelreason) 
        select sid,pvacancyid,pdate,isnull(tfrom,timefrom),isnull(tto,timeto),isnull(ibreak,breakminutes),'C',sid,'~'
          from tempshifttemplate where tempshifttemplateid = pshifttemplateid
    end if;
    set cnt=cnt-1
  end loop;
  set pLog=string(pLog,slog,"char"(13),"char"(10))
end]]>
  </SQLExec>
  <SQLExec ignoreerror="YES">
<![CDATA[grant execute on pears.NetClientAddShiftsOneDay to IQXNet]]>
  </SQLExec>
  <SQLExec ignoreerror="YES">
<![CDATA[drop procedure pears.NetClientAddShiftsWeek]]>
  </SQLExec>
  <SQLExec parameters="NO" xProcName="NetClientAddShiftsWeek">
<![CDATA[create procedure pears.NetClientAddShiftsWeek(in pWebUserID char(20),in pvacancyid char(20),in pshifttemplateid char(20),in pstartdate char(25),in penddate char(25) default '',in ptimefrom char(25) default
null,in ptimeto char(25) default null,in pBreak char(20) default null,in pTheirRef char(50) default null,in pDescription long varchar default
null,in pSkills char(100) default null,in pGrade char(50) default null,in pNote char(50) default null,in pTitle char(100) default
null,in pMonday char(10) default null,in pTuesday char(10) default null,in pWednesday char(10) default null,in pThursday char(10) default null,in pFriday char(10) default
null,in pSaturday char(10) default null,in pSunday char(10) default null,in pOrderReason char(50) default
null)
result(pResult char(250))
begin
  declare swebusername char(50);
  declare sid char(20);
  declare cnt integer;
  declare idow integer;
  declare ddate date;
  declare dstart date;
  declare dend date;
  declare tfrom time;
  declare tto time;
  declare ibreak integer;
  declare CanAuthorise smallint;
  declare local temporary table IDs(
    ID char(20) null,
    ) not transactional;
  insert into IDs( ID) 
    select distinct e.companyid from iqxnetuserlink as l key join employment as e where l.iqxnetuserid = pWebUserID;
  if not pvacancyid = any(select v.vacancyid from vacancy as v key join employment as e join IDs on e.companyid = IDs.ID) then
    select '99:~Permission denied';
    return
  end if;
  if IQXNetHasPermission(pWebUserID,'ORDERJOBS') = 0 then
    select '99:~Permission denied';
    return
  end if;
  set swebusername=(select name from iqxnetuser where iqxnetuserid = pwebuserid);
  set dstart=iqxnetstringtodate(pstartdate);
  if dstart is null then
    select '500:~Invalid start date';
    return
  end if;
  set dend=iqxnetstringtodate(penddate);
  if dend is null then
    set dend=dstart+6
  end if;
  set tfrom=iqxnetstringtotime(ptimefrom);
  if tfrom is null then
    select '500:~Invalid start time';
    return
  end if;
  set tto=iqxnetstringtotime(ptimeto);
  if tto is null then
    select '500:~Invalid end time';
    return
  end if;
  set ibreak=isnull(iqxnetstringtointeger(pbreak),0);
  set CanAuthorise=IQXNetHasPermission(pWebUserID,'AUTHORISEJOBS');
  set ddate=dstart;
  while ddate <= dend loop
    set idow=dow(ddate);
    case idow
    when 1 then set cnt=isnull(iqxnetstringtointeger(psunday),0)
    when 2 then set cnt=isnull(iqxnetstringtointeger(pmonday),0)
    when 3 then set cnt=isnull(iqxnetstringtointeger(ptuesday),0)
    when 4 then set cnt=isnull(iqxnetstringtointeger(pwednesday),0)
    when 5 then set cnt=isnull(iqxnetstringtointeger(pthursday),0)
    when 6 then set cnt=isnull(iqxnetstringtointeger(pfriday),0)
    when 7 then set cnt=isnull(iqxnetstringtointeger(psaturday),0)
    end case;
    while cnt > 0 loop
      set sid=uniquekey(cnt);
      insert into tempshiftplan( TempShiftPlanID,VacancyID,TimeFrom,TimeTo,BreakMinutes,ShiftDate,Moveable,Description,ClientNote,EssentialSkill,EssentialSkillChoiceList,EssentialSkillGradeID,ReferenceCode,ReferenceRequired,ClientMustConfirm,TempMustConfirm,OrderedBy,TempShiftTypeID,AnalysisCode,RecoveryHours,TempShiftOrderReasonID) 
        select sid,pvacancyid,tfrom,tto,ibreak,ddate,Moveable,pDescription,pNote,string(taglocation,';',tagid,';',tagchoiceid,';',gradetagid),replace(pskills,"char"(9),';'),pgrade,ucase(pTheirRef),ReferenceRequired,ClientMustConfirm,TempMustConfirm,sWebUserName,TempShiftTypeID,AnalysisCode,RecoveryHours,nullif(pOrderReason,'')
          from tempshifttemplate where tempshifttemplateid = pshifttemplateid;
      call NetSetShiftPlanCascade(sid);
      if CanAuthorise = 0 then
        insert into tempshift( tempshiftid,vacancyid,shiftdate,timefrom,timeto,state,tempshiftplanid,cancelreason) 
          values( sid,pvacancyid,ddate,tfrom,tto,'C',sid,'~') 
      end if;
      set cnt=cnt-1
    end loop;
    set ddate=dateadd(day,1,ddate)
  end loop;
  if CanAuthorise = 1 then
    call IQXNetPopup(pWebUserID,null,null,pvacancyid,null,null,null,'New shift requirement(s) added',null)
  end if;
  select '0:~Success'
end]]>
  </SQLExec>
  <SQLExec ignoreerror="YES">
<![CDATA[grant execute on pears.NetClientAddShiftsWeek to IQXNet]]>
  </SQLExec>
  <SQLExec ignoreerror="YES">
<![CDATA[drop procedure pears.NetClientAddVacancies]]>
  </SQLExec>
  <SQLExec parameters="NO" xProcName="NetClientAddVacancies">
<![CDATA[create procedure pears.NetClientAddVacancies(in pWebUserID char(20),in ptemplatevacancyid char(50),in pdatefrom char(25),in pdateto char(25) default
null,in pTheirRef char(50) default null,in pTitle char(100) default null,in pDescription long varchar default null,in pquantity char(25) default '1')
result(pResult char(250))
begin
  declare swebusername char(50);
  declare sid char(20);
  declare cnt integer;
  declare dfrom date;
  declare dto date;
  declare CanAuthorise smallint;
  declare NewVacancyState char(1);
  declare local temporary table IDs(
    ID char(20) null,
    ) not transactional;
  insert into IDs( ID) 
    select companyid from employment key join iqxnetuserlink where iqxnetuserid = pWebUserID;
  if not ptemplatevacancyid = any(select v.vacancyid from vacancy as v key join employment as e join IDs on e.companyid = IDs.ID) then
    select '99:~Permission denied';
    return
  end if;
  if IQXNetHasPermission(pWebUserID,'ORDERJOBS') = 0 then
    select '99:~Permission denied';
    return
  end if;
  set swebusername=(select name from iqxnetuser where iqxnetuserid = pwebuserid);
  set cnt=iqxnetstringtointeger(pquantity);
  if cnt is null or cnt = 0 then
    select '450:~Invalid quantity';
    return
  end if;
  set dfrom=iqxnetstringtodate(pdatefrom);
  if dfrom is null then
    select '500:~Invalid start date';
    return
  end if;
  set pdateto=nullif(trim(pdateto),'');
  set dto=iqxnetstringtodate(pdateto);
  if pdateto is not null and dto is null then
    select '500:~Invalid end date';
    return
  end if;
  set CanAuthorise=IQXNetHasPermission(pWebUserID,'AUTHORISEJOBS');
  if CanAuthorise = 1 then
    set NewVacancyState='C'
  else
    set NewVacancyState=']'
  end if;
  while cnt > 0 loop
    set sid=uniquekey(cnt);
    insert into vacancy( vacancyid,departmentid,employmentid,staffid,entrydate,status,startdate,FinishDate,temp,position,notes,othernotes,classcode,ErNI,HolidayAllowance,Discount,
      TempDeskID,PayrollIdentifier,AnalysisCode,clientdepartment,Currency,RecipientID,Role,SiteName,SiteContact,addr1,addr2,addr3,town,county,country,postcode,TempJobTypeID,
      SitePhoneNumbers,Invaddr1,Invaddr2,Invaddr3,Invtown,Invcounty,Invcountry,Invpostcode,SiteFax,SiteEmail,TheirRef,
      PriceListID,SendShiftsToPayroll,WorkMonday,WorkTuesday,WorkWednesday,WorkThursday,WorkFriday,WorkSaturday,WorkSunday,WorkNormalHours,WorkStartTime,noofposts) 
      select sid,departmentid,employmentid,staffid,current date,NewVacancyState,dfrom,dto,temp,isnull(pTitle,position),notes,isnull(pDescription,othernotes),classcode,ErNI,HolidayAllowance,Discount,
        TempDeskID,PayrollIdentifier,AnalysisCode,clientdepartment,Currency,RecipientID,Role,SiteName,SiteContact,addr1,addr2,addr3,town,county,country,postcode,TempJobTypeID,
        SitePhoneNumbers,Invaddr1,Invaddr2,Invaddr3,Invtown,Invcounty,Invcountry,Invpostcode,SiteFax,SiteEmail,ucase(pTheirRef),
        PriceListID,SendShiftsToPayroll,WorkMonday,WorkTuesday,WorkWednesday,WorkThursday,WorkFriday,WorkSaturday,WorkSunday,WorkNormalHours,WorkStartTime,1
        from vacancy where vacancyid = ptemplatevacancyid;
    insert into tempjobrate( TempJobRateID,VacancyID,TempPayBandID,PayRate,ChargeRate,StartDate,EndDate,Grade) 
      select uniquekey(TempJobRateID),sid,TempPayBandID,PayRate,ChargeRate,StartDate,EndDate,Grade
        from tempjobrate where vacancyid = ptemplatevacancyid;
    insert into criterion( searchlocation,id,critid,sourcelocation,dictionaryid,tagid,tagchoiceid,notflag,matchtype,textvalue,value,uppervalue,taganytotal,extravalue,extrauppervalue,extramatchtype) 
      select searchlocation,sid,critid,sourcelocation,dictionaryid,tagid,tagchoiceid,notflag,matchtype,textvalue,value,uppervalue,taganytotal,extravalue,extrauppervalue,extramatchtype
        from criterion where searchlocation like 'V%' and id = ptemplatevacancyid;
    call NetSetVacancyCascade(sid);
    set cnt=cnt-1
  end loop;
  if CanAuthorise = 1 then
    call IQXNetPopup(pWebUserID,null,null,sid,null,null,null,'New vacancy requirement(s) added',null)
  end if;
  select '0:~Success'
end]]>
  </SQLExec>
  <SQLExec ignoreerror="YES">
<![CDATA[grant execute on pears.NetClientAddVacancies to IQXNet]]>
  </SQLExec>
  <SQLExec ignoreerror="YES">
<![CDATA[drop procedure pears.NetClientContact]]>
  </SQLExec>
  <SQLExec parameters="NO" xProcName="NetClientContact">
<![CDATA[create procedure pears.NetClientContact(in pWebUserID char(20))
result(employmentid char(20),directphone char(250),mobile char(250),email char(250),directfax char(250),position char(100),department char(100))
begin
  select first employment.employmentid,
    getphone('CP','Direct Telephone',employment.employmentid),
    getphone('CP','Mobile',employment.employmentid),
    getphone('CP','E-mail',employment.employmentid),
    getphone('CP','Direct Fax',employment.employmentid),
    employment.position,
    employment.department
    from employment key join iqxnetuserlink
    where iqxnetuserlink.iqxnetuserid = pWebUserID
end]]>
  </SQLExec>
  <SQLExec ignoreerror="YES">
<![CDATA[grant execute on pears.NetClientContact to IQXNet]]>
  </SQLExec>
  <SQLExec ignoreerror="YES">
<![CDATA[drop procedure pears.NetClientContactSet]]>
  </SQLExec>
  <SQLExec parameters="NO" xProcName="NetClientContactSet">
<![CDATA[create procedure pears.NetClientContactSet(in pWebUserID char(20),in pemploymentid char(20),in pdirectphone char(250) default 'NOT_SET',in pmobile char(250) default 'NOT_SET',in pemail char(250) default 'NOT_SET',in pdirectfax char(250) default 'NOT_SET',in pposition char(250) default 'NOT_SET',in pdepartment char(250) default 'NOT_SET',in pOLDdirectphone char(250) default 'NOT_SET',in pOLDmobile char(250) default 'NOT_SET',in pOLDemail char(250) default 'NOT_SET',in pOLDdirectfax char(250) default 'NOT_SET',in pOLDposition char(250) default 'NOT_SET',in pOLDdepartment char(250) default 'NOT_SET')
result(pResult char(250))
begin
  declare cid char(20);
  declare ssql char(250);
  declare scomma char(1);
  if not pemploymentid = any(select employmentid from iqxnetuserlink where iqxnetuserid = pwebuserid) then
    select '99:~Permission denied';
    return
  end if;
  if isnull(pdirectphone,'') <> isnull(pOLDdirectphone,'') then
    call IQXNetSetPhones(pWebUserID,'CP','Direct Telephone',pdirectphone)
  end if;
  if isnull(pmobile,'') <> isnull(pOLDmobile,'') then
    call IQXNetSetPhones(pWebUserID,'CP','Mobile',pmobile)
  end if;
  if isnull(pemail,'') <> isnull(pOLDemail,'') then
    call IQXNetSetPhones(pWebUserID,'CP','E-mail',pemail);
    update iqxnetuserlink key join iqxnetuser set iqxnetuser.emailaddress = pemail where iqxnetuserlink.employmentid = pemploymentid
  end if;
  if isnull(pdirectfax,'') <> isnull(pOLDdirectfax,'') then
    call IQXNetSetPhones(pWebUserID,'CP','Direct Fax',pdirectfax)
  end if;
  set ssql='';
  set scomma='';
  if isnull(pposition,'') <> isnull(pOLDposition,'') then
    set ssql=string(ssql,scomma,'position=pposition');
    set scomma=','
  end if;
  if isnull(pdepartment,'') <> isnull(pOLDdepartment,'') then
    set ssql=string(ssql,scomma,'department=pdepartment');
    set scomma=','
  end if;
  if ssql <> '' then
    execute immediate string('update employment set ',ssql,' where employmentid in (select employmentid from iqxnetuserlink where iqxnetuserid=''',pWebUserID,''')')
  end if;
  select '0:~Success'
end]]>
  </SQLExec>
  <SQLExec ignoreerror="YES">
<![CDATA[grant execute on pears.NetClientContactSet to IQXNet]]>
  </SQLExec>
  <SQLExec ignoreerror="YES">
<![CDATA[drop procedure pears.NetClientContractVacancyDetails]]>
  </SQLExec>
  <SQLExec parameters="NO" xProcName="NetClientContractVacancyDetails">
<![CDATA[create procedure pears.NetClientContractVacancyDetails(in pWebUserID char(20),in pvacancyid char(20))
result(Title char(100),Description long varchar)
begin
  select position,othernotes from vacancy where vacancyid = pvacancyid
end]]>
  </SQLExec>
  <SQLExec ignoreerror="YES">
<![CDATA[grant execute on pears.NetClientContractVacancyDetails to IQXNet]]>
  </SQLExec>
  <SQLExec ignoreerror="YES">
<![CDATA[drop procedure pears.NetClientDatedPreviousEmployees]]>
  </SQLExec>
  <SQLExec parameters="NO" xProcName="NetClientDatedPreviousEmployees">
<![CDATA[create procedure pears.NetClientDatedPreviousEmployees(in pWebUserID char(20))
result(Name char(100),PersonID char(20),KeyName char(100),FirstDate date,LatestDate date)
begin
  declare local temporary table Cos(
    CompanyID char(20) null,
    ) not transactional;
  declare local temporary table Pes(
    PersonID char(20) null,
    FirstDate date null,
    LatestDate date null,
    ) not transactional;insert into Cos( CompanyID) 
    select distinct companyid from employment key join iqxnetuserlink where iqxnetuserid = pWebUserID;
  -- Get all the People who have worked in the period for those Companies
  insert into Pes( PersonID) 
    select distinct e.personid
      from employment as e key join placement
      ,employment as e join Cos on e.CompanyID = Cos.CompanyID
      where not e.personid = any(select personid from employment where companyid = e.companyid and noreemploy = 1)
      and e.startdate >= IQXNetCompanyStartDate(e.companyid);
  -- Add the dates
  update pes set firstdate = (select min(e.startdate) from employment as e join cos on e.companyid = cos.companyid where personid = pes.personid and e.startdate is not null);
  update pes set latestdate = (select max(isnull(e.leavedate,current date)) from employment as e join cos on e.companyid = cos.companyid where personid = pes.personid);
  -- Get the Peoples details
  select person.name,person.personid,person.keyname,pes.FirstDate,pes.LatestDate
    from person join PES on Pes.PersonID = Person.PersonID order by person.keyname asc
end]]>
  </SQLExec>
  <SQLExec ignoreerror="YES">
<![CDATA[grant execute on pears.NetClientDatedPreviousEmployees to IQXNet]]>
  </SQLExec>
  <SQLExec ignoreerror="YES">
<![CDATA[drop procedure pears.NetClientPreviousEmployeeJobs]]>
  </SQLExec>
  <SQLExec parameters="NO" xProcName="NetClientPreviousEmployeeJobs">
<![CDATA[create procedure pears.NetClientPreviousEmployeeJobs(in pWebUserID char(20),in pPersonID char(20))
result(Position char(250),StartDate date,FinishDate date)
begin
  select employment.position,employment.startdate,employment.leavedate as finishdate
    from employment where employment.personid = pPersonID and employment.startdate >= IQXNetCompanyStartDate(employment.companyid)
    and employment.companyid = any(select companyid from employment key join iqxnetuserlink where iqxnetuserid = pWebUserID) order by
    employment.startdate asc
end]]>
  </SQLExec>
  <SQLExec ignoreerror="YES">
<![CDATA[grant execute on pears.NetClientPreviousEmployeeJobs to IQXNet]]>
  </SQLExec>
  <SQLExec ignoreerror="YES">
<![CDATA[drop procedure pears.NetClientPreviousEmployees]]>
  </SQLExec>
  <SQLExec parameters="NO" xProcName="NetClientPreviousEmployees">
<![CDATA[create procedure pears.NetClientPreviousEmployees(in pWebUserID char(20))
result(Name char(100),PersonID char(20),KeyName char(100))
begin
  declare local temporary table Cos(
    CompanyID char(20) null,
    ) not transactional;
  -- Get all the Companies the WebUser is Associated with
  declare local temporary table Pes(
    PersonID char(20) null,
    ) not transactional;insert into Cos( CompanyID) 
    select companyid from employment key join iqxnetuserlink where iqxnetuserid = pWebUserID;
  -- Get all the People who have worked in the period for those Companies
  insert into Pes( PersonID) 
    select distinct e.personid
      from employment as e key join placement
      ,employment as e join Cos on e.CompanyID = Cos.CompanyID
      where not e.personid = any(select personid from employment where companyid = e.companyid and noreemploy = 1)
      and e.startdate >= IQXNetCompanyStartDate(e.companyid);
  -- Get the Peoples details
  select person.name,person.personid,person.keyname from person join PES on Pes.PersonID = Person.PersonID order by
    person.keyname asc
end]]>
  </SQLExec>
  <SQLExec ignoreerror="YES">
<![CDATA[grant execute on pears.NetClientPreviousEmployees to IQXNet]]>
  </SQLExec>
  <SQLExec ignoreerror="YES">
<![CDATA[drop procedure pears.NetClientProvTimesheets]]>
  </SQLExec>
  <SQLExec parameters="NO" xProcName="NetClientProvTimesheets">
<![CDATA[create procedure pears.NetClientProvTimesheets(in pWebUserID char(20))
result(tempprovtimesheetid char(20),serialnumber char(20),tempname char(60),position char(60),companyname char(60),companyaddress char(120),weekenddate date,timesheettype char(1),completed smallint,theirref char(100),theirrefrequired smallint)
begin
  select t.tempprovtimesheetid,t.serialnumber,string(person.surname,', ',person.forenames) as tempname,vacancy.position,
    company.name as companyname,getcompanyaddressonline(company.companyid) as companyaddress,
    NetTimesheetEndDate(1,1,t.tempprovtimesheetid) as weekenddate,
    if NetVacancyHasRateScript(t.tempjobtypeid,t.vacancyid) = 0 then 'C'
    else if tempdesk.desktype = 'S' then 'S' else if tempdesk.desktype = 'W'
    and exists(select * from placement where placementid = t.placementid and worknormalhours is not null and workstarttime is not null
      and(isnull(workmonday,0) = 1 or isnull(worktuesday,0) = 1 or isnull(workwednesday,0) = 1 or isnull(workthursday,0) = 1 or isnull(workfriday,0) = 1
      or isnull(worksaturday,0) = 1 or isnull(worksunday,0) = 1)) then 'T'
    else 'C'
    endif
    endif
    endif as timesheettype,if t.extnumber = 2 then 1 else 0
    endif as completed,isnull(t.theirref,GetPlacementTheirRef(person.personid,vacancy.vacancyid)) as theirref,
    companyaccount.theirrefrequired
    from tempprovtimesheet as t key join vacancy key join employment key join company key join employment as allemps key join iqxnetuserlink
    ,tempprovtimesheet as t key join tempdesk
    ,tempprovtimesheet as t key join person
    ,company key left outer join companyaccount
    where iqxnetuserlink.iqxnetuserid = pWebUserID and t.extnumber > 0
    and weekenddate > current date-60 order by
    weekenddate asc,t.serialnumber asc,tempname asc
end]]>
  </SQLExec>
  <SQLExec ignoreerror="YES">
<![CDATA[grant execute on pears.NetClientProvTimesheets to IQXNet]]>
  </SQLExec>
  <SQLExec ignoreerror="YES">
<![CDATA[drop procedure pears.NetClientRequirementTemplates]]>
  </SQLExec>
  <SQLExec parameters="NO" xProcName="NetClientRequirementTemplates">
<![CDATA[create procedure pears.NetClientRequirementTemplates(in pWebUserID char(20),in pType char(2),in pVacancyID char(20) default null)
result(ID char(20),ExtraInfo char(250),Descript char(100),ExtraDescrip char(250))
begin
  declare @companycount integer;
  set @companycount=(select count(*) from iqxnetuserlink where iqxnetuserid = pWebUserID);
  if pType = 'CV' then //Contract vacancy templates
    select v.VacancyID as ID,'' as ExtraInfo,
      v.Position as Descrip,
      (if @companycount > 1 then string(Company.Name,', ',GetCompanyAddressOnLine(company.companyid))
      else '' //Shift vacancies containing shift templates
      endif) as ExtraDescrip //Shifts 
      from Vacancy as v key join Employment key join Company
      where Company.CompanyID = any(select companyid from employment key join iqxnetuserlink where iqxnetuserid = pWebUserID)
      and v.temp = 1 and v.Status = '[' and isnull((select desktype from tempdesk where tempdeskid = v.tempdeskid),'') <> 'S' order by
      2 asc
  else if pType = 'SV' then
      select v.VacancyID as ID,'' as ExtraInfo,
        v.Position as Descrip,
        (if @companycount > 1 then string(Company.Name,', ',GetCompanyAddressOnLine(company.companyid))
        else ''
        endif) as ExtraDescrip from Vacancy as v key join Employment key join Company
        where Company.CompanyID = any(select companyid from employment key join iqxnetuserlink where iqxnetuserid = pWebUserID)
        and v.temp = 1 and isnull((select desktype from tempdesk where tempdeskid = v.tempdeskid),'') = 'S'
        and v.vacancyid = any(select vacancyid from TempShiftTemplateAllowed) order by
        2 asc
    else if pType = 'SS' then
        select p.TempShiftTemplateID as ID,
          string(p.timefrom,'|',p.timeto,'|',p.breakminutes,'|',p.moveable) as ExtraInfo,
          p.Description as Descrip,'' as ExtraDescrip
          from TempShiftTemplate as p key join TempShiftTemplateAllowed key join Vacancy as v key join Employment key join Company
          where v.vacancyid = pvacancyid
          and Company.CompanyID = any(select companyid from employment key join iqxnetuserlink where iqxnetuserid = pWebUserID) order by
          2 asc
      end if
    end if
  end if
end]]>
  </SQLExec>
  <SQLExec ignoreerror="YES">
<![CDATA[grant execute on pears.NetClientRequirementTemplates to IQXNet]]>
  </SQLExec>
  <SQLExec ignoreerror="YES">
<![CDATA[drop procedure pears.NetClientShiftOrderReasons]]>
  </SQLExec>
  <SQLExec parameters="NO" xProcName="NetClientShiftOrderReasons">
<![CDATA[create procedure pears.NetClientShiftOrderReasons(in pWebUserID char(20))
result(OrderReasonList long varchar)
begin
  select NetOrderReasonList(*) as OrderReasonList from dummy
end]]>
  </SQLExec>
  <SQLExec ignoreerror="YES">
<![CDATA[grant execute on pears.NetClientShiftOrderReasons to IQXNet]]>
  </SQLExec>
  <SQLExec ignoreerror="YES">
<![CDATA[drop procedure pears.NetClientShiftTemplate]]>
  </SQLExec>
  <SQLExec parameters="NO" xProcName="NetClientShiftTemplate">
<![CDATA[create procedure pears.NetClientShiftTemplate(in pWebUserID char(20),in pVacancyID char(20),in pShiftTemplateID char(20))
result(VacancyID char(20),TempShiftTemplateID char(20),Position char(50),ShiftDescription char(50),CompanyName char(60),ContactName char(30),Department char(30),TimeFrom time,TimeTo time,BreakMinutes smallint,Moveable smallint,RefRequired smallint,ChoiceList long varchar,GradeList long varchar,OrderReasonList long varchar)
begin
  select v.VacancyID,
    p.TempShiftTemplateID,
    v.Position,
    p.Description as ShiftDescription,
    Company.Name as CompanyName,
    Person.Name as ContactName,
    (select Name from Department where Department.DepartmentID = v.DepartmentID) as Department,
    p.TimeFrom,
    p.TimeTo,
    p.BreakMinutes,
    isnull(p.Moveable,0) as Moveable,
    (if p.ReferenceRequired = 'E' then 1 else 0
    endif) as RefRequired,IQXNetTemplateChoiceList(p.TempShiftTemplateID,v.DepartmentID) as ChoiceList,
    IQXNetTemplateGradeList(p.TempShiftTemplateID,v.DepartmentID) as GradeList,
    NetOrderReasonList(*) as OrderReasonList
    from TempShiftTemplate as p key join TempShiftTemplateAllowed key join Vacancy as v key join Employment key join(Company,Person)
    where Company.CompanyID = any(select companyid from employment key join iqxnetuserlink where iqxnetuserid = pWebUserID)
    and v.VacancyID = pVacancyID and p.TempShiftTemplateID = pShiftTemplateID
end]]>
  </SQLExec>
  <SQLExec ignoreerror="YES">
<![CDATA[grant execute on pears.NetClientShiftTemplate to IQXNet]]>
  </SQLExec>
  <SQLExec ignoreerror="YES">
<![CDATA[drop procedure pears.NetClientVacancies]]>
  </SQLExec>
  <SQLExec parameters="NO" xProcName="NetClientVacancies">
<![CDATA[create procedure pears.NetClientVacancies(in pWebUserID char(20),in pStartDate date default null,in pEndDate date default null)
result(RowID char(30),StartDate date,StartTime time,FinishTime time,FinishDate date,IsShift smallint,VacancyID char(20),TempShiftPlanID char(20),Position char(50),ShiftDescription char(50),CompanyName char(60),ContactName char(30),Status char(40),Department char(30),Consultant char(60),OurRef char(20),TheirRef char(50),ContractRef char(20),CascadeDateTime timestamp,CascadeLevel smallint,WhenEntered timestamp,FilledBy char(250),Filled smallint,Unconfirmed smallint,LongDescription long varchar,CompanyAddress char(250))
-- modified 20110815 to include shift date and time as well as plan date and time ref ASA
-- modified 20110823 to use temporary table for lookup to improve speed
begin
  declare @DateRangeStart date;
  declare @DateRangeEnd date;
  declare @companycount integer;
  declare local temporary table IDs(
    ID char(20) not null,
    CompanyStartDate date null,
    ) not transactional;
  insert into IDs( ID,CompanyStartDate) 
    select distinct companyid,IQXNetCompanyStartDate(companyid) from employment key join iqxnetuserlink where iqxnetuserid = pWebUserID;
  set @DateRangeStart=isnull(pStartDate,dateadd(month,-3,current date));
  set @DateRangeEnd=isnull(pEndDate,dateadd(year,1,current date));
  set @companycount=(select count(*) from iqxnetuserlink where iqxnetuserid = pWebUserID);
  select 'V'+v.VacancyID as RowID,
    v.StartDate,
    cast(null as time) as StartTime,
    cast(null as time) as FinishTime,
    v.FinishDate,
    0 as IsShift,
    v.VacancyID,
    cast(null as char(20)) as TempShiftPlanID,
    v.Position as Position,
    cast(null as char(50)) as ShiftDescription,
    Company.Name as CompanyName,
    Person.Name as ContactName,
    (select Name from Status where Status.Status = v.Status and Status.Type = 'V') as Status,
    (select Name from Department where Department.DepartmentID = v.DepartmentID) as Department,
    (select Name from Staff where Staff.StaffID = v.StaffID) as Consultant,
    v.RefCode as OurRef,
    v.TheirRef,
    v.ContractRef,
    v.CascadeDateTime,
    v.CascadeLevel,
    v.WhenEntered,
    (select list(person.name) from vacancy key join placement key join employment key join person where vacancy.vacancyid = v.vacancyid) as FilledBy,
    ifnull(nullif(FilledBy,''),0,1) as Filled,
    (if v.status = ']' then 1 else 0
    endif) as UnConfirmed,v.OtherNotes as LongDescription,
    (if @companycount > 1 then GetCompanyAddressOnLine(company.companyid)
    else ''
    endif) as CompanyAddress
    from Vacancy as v key join Employment key join(Company,Person) join IDs on Company.CompanyID = IDs.ID
    where v.StartDate <= @DateRangeEnd and isnull(v.FinishDate,@DateRangeEnd) >= @DateRangeStart and v.temp = 1
    and v.Status in( 'C','F',']') and isnull((select desktype from tempdesk where tempdeskid = v.tempdeskid),'') <> 'S'
    and v.StartDate >= IDs.CompanyStartDate union all
  select 'P'+p.TempShiftPlanID as RowID,
    isnull(ts.shiftdate,p.ShiftDate) as StartDate,
    isnull(ts.timefrom,p.TimeFrom) as StartTime,
    isnull(ts.timeto,p.TimeTo) as FinishTime,
    (if StartTime < FinishTime then StartDate else StartDate+1
    endif) as FinishDate,1 as IsShift,
    v.VacancyID,
    p.TempShiftPlanID,
    v.Position,
    p.Description as ShiftDescription,
    Company.Name as CompanyName,
    Pe.Name as ContactName,
    (select Name from Status where Status.Status = v.Status and Status.Type = 'V') as Status,
    (select Name from Department where Department.DepartmentID = v.DepartmentID) as Department,
    (select Name from Staff where Staff.StaffID = v.StaffID) as Consultant,
    cast(p.ShiftSerialNumber as char(20)) as OurRef,
    p.ReferenceCode as TheirRef,
    v.ContractRef,
    p.CascadeDateTime,
    p.CascadeLevel,
    p.WhenEntered,
    (select name from person where personid = ts.personid) as FilledBy,
    ifnull(FilledBy,0,1) as Filled,
    isnull((select first 1 from tempshift where tempshiftplanid = p.tempshiftplanid and state = 'C' and cancelreason = '~'),0) as UnConfirmed,
    cast(null as long varchar) as LongDescription,
    (if @companycount > 1 then GetCompanyAddressOnLine(company.companyid)
    else ''
    endif) as CompanyAddress
    from TempShiftPlan as p key join Vacancy as v key join Employment key join(Company,Person as pe) join IDs on Company.CompanyID = IDs.ID
    ,TempShiftPlan as p left outer join tempshift as ts on p.tempshiftplanid = ts.tempshiftplanid and ts.state <> 'C'
    where p.ShiftDate between @DateRangeStart and @DateRangeEnd
    and not exists(select * from tempshift where tempshiftplanid = p.tempshiftplanid and state = 'C' and cancelreason <> '~' and isnull(crefill,0) = 0)
    and StartDate >= IDs.CompanyStartDate order by
    2 asc,3 asc
end]]>
  </SQLExec>
  <SQLExec ignoreerror="YES">
<![CDATA[grant execute on pears.NetClientVacancies to IQXNet]]>
  </SQLExec>
  <SQLExec ignoreerror="YES">
<![CDATA[drop procedure pears.NetClientVacancies2]]>
  </SQLExec>
  <SQLExec parameters="NO" xProcName="NetClientVacancies2">
<![CDATA[create procedure pears.NetClientVacancies2(in pWebUserID char(20),in pStartDate date default null,in pEndDate date default null)
result(RowID__H char(30),Position char(200),Start_Date__D date,Start_Time time,Finish_Date__D date,Finish_Time time,VacancyID__H char(20),TempShiftPlanID__H char(20),Our_Ref char(20),Their_Ref char(50),Contract_Ref char(20),Filled_By char(250),IsShift__H smallint,Filled__H smallint,Unconfirmed__H smallint,GroupID__H smallint)
begin
  declare @DateRangeStart date;
  declare @DateRangeEnd date;
  set @DateRangeStart=isnull(pStartDate,dateadd(week,-1,current date));
  set @DateRangeEnd=isnull(pEndDate,dateadd(year,1,current date));
  select 'V'+v.VacancyID as RowID,
    v.Position as Position,
    v.StartDate,
    cast(null as time) as StartTime,
    v.FinishDate,
    cast(null as time) as FinishTime,
    v.VacancyID,
    cast(null as char(20)) as TempShiftPlanID,
    v.RefCode as OurRef,
    v.TheirRef,
    v.ContractRef,
    (select list(person.name) from vacancy key join placement key join employment key join person where vacancy.vacancyid = v.vacancyid) as FilledBy,
    0 as IsShift,
    ifnull(nullif(FilledBy,''),0,1) as Filled,
    (if v.status = ']' then 1 else 0
    endif) as UnConfirmed,0 as GroupID from Vacancy as v key join Employment key join(Company,Person)
    where Company.CompanyID = any(select companyid from employment key join iqxnetuserlink where iqxnetuserid = pWebUserID)
    and v.StartDate <= @DateRangeEnd and isnull(v.FinishDate,@DateRangeEnd) >= @DateRangeStart and v.temp = 1
    and v.Status in( 'C','F',']') and isnull((select desktype from tempdesk where tempdeskid = v.tempdeskid),'') <> 'S'
    and v.StartDate >= IQXNetCompanyStartDate(Company.companyid) union all
  select 'P'+p.TempShiftPlanID as RowID,
    string(v.Position,' ',p.Description) as Position,
    p.ShiftDate as StartDate,
    p.TimeFrom as StartTime,
    (if p.TimeFrom < p.TimeTo then p.ShiftDate else p.ShiftDate+1
    endif) as FinishDate,p.TimeTo as FinishTime,
    v.VacancyID,
    p.TempShiftPlanID,
    cast(p.ShiftSerialNumber as char(20)) as OurRef,
    p.ReferenceCode as TheirRef,
    v.ContractRef,
    (select first person.name from person key join tempshift where tempshift.tempshiftplanid = p.tempshiftplanid and tempshift.state <> 'C') as FilledBy,
    1 as IsShift,
    ifnull(FilledBy,0,1) as Filled,
    isnull((select first 1 from tempshift where tempshiftplanid = p.tempshiftplanid and state = 'C' and cancelreason = '~'),0) as UnConfirmed,0 as GroupID
    from TempShiftPlan as p key join Vacancy as v key join Employment key join(Company,Person)
    where Company.CompanyID = any(select companyid from employment key join iqxnetuserlink where iqxnetuserid = pWebUserID)
    and p.ShiftDate between @DateRangeStart and @DateRangeEnd
    and not exists(select * from tempshift where tempshiftplanid = p.tempshiftplanid and state = 'C' and cancelreason <> '~' and isnull(crefill,0) = 0)
    and StartDate >= IQXNetCompanyStartDate(Company.companyid)
end]]>
  </SQLExec>
  <SQLExec ignoreerror="YES">
<![CDATA[grant execute on pears.NetClientVacancies2 to IQXNet]]>
  </SQLExec>
  <SQLExec ignoreerror="YES">
<![CDATA[drop procedure pears.NetClientVacancyTemplate]]>
  </SQLExec>
  <SQLExec parameters="NO" xProcName="NetClientVacancyTemplate">
<![CDATA[create procedure pears.NetClientVacancyTemplate(in pWebUserID char(20),in pTemplateVacancyID char(20))
result(VacancyID char(20),Position char(50),CompanyName char(60),ContactName char(30),Department char(30),VacDescription long varchar)
begin
  select v.VacancyID,
    v.Position as Position,
    Company.Name as CompanyName,
    Person.Name as ContactName,
    (select Name from Department where Department.DepartmentID = v.DepartmentID) as Department,
    v.othernotes as VacDescription
    from Vacancy as v key join Employment key join(Company,Person)
    where Company.CompanyID = any(select companyid from employment key join iqxnetuserlink where iqxnetuserid = pWebUserID)
    and v.vacancyid = pTemplateVacancyID and v.temp = 1 and v.Status = '[' and isnull((select desktype from tempdesk where tempdeskid = v.tempdeskid),'') <> 'S'
end]]>
  </SQLExec>
  <SQLExec ignoreerror="YES">
<![CDATA[grant execute on pears.NetClientVacancyTemplate to IQXNet]]>
  </SQLExec>
  <SQLExec ignoreerror="YES">
<![CDATA[drop procedure pears.NetClientVacancyTemplates]]>
  </SQLExec>
  <SQLExec parameters="NO" xProcName="NetClientVacancyTemplates">
<![CDATA[create procedure pears.NetClientVacancyTemplates(in pWebUserID char(20))
result(IsShift smallint,VacancyID char(20),TempShiftTemplateID char(20),Position char(50),ShiftDescription char(100),CompanyName char(60),ContactName char(30),Department char(30))
begin
  select 0 as IsShift,
    v.VacancyID,
    cast(null as char(20)) as TempShiftTemplateID,
    v.Position as Position,
    cast(null as char(50)) as ShiftDescription,
    Company.Name as CompanyName,
    Person.Name as ContactName,
    (select Name from Department where Department.DepartmentID = v.DepartmentID) as Department
    from Vacancy as v key join Employment key join(Company,Person)
    where Company.CompanyID = any(select companyid from employment key join iqxnetuserlink where iqxnetuserid = pWebUserID)
    and v.temp = 1 and v.Status = '[' and isnull((select desktype from tempdesk where tempdeskid = v.tempdeskid),'') <> 'S' union all
  select 1 as IsShift,
    v.VacancyID,
    p.TempShiftTemplateID,
    v.Position,
    p.Description as ShiftDescription,
    Company.Name as CompanyName,
    Person.Name as ContactName,
    (select Name from Department where Department.DepartmentID = v.DepartmentID) as Department
    from TempShiftTemplate as p key join TempShiftTemplateAllowed key join Vacancy as v key join Employment key join(Company,Person)
    where Company.CompanyID = any(select companyid from employment key join iqxnetuserlink where iqxnetuserid = pWebUserID) order by
    4 asc,5 asc
end]]>
  </SQLExec>
  <SQLExec ignoreerror="YES">
<![CDATA[grant execute on pears.NetClientVacancyTemplates to IQXNet]]>
  </SQLExec>
  <SQLExec ignoreerror="YES">
<![CDATA[drop procedure pears.NetContactList]]>
  </SQLExec>
  <SQLExec parameters="NO" xProcName="NetContactList">
<![CDATA[create procedure pears.NetContactList(in pWebUserID char(20))
result(EmploymentID char(20),CompanyName char(100),PersonName char(100),DirectPhone char(250),Mobile char(250),Email char(250),DirectFax char(250),Position char(100),Department char(100),LoginID char(100))
begin
  select employment.employmentid,
    company.name as companyname,
    person.name as personname,
    getphone('CP','Direct Telephone',employment.employmentid),
    getphone('CP','Mobile',employment.employmentid),
    getphone('CP','E-mail',employment.employmentid),
    getphone('CP','Direct Fax',employment.employmentid),
    employment.position,
    employment.department,
    iqxnetuser.loginid
    from employment key join(company,person)
    ,employment key join iqxnetuserlink key join iqxnetuser
    where employment.companyid = any(select companyid from employment key join iqxnetuserlink where iqxnetuserid = pWebUserID) order by
    person.keyname asc,company.keyname asc
end]]>
  </SQLExec>
  <SQLExec ignoreerror="YES">
<![CDATA[grant execute on pears.NetContactList to IQXNet]]>
  </SQLExec>
  <SQLExec ignoreerror="YES">
<![CDATA[drop procedure pears.NetContactRights]]>
  </SQLExec>
  <SQLExec parameters="NO" xProcName="NetContactRights">
<![CDATA[create procedure pears.NetContactRights(in pWebUserID char(20),in pEmploymentID char(20))
result(RightID char(20),RightDescription char(100),RightDefault char(100),RightAssigned integer,RightAssignedLabel char(100))
begin
  declare cid char(20);
  declare pRequestedWebUserID char(20);
  declare pUserClassID char(20);
  set cid=(select companyid from employment where employmentid = pEmploymentID);
  if not cid = any(select companyid from employment key join iqxnetuserlink where iqxnetuserid = pWebUserID) then
    select IQXNetRightID,Description,'' as RightDefault,0 as RightAssigned,'' as RightAssignedLabel from IQXNetRight where IQXNetRightID is null
  else
    set pRequestedWebUserID=(select first IQXNetUserID from IQXNetUserLink where employmentid = pEmploymentID);
    set pUserClassID=(select first IQXNetUserClassID from IQXNetUser where IQXNetUserID = pRequestedWebUserID);
    select IQXNetRight.IQXNetRightID as RightID,
      IQXNetRight.Description as RightDescription,
      if exists(select * from IQXNetRightDefault where IQXNetRightID = IQXNetRight.IQXNetRightID and IQXNetUserClassID = pUserClassID and ID = '*') then 'Allowed'
      else 'Denied'
      endif as RightDefault,isnull(IQXNetRightAssigned.Assigned,0) as RightAssigned,
      (case RightAssigned when-1 then 'Deny' when 0 then '' when 1 then 'Allow'
      end) as RightAssignedLabel from IQXNetRightAllowed left outer join IQXNetRightAssigned on IQXNetRightAllowed.IQXNetRightID = IQXNetRightAssigned.IQXNetRightID and IQXNetRightAssigned.IQXNetUserID = pRequestedWebUserID
      ,IQXNetRightAllowed key join IQXNetRight
      where IQXNetRightAllowed.IQXNetUserClassID = pUserClassID and IQXNetRightAllowed.ID = '*' and IQXNetRightAllowed.MaintainOnWeb = 1 order by
      IQXNetRight.sortorder asc,IQXNetRight.IQXNetRightID asc
  end if
end]]>
  </SQLExec>
  <SQLExec ignoreerror="YES">
<![CDATA[grant execute on pears.NetContactRights to IQXNet]]>
  </SQLExec>
  <SQLExec ignoreerror="YES">
<![CDATA[drop procedure pears.NetContactRightsSet]]>
  </SQLExec>
  <SQLExec parameters="NO" xProcName="NetContactRightsSet">
<![CDATA[create procedure pears.NetContactRightsSet(in pWebUserID char(20),in pEmploymentID char(20),in pRightsList long varchar)
result(pResult char(250))
begin
  declare cid char(20);
  declare pRequestedWebUserID char(20);
  declare i smallint;
  declare j smallint;
  declare q smallint;
  declare dummy smallint;
  declare s char(30);
  declare t char(30);
  declare local temporary table IDs(
    ID char(20) null,
    ) not transactional;
  insert into IDs( ID) 
    select distinct e.companyid from employment as e key join iqxnetuserlink as i where i.iqxnetuserid = pWebUserID;
  if not pEmploymentID = any(select e.employmentid from employment as e join IDs on e.companyid = IDs.ID) then
    select '99:~Permission denied';
    return
  end if;
  if IQXNetHasPermission(pWebUserID,'MAINTAINCONTACTS') = 0 then
    select '99:~Permission denied';
    return
  end if;
  set pRequestedWebUserID=(select first IQXNetUserID from IQXNetUserLink where employmentid = pEmploymentID);
  delete from iqxnetrightassigned where iqxnetuserid = pRequestedWebUserID and iqxnetrightid
     = any(select a.iqxnetrightid from iqxnetrightallowed as a key join iqxnetuserclass key join iqxnetuser as u where a.maintainonweb = 1 and u.iqxnetuserid = prequestedwebuserid);
  set pRightsList=replace(pRightsList,'Right_','');
  looplabel: loop
    set i=charindex(',',pRightsList);
    if i = 0 then
      set s=prightslist
    else
      set s="left"(prightslist,i-1);
      set prightslist="right"(prightslist,length(prightslist)-i)
    end if;
    set s=trim(s);
    set q=0;
    set j=charindex('=',s);
    if j > 0 then
      set t=trim("right"(s,length(s)-j));
      set s=trim("left"(s,j-1));
      case t
      when 'Allow' then set q=1
      when 'Deny' then set q=-1
      when '1' then set q=1
      when '-1' then set q=-1
      end case
    end if;
    if s <> '' and q <> 0 then
      begin
        insert into iqxnetrightassigned( iqxnetuserid,iqxnetrightid,assigned) values( pRequestedWebUserID,s,q) 
      exception
        when others then
          set dummy=0
      end
    end if;
    if i = 0 then
      leave looplabel
    end if
  end loop looplabel;
  select '0:~Success'
end]]>
  </SQLExec>
  <SQLExec ignoreerror="YES">
<![CDATA[grant execute on pears.NetContactRightsSet to IQXNet]]>
  </SQLExec>
  <SQLExec ignoreerror="YES">
<![CDATA[drop procedure pears.NetContactSet]]>
  </SQLExec>
  <SQLExec parameters="NO" xProcName="NetContactSet">
<![CDATA[create procedure pears.NetContactSet(in pWebUserID char(20),in pemploymentid char(20),in pdirectphone char(250) default 'NOT_SET',in pmobile char(250) default 'NOT_SET',in pemail char(250) default 'NOT_SET',in pdirectfax char(250) default 'NOT_SET',in pposition char(250) default 'NOT_SET',in pdepartment char(250) default 'NOT_SET',in pOLDdirectphone char(250) default 'NOT_SET',in pOLDmobile char(250) default 'NOT_SET',in pOLDemail char(250) default 'NOT_SET',in pOLDdirectfax char(250) default 'NOT_SET',in pOLDposition char(250) default 'NOT_SET',in pOLDdepartment char(250) default 'NOT_SET')
result(pResult char(250))
begin
  -- This proc is for maintenance updates of any company contact by master contacts with suitable rights
  declare cid char(20);
  declare ssql char(250);
  declare scomma char(1);
  declare local temporary table IDs(
    ID char(20) null,
    ) not transactional;
  insert into IDs( ID) 
    select distinct e.companyid from employment as e key join iqxnetuserlink as i where i.iqxnetuserid = pWebUserID;
  if not pEmploymentID = any(select e.employmentid from employment as e join IDs on e.companyid = IDs.ID) then
    select '99:~Permission denied';
    return
  end if;
  if isnull(pdirectphone,'') <> isnull(pOLDdirectphone,'') then
    call setphone('CP','Direct Telephone',pemploymentid,pdirectphone)
  end if;
  if isnull(pmobile,'') <> isnull(pOLDmobile,'') then
    call setphone('CP','Mobile',pemploymentid,pmobile)
  end if;
  if isnull(pemail,'') <> isnull(pOLDemail,'') then
    call setphone('CP','E-mail',pemploymentid,pemail);
    update iqxnetuserlink key join iqxnetuser set iqxnetuser.emailaddress = pemail where iqxnetuserlink.employmentid = pemploymentid
  end if;
  if isnull(pdirectfax,'') <> isnull(pOLDdirectfax,'') then
    call setphone('CP','Direct Fax',pemploymentid,pdirectfax)
  end if;
  set ssql='';
  set scomma='';
  if isnull(pposition,'') <> isnull(pOLDposition,'') then
    set ssql=string(ssql,scomma,'position=pposition');
    set scomma=','
  end if;
  if isnull(pdepartment,'') <> isnull(pOLDdepartment,'') then
    set ssql=string(ssql,scomma,'department=pdepartment');
    set scomma=','
  end if;
  if ssql <> '' then
    execute immediate string('update employment set ',ssql,' where employmentid=''',pemploymentid,'''')
  end if;
  select '0:~Success'
end]]>
  </SQLExec>
  <SQLExec ignoreerror="YES">
<![CDATA[grant execute on pears.NetContactSet to IQXNet]]>
  </SQLExec>
  <SQLExec ignoreerror="YES">
<![CDATA[drop function pears.NetDebtorsDaySalesOutstanding]]>
  </SQLExec>
  <SQLExec parameters="NO" xProcName="NetDebtorsDaySalesOutstanding">
<![CDATA[create function pears.NetDebtorsDaySalesOutstanding(in pAccountCode char(12),in DaysInPeriod integer,in CutoffDate date)
returns decimal(10,2)
begin
  declare Outst decimal(10,2);
  declare Sales decimal(10,2);
  declare dStart date;
  set dStart=dateadd(dd,-1*(daysinperiod-1),CutoffDate);
  set Outst=(select sum(IQacDocumentOutstandingAmount(DocumentID,CutOffDate)) from iqacdocument where AccountCode = pAccountCode and ledgerid = 'Sales' and(fullyallocated is null or fullyallocated > CutOffDate));
  set Sales=(select sum(amount) from iqacdocument where ledgerid = 'Sales' and accountcode = pAccountCode and accountingdate between dstart and cutoffdate and documentclass = 'Invoice');
  if isnull(Sales,0) = 0 then
    return null
  else
    return(Outst/sales)*DaysInPeriod
  end if
end]]>
  </SQLExec>
  <SQLExec ignoreerror="YES">
<![CDATA[grant execute on pears.NetDebtorsDaySalesOutstanding to IQXNet]]>
  </SQLExec>
  <SQLExec ignoreerror="YES">
<![CDATA[drop procedure pears.NetForgottenPassword]]>
  </SQLExec>
  <SQLExec parameters="NO" xProcName="NetForgottenPassword">
<![CDATA[create procedure pears.NetForgottenPassword(in pWebUserID char(20),in login_email char(50))
result(retval char(1))
begin
  declare PersID char(20);
  set PersID=(select first IQXNetUserID from IQXNetUser where EmailAddress = login_email);
  if isnull(PersID,'') <> '' then
    update IQXNetUser set PasswordSet = 2 where IQXNetUserID = PersID;
    select '0:~success'
  else
    select '100:~not found'
  end if
end]]>
  </SQLExec>
  <SQLExec ignoreerror="YES">
<![CDATA[grant execute on pears.NetForgottenPassword to IQXNet]]>
  </SQLExec>
  <SQLExec ignoreerror="YES">
<![CDATA[drop function pears.NetGetPlacementid]]>
  </SQLExec>
  <SQLExec parameters="NO" xProcName="NetGetPlacementid">
<![CDATA[create function pears.NetGetPlacementid(in vacid char(20),in persid char(20),in pweekstartdate date)
returns integer
not deterministic
begin
  declare placid char(20);
  set placid=(select first placement.placementid from placement key join employment where placement.vacancyid = vacid and employment.personid
       = persid and placement.temp <> 0 order by isnull(employment.leavedate,current date+3650) desc);
  if placid is null then
    set placid=uniquekey('pl');
    insert into employment( employmentid,companyid,personid,position,leavedate,temp,concurrent) 
      select placid,employment.companyid,persid,vacancy.position,pweekstartdate+6,1,1 from vacancy key join employment where vacancy.vacancy = vacid;
    insert into placement( placementid,employmentid,vacancyid,departmentid,staffid,contractref,theirref,placedate,temp,daysperweek) 
      select placid,placid,vacid,vacancy.departmentid,userstaffid,vacancy.contractref,vacancy.theirref,current date,1,5 from vacancy where vacancy.vacancy = vacid;
    update progress join status on progress.status = status.status and status.type = 'R' set progress.status = 'X',progress.actiondate = null,
      progress.placementid = placid where progress.vacancyid = vacid and progress.personid = persid
      and isnull(status.final,0) = 0 and progress.placementid is null
  else
    update placement key join employment set employment.leavedate = pweekstartdate+6
      where placement.placementid = placid and employment.leavedate < pweekstartdate+6 // NB - does not change if null
  end if;
  return placid
end]]>
  </SQLExec>
  <SQLExec ignoreerror="YES">
<![CDATA[grant execute on pears.NetGetPlacementid to IQXNet]]>
  </SQLExec>
  <SQLExec ignoreerror="YES">
<![CDATA[drop procedure pears.NetIncomingApplications]]>
  </SQLExec>
  <SQLExec parameters="NO" xProcName="NetIncomingApplications">
<![CDATA[create procedure pears.NetIncomingApplications(in pWebUserId char(20),in Jobid char(20) default null)
result(pResult char(250))
begin
  declare Person char(20);
  declare Applied char(20);
  declare VacancyOwner char(20);
  if pWebUserId is null then
    select '99:~You are not logged in';
    return
  end if;
  set VacancyOwner=(select staffid from vacancy where vacancyid = JobId);
  set Person=(select IQXNetUserLink.PersonID from IQXNetUserLink where iqxnetuserlink.iqxnetuserid = pwebuserid);
  set Applied=(select status from progress where vacancyid = JobId and personid = person);
  if Applied > '' then
    select '99:~You have already Applied for this post';
    return
  end if;
  insert into progress( progressid,vacancyid,actiondate,status,personid,staffId) values( uniquekey('X'),JobId,getdate(*),'A',Person,VacancyOwner) ;
  select '0:~Success'
end]]>
  </SQLExec>
  <SQLExec ignoreerror="YES">
<![CDATA[grant execute on pears.NetIncomingApplications to IQXNet]]>
  </SQLExec>
  <SQLExec ignoreerror="YES">
<![CDATA[drop function pears.NetJSString]]>
  </SQLExec>
  <SQLExec parameters="NO" xProcName="NetJSString">
<![CDATA[create function pears.NetJSString(in s char(255))
returns char(255)
begin
  set s=replace(s,'\\','\\\\');
  set s=replace(s,'"','\\"');
  return string('"',s,'"')
end]]>
  </SQLExec>
  <SQLExec ignoreerror="YES">
<![CDATA[grant execute on pears.NetJSString to IQXNet]]>
  </SQLExec>
  <SQLExec ignoreerror="YES">
<![CDATA[drop procedure pears.NetMessage]]>
  </SQLExec>
  <SQLExec parameters="NO" xProcName="NetMessage">
<![CDATA[create procedure pears.NetMessage(in pWebUserID char(20),in ptype char(20),in ptitle char(100),in pdescription long varchar,in pvacancyid char(20) default
null,in pplacementid char(20) default null,in pprogressid char(20) default null,in pprovtimesheetid char(20) default
null,in ptimesheetid char(20) default null)
result(pResult char(250))
begin
  declare persid char(20);
  declare empid char(20);
  set persid=null;
  set empid=(select first employmentid from iqxnetuserlink where iqxnetuserid = pwebuserid);
  if empid is null then
    set persid=(select first personid from iqxnetuserlink where iqxnetuserid = pwebuserid);
    if persid is null then
      select '99:~Permission denied';
      return
    end if
  end if;
  set pprovtimesheetid=nullif(trim(pprovtimesheetid),'');
  set ptimesheetid=nullif(trim(ptimesheetid),'');
  if pprovtimesheetid is not null then
    set pvacancyid=(select first vacancyid from tempprovtimesheet where tempprovtimesheetid = pprovtimesheetid)
  end if;
  if ptimesheetid is not null then
    set pplacementid=(select first placementid from temptimesheet where temptimesheetid = ptimesheetid);
    set pvacancyid=(select first vacancyid from placement where placementid = pplacementid)
  end if;
  if trim(isnull(ptype,'')) = '' then
    select '101:~Invalid message type';
    return
  end if;
  if trim(isnull(ptitle,'')) = '' then
    select '102:~Incomplete message';
    return
  end if;
  call IQXNetPopup(pWebUserID,persid,empid,pvacancyid,pplacementid,pprogressid,ptype,ptitle,pdescription);
  select '0:~Success'
end]]>
  </SQLExec>
  <SQLExec ignoreerror="YES">
<![CDATA[grant execute on pears.NetMessage to IQXNet]]>
  </SQLExec>
  <SQLExec ignoreerror="YES">
<![CDATA[drop procedure pears.NetNumberProvTimesheet]]>
  </SQLExec>
  <SQLExec parameters="NO" xProcName="NetNumberProvTimesheet">
<![CDATA[create procedure pears.NetNumberProvTimesheet(in provTSID char(20))
begin
  update params set nexttimesheetnumber = isnull(nexttimesheetnumber,0)+1;
  update tempprovtimesheet set serialnumber = (select first string(timesheetnumberprefix,nexttimesheetnumber) from params) where tempprovtimesheetid = provTSID
end]]>
  </SQLExec>
  <SQLExec ignoreerror="YES">
<![CDATA[grant execute on pears.NetNumberProvTimesheet to IQXNet]]>
  </SQLExec>
  <SQLExec ignoreerror="YES">
<![CDATA[drop function pears.NetOrderReasonList]]>
  </SQLExec>
  <SQLExec parameters="NO" xProcName="NetOrderReasonList">
<![CDATA[create function pears.NetOrderReasonList()
returns long varchar
begin
  declare rv long varchar;
  select list(string(tempshiftorderreasonid,']~[',description),']~[' order by sortorder asc,description asc) into rv from tempshiftorderreason;
  return rv
end]]>
  </SQLExec>
  <SQLExec ignoreerror="YES">
<![CDATA[grant execute on pears.NetOrderReasonList to IQXNet]]>
  </SQLExec>
  <SQLExec ignoreerror="YES">
<![CDATA[drop procedure pears.NetOwnerAccountDetails]]>
  </SQLExec>
  <SQLExec parameters="NO" xProcName="NetOwnerAccountDetails">
<![CDATA[create procedure pears.NetOwnerAccountDetails(in pWebUserID char(20),in pAccountID char(20))
result(Client_Code char(12),ObjID char(20),Company_Name char(60),Address_Line_1 char(40),Address_Line_2 char(40),Address_Line_3 char(40),Town char(30),County char(30),Country char(30),Postcode char(20),Phone char(100),Fax char(100),Web_Site char(100))
begin
  declare divid char(20);
  set divid=(select first staff.divisionid from iqxnetuser key join staff where iqxnetuser.iqxnetuserid = pwebuserid);
  if divid is null then
    return
  end if;
  if isnull(pAccountID,'') = '' then -- return empty recordset for "new" record
    select '','','','','','','','','','','',''
  else -- if can't find pAccountID as clientcode then drop through and look for it as companyid
    if exists(select * from company where clientcode = pAccountID and InvoiceAddress = 1 and divisionid = divid) then
      select clientcode as Client_Code,
        Company.companyid as ObjID,
        Company.Name as Company_Name,
        Company.addr1 as Address_Line_1,
        Company.addr2 as Address_Line_2,
        Company.addr3 as Address_Line_3,
        Company.town as Town,
        Company.county as County,
        Company.country as Country,
        Company.postcode as Postcode,
        getphone('C','Telephone',Company.companyid) as Phone,
        getphone('C','Fax',Company.companyid) as Fax,
        getphone('C','Web Site',Company.companyid) as Web_Site
        from company
        where clientcode = pAccountID and InvoiceAddress = 1 and divisionid = divid
    else -- needed because tree uses clientcode, but form uses companyid
      select clientcode as Client_Code,
        Company.companyid as ObjID,
        Company.Name as Company_Name,
        Company.addr1 as Address_Line_1,
        Company.addr2 as Address_Line_2,
        Company.addr3 as Address_Line_3,
        Company.town as Town,
        Company.county as County,
        Company.country as Country,
        Company.postcode as Postcode,
        getphone('C','Telephone',Company.companyid) as Phone,
        getphone('C','Fax',Company.companyid) as Fax,
        getphone('C','Web Site',Company.companyid) as Web_Site
        from company
        where companyid = pAccountID and divisionid = divid
    end if
  end if
end]]>
  </SQLExec>
  <SQLExec ignoreerror="YES">
<![CDATA[grant execute on pears.NetOwnerAccountDetails to IQXNet]]>
  </SQLExec>
  <SQLExec ignoreerror="YES">
<![CDATA[drop procedure pears.NetOwnerAccountEdit]]>
  </SQLExec>
  <SQLExec parameters="NO" xProcName="NetOwnerAccountEdit">
<![CDATA[create procedure pears.NetOwnerAccountEdit(in pWebUserID char(20),in pClient_Code char(12),in pObjID char(20),in pParentObject char(20),in pAccount_Name char(60),in pAddress_Line_1 char(40),in pAddress_Line_2 char(40),in pAddress_Line_3 char(40),in pTown char(30),in pCounty char(30),in pCountry char(30),in pPostcode char(20),in pPhone char(100),in pFax char(100),in pWeb_Site char(100),in pOldClient_Code char(12),in pOldAccount_Name char(60),in pOldAddress_Line_1 char(40),in pOldAddress_Line_2 char(40),in pOldAddress_Line_3 char(40),in pOldTown char(30),in pOldCounty char(30),in pOldCountry char(30),in pOldPostcode char(20),in pOldPhone char(100),in pOldFax char(100),in pOldWeb_Site char(100))
result(pResult char(250))
begin
  declare @CompID char(20);
  declare ssql char(255);
  declare @AccountCode char(12);
  declare @DivisionID char(20);
  set ssql='';
  set @DivisionID=(select staff.divisionid from staff key join iqxnetuser where iqxnetuserid = pwebuserid);
  if @DivisionID is null then
    select '99:~Permission denied';
    return
  end if;
  if pAccount_Name = '' then
    select '101:~Please ensure there is a Company Name';
    return
  end if;
  if pObjID = '' then
    set @CompID=uniquekey(pAccount_Name);
    if pClient_Code is null or pClient_Code = 'New' then
      select '102:~Please ensure there is a valid Account Code';
      return
    end if;
    if pClient_Code = any(select clientcode from company) then
      select '103:~Please use a unique Account Code';
      return
    end if;
    set @AccountCode=pClient_Code;
    insert into company( companyid,name,keyname,clientcode,invoiceaddress,divisionid) values( @CompID,pAccount_Name,ucase(pAccount_Name),@AccountCode,'1',@DivisionID) 
  else
    set @CompID=pObjID;
    if pAccount_Name <> pOldAccount_Name then
      set ssql=ssql+',name=pAccount_Name,keyname = ucase(pAccount_Name)'
    end if
  end if;
  if pAddress_Line_1 <> pOldAddress_Line_1 then
    set ssql=ssql+',addr1=pAddress_Line_1'
  end if;
  if pAddress_Line_2 <> pOldAddress_Line_2 then
    set ssql=ssql+',addr2=pAddress_Line_2'
  end if;
  if pAddress_Line_3 <> pOldAddress_Line_3 then
    set ssql=ssql+',addr3=pAddress_Line_3'
  end if;
  if pTown <> pOldTown then
    set ssql=ssql+',town=pTown'
  end if;
  if pCounty <> pOldCounty then
    set ssql=ssql+',county=pCounty'
  end if;
  if pCountry <> pOldCountry then
    set ssql=ssql+',country=pCountry'
  end if;
  if pPostcode <> pOldPostcode then
    set ssql=ssql+',Postcode=pPostcode'
  end if;
  if ssql > '' then
    execute immediate 'update company set '+stuff(ssql,1,1,'')+' where companyid = @CompID'
  end if;
  if pPhone <> pOldPhone then
    call SetPhone('C','Telephone',@CompID,pPhone)
  end if;
  if pFax <> pOldFax then
    call SetPhone('C','Fax',@CompID,pFax)
  end if;
  if pWeb_Site <> pOldWeb_Site then
    call SetPhone('C','Web Site',@CompID,pWeb_Site)
  end if;
  select string('0:',@CompID,'#',@AccountCode,'~Success')
end]]>
  </SQLExec>
  <SQLExec ignoreerror="YES">
<![CDATA[grant execute on pears.NetOwnerAccountEdit to IQXNet]]>
  </SQLExec>
  <SQLExec ignoreerror="YES">
<![CDATA[drop procedure pears.NetOwnerCandidateBankEdit]]>
  </SQLExec>
  <SQLExec parameters="NO" xProcName="NetOwnerCandidateBankEdit">
<![CDATA[create procedure pears.NetOwnerCandidateBankEdit(in pWebUserID char(20),in pPersonID char(20))
result(PersonID char(20),ni char(10),BankName char(30),BankSortCode char(8),BankAcName char(50),BankAcNo char(8),UniqueTaxReference char(20))
begin
  if((select count(*) from person where person.personid = pPersonID) = 0) then
    select '','','','','','',''
  else
    select person.personid,person.ni,Pay_Employee.BankName,Pay_Employee.BankSortCode,Pay_Employee.BankAcName,('******'
      +substring(Pay_Employee.BankAcNo,7)) as BankAcNo,Pay_Employee.UniqueTaxReference
      from person key left outer join Pay_Employee
      ,person where person.personid = pPersonID
  end if
end]]>
  </SQLExec>
  <SQLExec ignoreerror="YES">
<![CDATA[grant execute on pears.NetOwnerCandidateBankEdit to IQXNet]]>
  </SQLExec>
  <SQLExec ignoreerror="YES">
<![CDATA[drop procedure pears.NetOwnerCandidateProfileEdit]]>
  </SQLExec>
  <SQLExec parameters="NO" xProcName="NetOwnerCandidateProfileEdit">
<![CDATA[create procedure pears.NetOwnerCandidateProfileEdit(in pWebUserID char(20),in pPersonID char(20))
result(PersonID char(20),Forenames char(50),Surname char(50),Gender char(1),DOB date,HomePhone char(250),DayPhone char(250),Mobile char(250),Email char(250),Addr1 char(50),Addr2 char(50),Addr3 char(50),Town char(50),County char(50),Country char(50),Postcode char(50))
begin
  if((select count(*) from person where person.personid = pPersonID) = 0) then
    select '','','','',null,'','','','','','','','','','',''
  else
    select first person.personid,person.forenames,person.surname,person.sex,person.dob,
      getphone('P','Home Telephone',person.personid) as HomePhone,getphone('P','Day Telephone',person.personid) as DayPhone,
      getphone('P','Mobile',person.personid) as Mobile,getphone('P','E-mail',person.personid) as Email,
      person.addr1,person.addr2,person.addr3,person.town,person.county,person.country,person.postcode
      from person where person.personid = pPersonID
  end if
end]]>
  </SQLExec>
  <SQLExec ignoreerror="YES">
<![CDATA[grant execute on pears.NetOwnerCandidateProfileEdit to IQXNet]]>
  </SQLExec>
  <SQLExec ignoreerror="YES">
<![CDATA[drop procedure pears.NetOwnerCandidateProfileSet]]>
  </SQLExec>
  <SQLExec parameters="NO" xProcName="NetOwnerCandidateProfileSet">
<![CDATA[create procedure pears.NetOwnerCandidateProfileSet(in pWebUserID char(20),in ppersonid char(20),in pForenames char(50) default 'NOT-SET',in pSurname char(50) default 'NOT-SET',in pGender char(20) default 'NOT-SET',in pdob char(20) default 'NOT-SET',in phomephone char(250) default 'NOT-SET',in pDayPhone char(250) default 'NOT-SET',in pMobile char(250) default 'NOT-SET',in pemail char(250) default 'NOT-SET',in pAddr1 char(50) default 'NOT-SET',in pAddr2 char(50) default 'NOT-SET',in pAddr3 char(50) default 'NOT-SET',in pTown char(50) default 'NOT-SET',in pCounty char(50) default 'NOT-SET',in pCountry char(50) default 'NOT-SET',in pPostcode char(50) default 'NOT-SET',in pOLDForenames char(50) default 'NOT-SET',in pOLDSurname char(50) default 'NOT-SET',in pOLDGender char(20) default 'NOT-SET',in pOLDdob char(20) default 'NOT-SET',in pOLDhomephone char(250) default 'NOT-SET',in pOLDDayPhone char(250) default 'NOT-SET',in pOLDMobile char(250) default 'NOT-SET',in pOLDemail char(250) default 'NOT-SET',in pOLDAddr1 char(50) default 'NOT-SET',in pOLDAddr2 char(50) default 'NOT-SET',in pOLDAddr3 char(50) default 'NOT-SET',in pOLDTown char(50) default 'NOT-SET',in pOLDCounty char(50) default 'NOT-SET',in pOLDCountry char(50) default 'NOT-SET',in pOLDPostcode char(50) default 'NOT-SET',in qanswers long varchar default
null)
result(pResult char(250))
begin
  declare dateofbirth date;
  declare bnamechanged smallint;
  declare ssql char(255);
  declare DivId char(20);
  declare PersID char(20);
  declare @StaffID char(20);
  declare PayrollCoID char(20);
  set bnamechanged=0;
  set ssql='';
  set DivID=(select first staff.divisionid from iqxnetuser key join staff where iqxnetuser.iqxnetuserid = pWebUserID);
  if IQXNetHasPermission(pWebUserID,'ADDCANDIDATES') = 0 then
    select '99:~Permission denied';
    return
  end if;
  if isnull(pForenames,'') = '' or isnull(pSurname,'') = '' then
    select '100:~Please enter both a forename and a surname';
    return
  end if;
  if((select count(*) from person where person.personid = ppersonid) = 0) then
    set @StaffID=(select first staffid from iqxnetuser where iqxnetuserid = pWebUserID);
    set PersID=uniquekey(pForenames+pSurname);
    set PayrollCoID=(select DefPayrollCoID from Division where divisionid = DivID);
    insert into person( personid,staffid,divisionid,name,keyname,status,forenames,surname,salutation,registrationdate,payrollnumber,PayrollIdentifier) values( PersID,@StaffID,DivID,pForenames+' '+pSurname,ucase(pSurname)+' '+ucase(pForenames),'C',pForenames,pSurname,pForenames,now(*),'NEW',PayrollCoID) 
  else
    set PersID=ppersonid;
    if isnull(pforenames,'') <> isnull(poldforenames,'') then
      set ssql=ssql+',forenames=pforenames';
      set ssql=ssql+',salutation=getword(pforenames,1)';
      set bnamechanged=1
    end if;
    if isnull(psurname,'') <> isnull(poldsurname,'') then
      set ssql=ssql+',surname=psurname';
      set bnamechanged=1
    end if;
    if bnamechanged = 1 then
      set ssql=ssql+',name=string(getword(pforenames,1),'' '',psurname)';
      set ssql=ssql+',keyname=makekeyname(string(psurname,'' '',pforenames))'
    end if
  end if;
  if isnull(pgender,'') <> isnull(poldgender,'') then
    set ssql=ssql+',sex=pgender'
  end if;
  if isnull(pdob,'') <> isnull(pOLDdob,'') then
    set dateofbirth=IQXNetStringToDate(pdob);
    if trim(isnull(pdob,'')) <> '' and dateofbirth is null then
      select '1:~Invalid date of birth';
      return
    end if;
    set ssql=ssql+',dob = dateofbirth'
  end if;
  if isnull(paddr1,'') <> isnull(poldaddr1,'') then
    set ssql=ssql+',addr1=paddr1'
  end if;
  if isnull(paddr2,'') <> isnull(poldaddr2,'') then
    set ssql=ssql+',addr2=paddr2'
  end if;
  if isnull(paddr3,'') <> isnull(poldaddr3,'') then
    set ssql=ssql+',addr3=paddr3'
  end if;
  if isnull(ptown,'') <> isnull(poldtown,'') then
    set ssql=ssql+',town=ptown'
  end if;
  if isnull(pcounty,'') <> isnull(poldcounty,'') then
    set ssql=ssql+',county=pcounty'
  end if;
  if isnull(pcountry,'') <> isnull(poldcountry,'') then
    set ssql=ssql+',country=pcountry'
  end if;
  if isnull(ppostcode,'') <> isnull(poldpostcode,'') then
    set ssql=ssql+',postcode=ucase(ppostcode)'
  end if;
  if ssql <> '' then
    execute immediate 'update person set '+stuff(ssql,1,1,'')+' where personid=PersID'
  end if;
  if isnull(phomephone,'') <> isnull(pOLDhomephone,'') then
    call setphone('P','Home Telephone',PersID,phomephone)
  end if;
  if isnull(pdayphone,'') <> isnull(pOLDdayphone,'') then
    call setphone('P','Day Telephone',PersID,pdayphone)
  end if;
  if isnull(pmobile,'') <> isnull(pOLDmobile,'') then
    call setphone('P','Mobile',PersID,pmobile)
  end if;
  if isnull(pemail,'') <> isnull(pOLDemail,'') then
    call setphone('P','E-mail',PersID,pemail);
    update iqxnetuserlink key join iqxnetuser set iqxnetuser.emailaddress = pemail where iqxnetuserlink.personid = PersID
  end if;
  call IQXNetSaveQuestionnaire(PersID,qanswers);
  call personrecordupdated(PersID);
  select '0:~Success'
end]]>
  </SQLExec>
  <SQLExec ignoreerror="YES">
<![CDATA[grant execute on pears.NetOwnerCandidateProfileSet to IQXNet]]>
  </SQLExec>
  <SQLExec ignoreerror="YES">
<![CDATA[drop procedure pears.NetOwnerCandidateSearch]]>
  </SQLExec>
  <SQLExec parameters="NO" xProcName="NetOwnerCandidateSearch">
<![CDATA[create procedure pears.NetOwnerCandidateSearch(in pWebUserID char(20),in SearchValue char(20) default '%')
result(PersonID char(20),Name char(61),Address char(82))
begin
  declare DivID char(20);
  declare CurrentStates char(30);
  set DivID=(select first staff.divisionid from iqxnetuser key join staff where iqxnetuser.iqxnetuserid = pWebUserID);
  set CurrentStates=string('[',(select first PersonCurrentStates from params),']');
  set SearchValue=replace(SearchValue,'*','%');
  select person.personid as PersonID,
    person.forenames+' '+person.surname as Name,
    GetPersonAddressOnLine(person.personid) as Address
    from person
    where person.divisionid = DivID and person.status like CurrentStates and person.keyname like SearchValue+'%' order by
    KeyName asc
end]]>
  </SQLExec>
  <SQLExec ignoreerror="YES">
<![CDATA[grant execute on pears.NetOwnerCandidateSearch to IQXNet]]>
  </SQLExec>
  <SQLExec ignoreerror="YES">
<![CDATA[drop procedure pears.NetOwnerCandidateSetBank]]>
  </SQLExec>
  <SQLExec parameters="NO" xProcName="NetOwnerCandidateSetBank">
<![CDATA[create procedure pears.NetOwnerCandidateSetBank(in pWebUserID char(20),in ppersonid char(20),in pni char(10) default 'NOT-SET',in pBankName char(30) default 'NOT-SET',in pBankSortCode char(8) default 'NOT-SET',in pBankAcName char(50) default 'NOT-SET',in pBankAcNo char(8) default 'NOT-SET',in pUniqueTaxReference char(20) default 'NOT-SET',in poldni char(10) default 'NOT-SET',in poldBankName char(30) default 'NOT-SET',in poldBankSortCode char(8) default 'NOT-SET',in poldBankAcName char(50) default 'NOT-SET',in poldBankAcNo char(8) default 'NOT-SET',in poldUniqueTaxReference char(20) default 'NOT-SET')
result(pResult char(250))
begin
  declare ssql char(255); // sql string
  declare errmsg char(150);
  declare DivID char(20);
  declare CurrentStates char(30);
  set ssql='';
  // check that the record is owned by the logged in user
  set DivID=(select first staff.divisionid from iqxnetuser key join staff where iqxnetuser.iqxnetuserid = pWebUserID);
  set CurrentStates=string('[',(select first PersonCurrentStates from params),']');
  if not ppersonid = any(select person.personid from person where person.divisionid = DivID and person.status like CurrentStates) then
    select '99:~Permission denied';
    return
  end if;
  if isnull(pni,'') <> isnull(poldni,'') then // National insurance number goes into person table. others go into pay_Employee table
    set pni=ucase(pni);
    if trim(isnull(pni,'')) <> '' then
      set errmsg=validateninumber(pni);
      if trim(isnull(errmsg,'')) <> '' then
        select '121:~'+errmsg;
        return
      end if
    end if;
    set ssql=ssql+'ni=pni'
  end if;
  if ssql <> '' then
    execute immediate 'update person set '+ssql+' where personid=ppersonid'
  end if;
  // check if record already present in Pay_Employee. If no, insert stub record first
  if not exists(select * from Pay_Employee where Personid = ppersonid) then
    // insert stub
    insert into pay_employee( personid) values( ppersonid) 
  end if;
  set ssql=''; // clear for second update to Pay_Employee table
  // update
  if isnull(pBankName,'') <> isnull(poldBankName,'') then
    set ssql=ssql+',BankName=pBankName'
  end if;
  if isnull(pBankSortCode,'') <> isnull(poldBankSortCode,'') then
    set ssql=ssql+',BankSortCode=pBankSortCode'
  end if;
  if isnull(pBankAcName,'') <> isnull(poldBankAcName,'') then
    set ssql=ssql+',BankAcName=pBankAcName'
  end if;
  if isnull(pBankAcNo,'') <> isnull(poldBankAcNo,'') then
    set ssql=ssql+',BankAcNo=pBankAcNo'
  end if;
  if isnull(pUniqueTaxReference,'') <> isnull(poldUniqueTaxReference,'') then
    set ssql=ssql+',UniqueTaxReference=pUniqueTaxReference'
  end if;
  if ssql <> '' then
    execute immediate 'update Pay_Employee set '+stuff(ssql,1,1,'')+' where personid=ppersonid'
  end if;
  call personrecordupdated(ppersonid);
  select '0:~Success'
end]]>
  </SQLExec>
  <SQLExec ignoreerror="YES">
<![CDATA[grant execute on pears.NetOwnerCandidateSetBank to IQXNet]]>
  </SQLExec>
  <SQLExec ignoreerror="YES">
<![CDATA[drop procedure pears.NetOwnerCompanyDetails]]>
  </SQLExec>
  <SQLExec parameters="NO" xProcName="NetOwnerCompanyDetails">
<![CDATA[create procedure pears.NetOwnerCompanyDetails(in pWebUserID char(20),in pCompanyID char(20))
result(ObjID char(20),Company_Name char(60),Address_Line_1 char(40),Address_Line_2 char(40),Address_Line_3 char(40),Town char(30),County char(30),Country char(30),Postcode char(20),Phone char(100),Fax char(100),Web_Site char(100))
begin
  declare divid char(20);
  set divid=(select first staff.divisionid from iqxnetuser key join staff where iqxnetuser.iqxnetuserid = pwebuserid);
  if divid is null then
    return
  end if;
  if isnull(pCompanyID,'') = '' then
    select '','','','','','','','','','','',''
  else
    select Company.companyid as ObjID,
      Company.Name as Company_Name,
      Company.addr1 as Address_Line_1,
      Company.addr2 as Address_Line_2,
      Company.addr3 as Address_Line_3,
      Company.town as Town,
      Company.county as County,
      Company.country as Country,
      Company.postcode as Postcode,
      getphone('C','Telephone',Company.companyid) as Phone,
      getphone('C','Fax',Company.companyid) as Fax,
      getphone('C','Web Site',Company.companyid) as Web_Site
      from company
      where companyid = pCompanyID and divisionid = divid
  end if
end]]>
  </SQLExec>
  <SQLExec ignoreerror="YES">
<![CDATA[grant execute on pears.NetOwnerCompanyDetails to IQXNet]]>
  </SQLExec>
  <SQLExec ignoreerror="YES">
<![CDATA[drop procedure pears.NetOwnerCompanyEdit]]>
  </SQLExec>
  <SQLExec parameters="NO" xProcName="NetOwnerCompanyEdit">
<![CDATA[create procedure pears.NetOwnerCompanyEdit(in pWebUserID char(20),in pObjID char(20),in pParentObject char(20),in pCompany_Name char(60),in pAddress_Line_1 char(40),in pAddress_Line_2 char(40),in pAddress_Line_3 char(40),in pTown char(30),in pCounty char(30),in pCountry char(30),in pPostcode char(20),in pPhone char(100),in pFax char(100),in pWeb_Site char(100),in pOldCompany_Name char(60),in pOldAddress_Line_1 char(40),in pOldAddress_Line_2 char(40),in pOldAddress_Line_3 char(40),in pOldTown char(30),in pOldCounty char(30),in pOldCountry char(30),in pOldPostcode char(20),in pOldPhone char(100),in pOldFax char(100),in pOldWeb_Site char(100))
result(pResult char(250))
begin
  declare CompID char(20);
  declare ssql char(255);
  declare divid char(20);
  set ssql='';
  set divid=(select first staff.divisionid from iqxnetuser key join staff where iqxnetuser.iqxnetuserid = pwebuserid);
  if divid is null then
    select '99:~Permission denied';
    return
  end if;
  if pCompany_Name = '' then
    select '101:~Please ensure there is a Company Name';
    return
  end if;
  if pObjID = '' then
    set CompID=uniquekey(pCompany_Name);
    insert into company( companyid,name,keyname,clientcode,divisionid) values( CompID,pCompany_Name,ucase(pCompany_Name),pParentObject,divid) 
  else
    set CompID=pObjID;
    if pCompany_Name <> pOldCompany_Name then
      set ssql=ssql+',name=pCompany_Name,keyname = ucase(pCompany_Name)'
    end if
  end if;
  if pAddress_Line_1 <> pOldAddress_Line_1 then
    set ssql=ssql+',addr1=pAddress_Line_1'
  end if;
  if pAddress_Line_2 <> pOldAddress_Line_2 then
    set ssql=ssql+',addr2=pAddress_Line_2'
  end if;
  if pAddress_Line_3 <> pOldAddress_Line_3 then
    set ssql=ssql+',addr3=pAddress_Line_3'
  end if;
  if pTown <> pOldTown then
    set ssql=ssql+',town=pTown'
  end if;
  if pCounty <> pOldCounty then
    set ssql=ssql+',county=pCounty'
  end if;
  if pCountry <> pOldCountry then
    set ssql=ssql+',country=pCountry'
  end if;
  if pPostcode <> pOldPostcode then
    set ssql=ssql+',Postcode=pPostcode'
  end if;
  if ssql > '' then
    execute immediate 'update company set '+stuff(ssql,1,1,'')+' where companyid = CompID'
  end if;
  if pPhone <> pOldPhone then
    call SetPhone('C','Telephone',CompID,pPhone)
  end if;
  if pFax <> pOldFax then
    call SetPhone('C','Fax',CompID,pFax)
  end if;
  if pWeb_Site <> pOldWeb_Site then
    call SetPhone('C','Web Site',CompID,pWeb_Site)
  end if;
  select string('0:',CompID,'#',pParentObject,'~Success')
end]]>
  </SQLExec>
  <SQLExec ignoreerror="YES">
<![CDATA[grant execute on pears.NetOwnerCompanyEdit to IQXNet]]>
  </SQLExec>
  <SQLExec ignoreerror="YES">
<![CDATA[drop procedure pears.NetOwnerEmployeeDetails]]>
  </SQLExec>
  <SQLExec parameters="NO" xProcName="NetOwnerEmployeeDetails">
<![CDATA[create procedure pears.NetOwnerEmployeeDetails(in pWebUserID char(20),in pEmployeeID char(20))
result(ObjID char(20),Forenames char(50),Surname char(50),Salutation char(50),Direct_Phone char(250),Mobile char(250),Email char(250),Direct_Fax char(250),Position char(100),Department char(100),Notes char(100))
begin
  declare divid char(20);
  set divid=(select first staff.divisionid from iqxnetuser key join staff where iqxnetuser.iqxnetuserid = pwebuserid);
  if divid is null then
    return
  end if;
  if isnull(pEmployeeID,'') = '' then
    select '','','','','','','','','','',''
  else
    select first
      Person.personid as ObjID,
      Person.forenames as Forenames,
      Person.surname as Surname,
      Person.salutation as Salutation,
      getphone('CP','Direct Telephone',pEmployeeID) as Direct_Phone,
      getphone('CP','Mobile',pEmployeeID) as Mobile,
      getphone('CP','E-mail',pEmployeeID) as Email,
      getphone('CP','Direct Fax',pEmployeeID) as Direct_Fax,
      employment.position as Position,
      employment.department as Department,
      employment.note as Notes
      from Person key join employment key join company
      where Person.personid = pEmployeeID and company.divisionid = divid
  end if
end]]>
  </SQLExec>
  <SQLExec ignoreerror="YES">
<![CDATA[grant execute on pears.NetOwnerEmployeeDetails to IQXNet]]>
  </SQLExec>
  <SQLExec ignoreerror="YES">
<![CDATA[drop procedure pears.NetOwnerEmployeeEdit]]>
  </SQLExec>
  <SQLExec parameters="NO" xProcName="NetOwnerEmployeeEdit">
<![CDATA[create procedure pears.NetOwnerEmployeeEdit(in pWebUserID char(20),in pObjID char(20),in pParentObject char(20),in pForenames char(50) default null,in pSurname char(50) default null,in pSalutation char(50) default null,in pDirect_Phone char(50) default null,in pMobile char(50) default null,in pEmail char(50) default null,in pDirect_Fax char(50) default null,in pPosition char(50) default null,in pDepartment char(50) default null,in pNotes char(100) default null,in pOldForenames char(50) default
null,in pOldSurname char(50) default null,in pOldSalutation char(50) default null,in pOldDirect_Phone char(50) default null,in pOldMobile char(50) default null,in pOldEmail char(50) default null,in pOldDirect_Fax char(50) default null,in pOldPosition char(50) default null,in pOldDepartment char(50) default null,in pOldNotes char(100) default null)
result(pResult char(250))
begin
  declare PersID char(20);
  declare ssql char(255);
  declare divid char(20);
  set divid=(select first staff.divisionid from iqxnetuser key join staff where iqxnetuser.iqxnetuserid = pwebuserid);
  if divid is null then
    select '99:~Permission denied';
    return
  end if;
  if IQXNetHasPermission(pWebUserID,'ADDCANDIDATES') = 0 then
    select '99:~Permission denied';
    return
  end if;
  if pForenames = '' or pSurname = '' then
    select '101:~Please ensure there is both a Forename and a Surname';
    return
  end if;
  if(pObjID = '') then
    set PersID=uniquekey(pForenames+pSurname);
    insert into person( personid,name,keyname,salutation,forenames,surname,status) values( PersID,pForenames+' '+pSurname,ucase(pForenames)+' '+ucase(pSurname),pSalutation,pForenames,pSurname,'C') ;
    insert into employment( employmentid,personid,companyid,temp) values( PersID,PersID,pParentObject,'0') 
  else
    set PersID=pObjID;
    update person set forenames = pForenames,surname = pSurname,name = pForenames+' '+pSurname,keyname = ucase(pForenames)+' '+ucase(pSurname),salutation = pSalutation where personid = PersID
  end if;
  if pNotes <> pOldNotes then
    update employment set note = pNotes where personid = PersID
  end if;
  if pPosition <> pOldPosition then
    update employment set position = pPosition where personid = PersID
  end if;
  if pDepartment <> pOldDepartment then
    update employment set department = pDepartment where personid = PersID
  end if;
  if pDirect_Phone <> pOldDirect_Phone then
    call SetPhone('CP','Direct Telephone',PersID,pDirect_Phone)
  end if;
  if pMobile <> pOldMobile then
    call SetPhone('CP','Mobile',PersID,pMobile)
  end if;
  if pEmail <> pOldEmail then
    call SetPhone('CP','E-mail',PersID,pEmail)
  end if;
  if pDirect_Fax <> pOldDirect_Fax then
    call SetPhone('CP','Direct Fax',PersID,pDirect_Fax)
  end if;
  select string('0:',PersID,'#',pParentObject,'~Success')
end]]>
  </SQLExec>
  <SQLExec ignoreerror="YES">
<![CDATA[grant execute on pears.NetOwnerEmployeeEdit to IQXNet]]>
  </SQLExec>
  <SQLExec ignoreerror="YES">
<![CDATA[drop function pears.NetOwnerJobRateList]]>
  </SQLExec>
  <SQLExec parameters="NO" xProcName="NetOwnerJobRateList">
<![CDATA[create function pears.NetOwnerJobRateList()
returns long varchar
begin
  declare rv long varchar;
  select list(string(TempPayBandID,']~[',TempPayBand.Description+' - '+TempPayBand.Unit),']~[' order by Description asc) into rv from TempPayBand;
  return rv
end]]>
  </SQLExec>
  <SQLExec ignoreerror="YES">
<![CDATA[grant execute on pears.NetOwnerJobRateList to IQXNet]]>
  </SQLExec>
  <SQLExec ignoreerror="YES">
<![CDATA[drop procedure pears.NetOwnerJobRateListOuter]]>
  </SQLExec>
  <SQLExec parameters="NO" xProcName="NetOwnerJobRateListOuter">
<![CDATA[create procedure pears.NetOwnerJobRateListOuter(in pWebUserID char(20))
result(JobRateList long varchar)
begin
  select NetOwnerJobRateList(*) as JobRateList from dummy
end]]>
  </SQLExec>
  <SQLExec ignoreerror="YES">
<![CDATA[grant execute on pears.NetOwnerJobRateListOuter to IQXNet]]>
  </SQLExec>
  <SQLExec ignoreerror="YES">
<![CDATA[drop procedure pears.NetOwnerPageTitle]]>
  </SQLExec>
  <SQLExec parameters="NO" xProcName="NetOwnerPageTitle">
<![CDATA[create procedure pears.NetOwnerPageTitle(in pWebUserID char(20))
result(PageTitle char(100))
begin
  declare divid char(20);
  set divid=(select first staff.divisionid from iqxnetuser key join staff where iqxnetuser.iqxnetuserid = pwebuserid);
  select first division.name from division where divisionid = divid
end]]>
  </SQLExec>
  <SQLExec ignoreerror="YES">
<![CDATA[grant execute on pears.NetOwnerPageTitle to IQXNet]]>
  </SQLExec>
  <SQLExec ignoreerror="YES">
<![CDATA[drop procedure pears.NetOwnerPayRateEdit]]>
  </SQLExec>
  <SQLExec parameters="NO" xProcName="NetOwnerPayRateEdit">
<![CDATA[create procedure pears.NetOwnerPayRateEdit(in pWebUserID char(20),in pVacancyID char(20),in pObjID char(20),in pCode char(20),in pParentObject char(20),in pPay_Rate char(10),in pCharge_Rate char(10),in pOldDescription char(60),in pOldUnits char(20),in pOldPay_Rate char(10),in pOldCharge_Rate char(10))
result(pResult char(250))
begin
  declare ssql char(255);
  declare divid char(20);
  declare TJobRateID char(20);
  set divid=(select first staff.divisionid from iqxnetuser key join staff where iqxnetuser.iqxnetuserid = pwebuserid);
  if divid is null then
    select '99:~Permission denied';
    return
  end if;
  set ssql='';
  if pCode = '' then
    select '100:~Please enter a valid shift type';
    return
  end if;
  if pPay_Rate = '' or(isnumeric(pPay_rate) = 0) then
    select '101:~Please enter a valid Pay Rate';
    return
  end if;
  if pCharge_Rate = '' or(isnumeric(pCharge_rate) = 0) then
    select '102:~Please enter a valid Charge Rate';
    return
  end if;
  if isnull(pPay_Rate,'') <> isnull(pOldPay_Rate,'') then
    set ssql=ssql+',payrate = pPay_Rate'
  end if;
  if(isnull(pCharge_Rate,'') <> isnull(pOldCharge_Rate,'')) then
    set ssql=ssql+',chargerate = pCharge_Rate'
  end if;
  execute immediate 'update TempJobRate set temppaybandid = pCode'+ssql+' where TempJobRateid = pObjID';
  if @@rowcount = 0 then
    set TJobRateID=uniquekey(pCode);
    insert into TempJobRate( TempJobRateID,TempPayBandID,VacancyID,payrate,Chargerate) values( TJobRateID,pCode,pVacancyID,pPay_Rate,pCharge_Rate) 
  end if;
  select '0:TJobRateID~Success'
--select string('0:',TJobRateID,'#',pParentObject,'~Success')
end]]>
  </SQLExec>
  <SQLExec ignoreerror="YES">
<![CDATA[grant execute on pears.NetOwnerPayRateEdit to IQXNet]]>
  </SQLExec>
  <SQLExec ignoreerror="YES">
<![CDATA[drop procedure pears.NetOwnerProvTimesheets]]>
  </SQLExec>
  <SQLExec parameters="NO" xProcName="NetOwnerProvTimesheets">
<![CDATA[create procedure pears.NetOwnerProvTimesheets(in pWebUserID char(20))
result(tempprovtimesheetid char(20),serialnumber char(20),tempname char(60),position char(60),companyname char(60),weekenddate date,timesheettype char(1),completed smallint)
begin
  declare divid char(20);
  set divid=(select first staff.divisionid from iqxnetuser key join staff where iqxnetuser.iqxnetuserid = pwebuserid);
  select t.tempprovtimesheetid,t.serialnumber,string(person.surname,', ',person.forenames) as tempname,vacancy.position,company.name as companyname,
    NetTimesheetEndDate(1,1,t.tempprovtimesheetid) as weekenddate,
    if NetVacancyHasRateScript(t.tempjobtypeid,t.vacancyid) = 0 then 'C'
    else if tempdesk.desktype = 'S' then 'S' else if tempdesk.desktype = 'W'
    and exists(select * from placement where placementid = t.placementid and worknormalhours is not null and workstarttime is not null
      and(isnull(workmonday,0) = 1 or isnull(worktuesday,0) = 1 or isnull(workwednesday,0) = 1 or isnull(workthursday,0) = 1 or isnull(workfriday,0) = 1
      or isnull(worksaturday,0) = 1 or isnull(worksunday,0) = 1)) then 'T'
    else 'C'
    endif
    endif
    endif as timesheettype,if t.extnumber = 2 then 1 else 0
    endif as completed from tempprovtimesheet as t key join vacancy key join employment key join company
    ,tempprovtimesheet as t key join tempdesk
    ,tempprovtimesheet as t key join person
    where person.divisionid = divid and company.divisionid = divid and t.extnumber > 0
    and weekenddate > current date-60 order by
    weekenddate asc,t.serialnumber asc,companyname asc
end]]>
  </SQLExec>
  <SQLExec ignoreerror="YES">
<![CDATA[grant execute on pears.NetOwnerProvTimesheets to IQXNet]]>
  </SQLExec>
  <SQLExec ignoreerror="YES">
<![CDATA[drop procedure pears.NetOwnerRateDetails]]>
  </SQLExec>
  <SQLExec parameters="NO" xProcName="NetOwnerRateDetails">
<![CDATA[create procedure pears.NetOwnerRateDetails(in pWebUserId char(20),in pTempJobTypeID char(20))
result(ObjID char(20),TempPayBandID char(20),Description char(50),Units char(20),Pay_Rate char(10),Charge_Rate char(10))
begin
  declare divid char(20);
  set divid=(select first staff.divisionid from iqxnetuser key join staff where iqxnetuser.iqxnetuserid = pwebuserid);
  if divid is null then
    return
  end if;
  if isnull(pTempJobTypeID,'') = '' then
    select 'New','','','',''
  else
    select r.TempJobRateID as ObjID,
      b.TempPayBandID as TempPayBandID,
      b.Description as Description,
      b.Unit as Units,
      trim(str(r.payrate,12,2)) as Pay_Rate,
      trim(str(r.chargerate,12,2)) as Charge_Rate
      from TempJobRate as r key join TempPayBand as b key join vacancy key join employment key join company
      where r.vacancyid = pTempJobTypeID and company.divisionid = divid
  end if
end]]>
  </SQLExec>
  <SQLExec ignoreerror="YES">
<![CDATA[grant execute on pears.NetOwnerRateDetails to IQXNet]]>
  </SQLExec>
  <SQLExec ignoreerror="YES">
<![CDATA[drop procedure pears.NetOwnerTimesheetCandidateSearch]]>
  </SQLExec>
  <SQLExec parameters="NO" xProcName="NetOwnerTimesheetCandidateSearch">
<![CDATA[create procedure pears.NetOwnerTimesheetCandidateSearch(in pWebUserID char(20),in SearchValue char(20) default '%')
result(PersonID char(20),Name char(61),Address char(82))
begin
  declare DivID char(20);
  declare CurrentStates char(30);
  set DivID=(select first staff.divisionid from iqxnetuser key join staff where iqxnetuser.iqxnetuserid = pWebUserID);
  set CurrentStates=string('[',(select first PersonCurrentStates from params),']');
  set SearchValue=replace(SearchValue,'*','%');
  select person.personid as PersonID,
    person.forenames+' '+person.surname as Name,
    GetPersonAddressOnLine(person.personid) as Address
    from person
    where person.divisionid = DivID and person.status like CurrentStates and person.keyname like SearchValue+'%' order by
    KeyName asc
end]]>
  </SQLExec>
  <SQLExec ignoreerror="YES">
<![CDATA[grant execute on pears.NetOwnerTimesheetCandidateSearch to IQXNet]]>
  </SQLExec>
  <SQLExec ignoreerror="YES">
<![CDATA[drop procedure pears.NetOwnerTimesheetCreate]]>
  </SQLExec>
  <SQLExec parameters="NO" xProcName="NetOwnerTimesheetCreate">
<![CDATA[create procedure pears.NetOwnerTimesheetCreate(in pWebUserID char(20),in pStartDate char(25),in pLineData long varchar)
result(AcName char(60),SiteAddr char(150),JobTitle char(60),TempName char(60),PayBand char(100),Units double,TimesheetNumber char(20))
begin
  declare provtsid char(20);
  declare persid char(20);
  declare vacid char(20);
  declare rateid char(20);
  declare deskid char(20);
  declare divid char(20);
  declare perd integer;
  declare lineid char(20);
  declare bandid char(20);
  declare lineno integer;
  declare nUnits double;
  declare nPayrate double;
  declare nChargerate double;
  declare chained char(3);
  declare checkval char(50);
  declare startdate date;
  declare errmsg char(60);
  declare thisline char(150);
  declare i integer;
  declare cnt integer;
  declare cr char(1);
  declare tab char(1);
  declare local temporary table IDs(
    ID char(20) null,
    RowCnt integer null,
    Msg char(50) null,
    ) not transactional;
  set chained=(select connection_property('chained'));
  set errmsg=null;
  set cr="char"(13);
  set tab="char"(9);
  set checkval='.';
  set startdate=iqxnetstringtodate(pStartDate);
  if startdate is null then
    set errmsg='Invalid start date'
  else
    if abs(datediff(week,current date,startdate)) > 5 then
      set errmsg='Start date out of range'
    else
      set perd=weekcontaining(startdate);
      if perd is null then
        set errmsg='Payroll week out of range'
      end if
    end if
  end if;
  set divid=(select first staff.divisionid from iqxnetuser key join staff where iqxnetuser.iqxnetuserid = pwebuserid);
  if divid is null then
    set errmsg='No staff division set'
  end if;
  set deskid=(select first staff.tempdeskid from iqxnetuser key join staff where iqxnetuser.iqxnetuserid = pwebuserid);
  if deskid is null then
    set errmsg='No staff temp desk set'
  end if;
  if errmsg is not null then
    select errmsg,null,null,null,null,null;
    return
  end if;
  set Cnt=0;
  outerloop: loop
    set i=charindex(cr,plinedata);
    if i = 0 then
      leave outerloop
    end if;
    set thisline="left"(plinedata,i-1);
    set plinedata=stuff(plinedata,1,i,null);
    set errmsg=null;
    set Cnt=Cnt+1;
    set LineID=uniquekey(Cnt);
    set i=charindex(tab,thisline);
    if i = 0 then
      set vacid=null
    else
      set vacid="left"(thisline,i-1);
      set thisline=stuff(thisline,1,i,null);
      set vacid=(select first vacancy.vacancyid from vacancy key join employment key join company where vacancy.vacancyid = vacid and company.divisionid = divid);
      if vacid is null then
        set errmsg='Invalid vacancy ID'
      end if
    end if;
    set i=charindex(tab,thisline);
    if i = 0 then
      set persid=null
    else
      set persid="left"(thisline,i-1);
      set thisline=stuff(thisline,1,i,null);
      set persid=(select first personid from person where personid = persid and divisionid = divid);
      if persid is null then
        set errmsg=isnull(errmsg,'Invalid person ID')
      end if
    end if;
    set i=charindex(tab,thisline);
    if i = 0 then
      set rateid=null
    else
      set rateid="left"(thisline,i-1);
      set thisline=stuff(thisline,1,i,null);
      set bandid=null;
      select temppaybandid,payrate,chargerate into bandid,npayrate,nchargerate from tempjobrate where tempjobrateid = rateid and vacancyid = vacid;
      if bandid is null then
        set errmsg=isnull(errmsg,'Invalid rate ID')
      end if
    end if;
    begin
      set nunits=cast(trim(thisline) as double)
    exception
      when others then set errmsg=isnull(errmsg,'Invalid unit value')
    end;
    insert into IDs( ID,RowCnt,msg) values( LineID,Cnt,errmsg) ;
    if errmsg is null then
      if vacid+persid <> checkval then
        set lineno=0;
        set provtsid=uniquekey(checkval);
        set checkval=vacid+persid;
        insert into TempProvTimeSheet( TempProvTimeSheetID,PersonID,VacancyID,TempDeskID,Period,PeriodLength,ExtNumber,TheirRef) 
          values( provtsid,persid,vacid,deskid,perd,'W',2,null) ;
        if chained = 'On' then
          begin atomic
            call NetNumberProvTimesheet(provtsid)
          end
        else
          call NetNumberProvTimesheet(provtsid)
        end if
      end if;
      set lineno=lineno+1;
      insert into TempProvTimesheetLine( TempProvTimeSheetLineID,TempProvTimeSheetID,TempPayBandID,LineNumber,UnitsPaid,UnitsCharged,PayRate,ChargeRate) 
        values( lineid,provtsid,bandid,lineno,nUnits,nUnits,nPayrate,nChargeRate) 
    end if
  end loop outerloop;
  select isnull((select name from company where companyid = getinvoicecompanyid(co.clientcode)),ids.msg) as acname,string(co.name,', ',co.addr1) as siteaddr,vacancy.position,person.name,
    string((select Description from temppayband where temppaybandid = l.temppaybandid),' ',trim(str(l.payrate,12,2)),'/',trim(str(l.chargerate,12,2))) as payband,l.unitspaid,t.serialnumber
    from ids left outer join tempprovtimesheetline as l on ids.id = l.tempprovtimesheetlineid key join tempprovtimesheet as t key join(person,(vacancy key join employment key join company as co)) order by
    ids.rowcnt asc
end]]>
  </SQLExec>
  <SQLExec ignoreerror="YES">
<![CDATA[grant execute on pears.NetOwnerTimesheetCreate to IQXNet]]>
  </SQLExec>
  <SQLExec ignoreerror="YES">
<![CDATA[drop function pears.NetOwnerTimesheetLists]]>
  </SQLExec>
  <SQLExec parameters="NO" xProcName="NetOwnerTimesheetLists">
<![CDATA[create function pears.NetOwnerTimesheetLists(in WebUser char(20),in ListType char(23))
returns long varchar
begin
  declare rv long varchar;
  select list(string('<option value="',ObjectID,'">',ObjectName),'</option>' order by ObjectName asc) into rv from NetOwnerTreeSource(WebUser,ListType);
  return rv
end]]>
  </SQLExec>
  <SQLExec ignoreerror="YES">
<![CDATA[grant execute on pears.NetOwnerTimesheetLists to IQXNet]]>
  </SQLExec>
  <SQLExec ignoreerror="YES">
<![CDATA[drop procedure pears.NetOwnerTimesheetListsOuter]]>
  </SQLExec>
  <SQLExec parameters="NO" xProcName="NetOwnerTimesheetListsOuter">
<![CDATA[create procedure pears.NetOwnerTimesheetListsOuter(in pWebUserID char(20),in ListType char(23))
result(TimesheetList long varchar)
begin
  select NetOwnerTimesheetLists(pWebUserID,ListType) as TimesheetList from dummy
end]]>
  </SQLExec>
  <SQLExec ignoreerror="YES">
<![CDATA[grant execute on pears.NetOwnerTimesheetListsOuter to IQXNet]]>
  </SQLExec>
  <SQLExec ignoreerror="YES">
<![CDATA[drop procedure pears.NetOwnerTreeSource]]>
  </SQLExec>
  <SQLExec parameters="NO" xProcName="NetOwnerTreeSource">
<![CDATA[create procedure pears.NetOwnerTreeSource(in pWebUserID char(20),in pParentID char(23))
result(ObjectID char(23),ObjectName char(100),IsLeaf tinyint)
begin
  declare ParentType char(2);
  declare ParentID char(20);
  declare DivID char(20);
  declare persid char(20);
  set DivID=(select first staff.divisionid from iqxnetuser key join staff where iqxnetuser.iqxnetuserid = pwebuserid);
  set ParentType=substring(pParentID,1,2);
  set ParentID=substring(pParentID,4,20);
  if DivID is null then
    return
  end if;
  if(ParentType = '0') then
    select 'AC_New' as ObjectID,'**New Account' as ObjectName,1 as IsLeaf from dummy union
    select 'AC_'+clientcode as ObjectID,name as ObjectName,0 as IsLeaf
      from company
      where isnull(status,'') <> '.' and divisionid = DivID and trim(isnull(ClientCode,'')) <> '' and InvoiceAddress = 1
  else if(ParentType = 'AC') then
      select 'CO_'+companyid as ObjectID,string(name,', ',addr1) as ObjectName,
        if exists(select * from employment
          where employment.companyid = substring(ObjectID,4))
        then 0
        else 1
        endif as IsLeaf
        from company
        where isnull(status,'') <> '.' and divisionid = DivID and ClientCode = ParentID order by //and isnull(InvoiceAddress,0)=0 
        keyname asc
    else if(ParentType = 'CO') then
        select 'CX_'+ParentID as ObjectID,'**All Vacancies' as ObjectName,0 as IsLeaf from person union
        select 'EM_'+employment.employmentid as ObjectID,person.name as ObjectName,
          if exists(select * from vacancy key join employment key join company
            where employment.employmentid = substring(ObjectID,4) and isnull(employment.temp,0) = 0 and(employment.leavedate is null or employment.leavedate > current date)
            and(vacancy.finishdate is null or vacancy.finishdate > current date))
          then 0
          else 1
          endif as IsLeaf
          from employment key join(person,company)
          where company.divisionid = DivID and employment.companyid = ParentID and isnull(employment.temp,0) = 0 and(employment.leavedate is null or employment.leavedate > current date)
      else if(ParentType = 'CX') then -- used by Timesheet page to gather all vacancies for all employees
          select 'VA_'+vacancy.vacancyid as ObjectID,string(trim(vacancy.position),' (',trim(person.surname),')') as ObjectName,0 as IsLeaf
            from vacancy key join employment key join(company,person)
            where company.divisionid = DivID and vacancy.employmentid = any(select employment.employmentid
              from employment key join(person,company)
              where company.divisionid = DivID and employment.companyid = ParentID and isnull(employment.temp,0) = 0 and(employment.leavedate is null or employment.leavedate > current date))
            and(vacancy.finishdate is null or vacancy.finishdate > current date) order by
            vacancy.position asc
        else if(ParentType = 'EM') then
            select 'VA_'+vacancy.vacancyid as ObjectID,vacancy.position as ObjectName,
              if exists(select * from TempJobRate as r key join TempPayBand as b
                where r.vacancyid = substring(ObjectID,4) and(r.enddate is null or r.enddate > current date))
              then 0
              else 1
              endif as IsLeaf
              from vacancy key join employment key join company
              where company.divisionid = DivID and vacancy.employmentid = ParentID and(vacancy.finishdate is null or vacancy.finishdate > current date) order by
              vacancy.position asc
          else if(ParentType = 'VA') then
              select 'XX_'+r.TempJobRateID as ObjectID,string(b.Description,' ',trim(str(r.payrate,12,2)),'/',trim(str(r.chargerate,12,2))) as ObjectName,1 as IsLeaf
                from TempJobRate as r key join TempPayBand as b
                where r.vacancyid = ParentID and(r.enddate is null or r.enddate > current date) order by
                b.sortorder asc
            end if
          end if
        end if
      end if
    end if
  end if
end]]>
  </SQLExec>
  <SQLExec ignoreerror="YES">
<![CDATA[grant execute on pears.NetOwnerTreeSource to IQXNet]]>
  </SQLExec>
  <SQLExec ignoreerror="YES">
<![CDATA[drop procedure pears.NetOwnerVacancyDetails]]>
  </SQLExec>
  <SQLExec parameters="NO" xProcName="NetOwnerVacancyDetails">
<![CDATA[create procedure pears.NetOwnerVacancyDetails(in pWebUserID char(20),in pVacancyID char(20))
result(ObjID char(20),Position char(50),Their_Ref char(50),Start_Date__DT date,Finish_Date__DT date,Expiry_Date__DT date,Our_Ref char(20),Contract_Ref char(20),Notes long varchar)
begin
  declare divid char(20);
  set divid=(select first staff.divisionid from iqxnetuser key join staff where iqxnetuser.iqxnetuserid = pwebuserid);
  if divid is null then
    return
  end if;
  if isnull(pVacancyID,'') = '' then
    select '','','',null,null,null,'','',''
  else
    select vacancy.vacancyid as ObjID,
      vacancy.position as Position,
      vacancy.TheirRef as Their_Ref,
      vacancy.startdate as Start_Date__DT,
      vacancy.FinishDate as Finish_Date__DT,
      vacancy.expiry as Expiry_Date__DT,
      vacancy.refcode as Our_Ref,
      vacancy.ContractRef as Contract_Ref,
      vacancy.othernotes as Notes
      from vacancy key join employment key join company
      where vacancyid = pVacancyID and company.divisionid = divid
  end if
end]]>
  </SQLExec>
  <SQLExec ignoreerror="YES">
<![CDATA[grant execute on pears.NetOwnerVacancyDetails to IQXNet]]>
  </SQLExec>
  <SQLExec ignoreerror="YES">
<![CDATA[drop procedure pears.NetOwnerVacancyEdit]]>
  </SQLExec>
  <SQLExec parameters="NO" xProcName="NetOwnerVacancyEdit">
<![CDATA[create procedure pears.NetOwnerVacancyEdit(in pWebUserID char(20),in pObjID char(20),in pParentObject char(20),in pPosition char(50),in pTheir_Ref char(50),in pStart_Date__DT char(20) default null,in pFinish_Date__DT char(20) default null,in pExpiry_Date__DT char(20) default null,in pOur_Ref char(20),in pContract_Ref char(20),in pNotes long varchar,in pOldPosition char(50),in pOldTheir_Ref char(50),in pOldStart_Date__DT char(20) default
null,in pOldFinish_Date__DT char(20) default null,in pOldExpiry_Date__DT char(20) default null,in pOldOur_Ref char(20),in pOldContract_Ref char(20),in pOldNotes long varchar)
result(pResult char(250))
begin
  declare VacID char(20);
  declare @deptID char(20);
  declare @PayrollCompanyID char(20);
  declare @DivisionID char(20);
  declare @TempdeskID char(20);
  set @DivisionID=(select first staff.divisionid from iqxnetuser key join staff where iqxnetuser.iqxnetuserid = pWebUserID);
  if @DivisionID is null then
    select '99:~Permission denied';
    return
  end if;
  set @TempdeskID=(select first staff.tempdeskid from iqxnetuser key join staff where iqxnetuser.iqxnetuserid = pWebUserID);
  if length(trim(pPosition)) = 0 then
    select '101:~Please ensure the Position field is filled';
    return
  end if;
  if length(trim(pObjID)) = 0 then
    set VacID=uniquekey(pPosition);
    set @PayrollCompanyID=(select DefPayrollCoID from Division where divisionid = @DivisionID);
    set @deptID=(select defaultdepartid from staff where staffid = (select first staff.staffid from iqxnetuser key join staff where iqxnetuser.iqxnetuserid = pWebUserID));
    insert into vacancy( vacancyid,position,departmentid,employmentid,status,PayrollIdentifier,temp,tempdeskID) values( VacID,pPosition,@deptID,pParentObject,'C',@PayrollCompanyID,1,@TempdeskID) 
  else
    set VacID=pObjID;
    update vacancy set position = pPosition where vacancyid = VacID
  end if;
  update vacancy set TheirRef = pTheir_Ref where vacancyid = VacID;
  if pStart_Date__DT > '' then
    update vacancy set startdate = substr(pStart_Date__DT,11,4)+'/'+substr(pStart_Date__DT,8,2)+'/'+substr(pStart_Date__DT,5,2) where vacancyid = VacID
  else
    update vacancy set startdate = null where vacancyid = VacID
  end if;
  if pFinish_Date__DT > '' then
    update vacancy set finishdate = substr(pFinish_Date__DT,11,4)+'/'+substr(pFinish_Date__DT,8,2)+'/'+substr(pFinish_Date__DT,5,2) where vacancyid = VacID
  else
    update vacancy set finishdate = null where vacancyid = VacID
  end if;
  if pExpiry_Date__DT > '' then
    update vacancy set expiry = substr(pExpiry_Date__DT,11,4)+'/'+substr(pExpiry_Date__DT,8,2)+'/'+substr(pExpiry_Date__DT,5,2) where vacancyid = VacID
  else
    update vacancy set expiry = null where vacancyid = VacID
  end if;
  update vacancy set refcode = pOur_Ref where vacancyid = VacID;
  update vacancy set Contractref = pContract_Ref where vacancyid = VacID;
  update vacancy set othernotes = pNotes where vacancyid = VacID;
  select string('0:',VacID,'#',pParentObject,'~Success')
end]]>
  </SQLExec>
  <SQLExec ignoreerror="YES">
<![CDATA[grant execute on pears.NetOwnerVacancyEdit to IQXNet]]>
  </SQLExec>
  <SQLExec ignoreerror="YES">
<![CDATA[drop procedure pears.NetPersonProfile]]>
  </SQLExec>
  <SQLExec parameters="NO" xProcName="NetPersonProfile">
<![CDATA[create procedure pears.NetPersonProfile(in pWebUserID char(20))
result(personid char(20),dob date,homephone char(250),email char(250))
begin
  select first person.personid,person.dob,getphone('P','Home Telephone',person.personid),getphone('P','E-mail',person.personid)
    from person key join iqxnetuserlink key join iqxnetuser where iqxnetuser.iqxnetuserid = pWebUserID
end]]>
  </SQLExec>
  <SQLExec ignoreerror="YES">
<![CDATA[grant execute on pears.NetPersonProfile to IQXNet]]>
  </SQLExec>
  <SQLExec ignoreerror="YES">
<![CDATA[drop procedure pears.NetPersonProfileSet]]>
  </SQLExec>
  <SQLExec parameters="NO" xProcName="NetPersonProfileSet">
<![CDATA[create procedure pears.NetPersonProfileSet(in pWebUserID char(20),in ppersonid char(20),in pdob char(20) default 'NOT-SET',in phomephone char(250) default 'NOT-SET',in pemail char(250) default 'NOT-SET',in pOLDdob char(20) default 'NOT-SET',in pOLDhomephone char(250) default 'NOT-SET',in pOLDemail char(250) default 'NOT-SET')
result(pResult char(250))
begin
  declare dateofbirth date;
  if not ppersonid = any(select personid from iqxnetuserlink where iqxnetuserid = pwebuserid) then
    select '99:~Permission denied';
    return
  end if;
  if isnull(pdob,'') <> isnull(pOLDdob,'') then
    set dateofbirth=IQXNetStringToDate(pdob);
    if trim(isnull(pdob,'')) <> '' and dateofbirth is null then
      select '1:~Invalid date of birth';
      return
    end if;
    update person set dob = dateofbirth where personid = ppersonid
  end if;
  if isnull(phomephone,'') <> isnull(pOLDhomephone,'') then
    call setphone('P','Home Telephone',ppersonid,phomephone)
  end if;
  if isnull(pemail,'') <> isnull(pOLDemail,'') then
    call setphone('P','E-mail',ppersonid,pemail);
    update iqxnetuserlink key join iqxnetuser set iqxnetuser.emailaddress = pemail where iqxnetuserlink.personid = ppersonid
  end if;
  select '0:~Success'
end]]>
  </SQLExec>
  <SQLExec ignoreerror="YES">
<![CDATA[grant execute on pears.NetPersonProfileSet to IQXNet]]>
  </SQLExec>
  <SQLExec ignoreerror="YES">
<![CDATA[drop procedure pears.NetPersonShifts]]>
  </SQLExec>
  <SQLExec parameters="NO" xProcName="NetPersonShifts">
<![CDATA[create procedure pears.NetPersonShifts(in pWebUserID char(20))
result(Position char(50),Company char(60),ShiftDate date,TimeFrom time,TimeTo time,BreakMinutes smallint,State char(1),Description char(50),TheirRef char(20),TempShiftID char(20),Note char(20),OrderedBy char(20),ConfirmedWith char(20))
begin
  select vacancy.Position,
    company.name as Company,
    TempShift.ShiftDate,
    TempShift.TimeFrom,
    TempShift.TimeTo,
    TempShift.BreakMinutes,
    TempShift.State,
    tempshiftplan.Description,
    isnull(tempshift.referencecode,tempshiftplan.referencecode) as TheirRef,
    tempshift.tempshiftid,
    TempShift.Note,
    tempshiftplan.OrderedBy,
    tempshift.ConfirmedWith
    from tempshift key left outer join tempshiftplan
    ,tempshift key join person
    ,tempshift key join vacancy key join employment key join company
    where person.personid = any(select personid from iqxnetuserlink where iqxnetuserid = pWebUserID) order by
    --and tempshift.shiftdate >= current date 
    TempShift.ShiftDate asc,TempShift.TimeFrom asc
end]]>
  </SQLExec>
  <SQLExec ignoreerror="YES">
<![CDATA[grant execute on pears.NetPersonShifts to IQXNet]]>
  </SQLExec>
  <SQLExec ignoreerror="YES">
<![CDATA[drop procedure pears.NetProvTimesheetComplete]]>
  </SQLExec>
  <SQLExec parameters="NO" xProcName="NetProvTimesheetComplete">
<![CDATA[create procedure pears.NetProvTimesheetComplete(in pWebUserID char(20),in ptempprovtimesheetid char(20),in pInstruction char(20) default null)
result(pResult char(250))
begin
  declare oldstat smallint;
  declare newstat smallint;
  declare statdesc char(30);
  declare userClass char(20);
  declare divid char(20);
  declare local temporary table IDs(
    ID char(20) null,
    ) not transactional;
  set userClass=(select first iqxnetuserclassid from iqxnetuser where iqxnetuserid = pWebUserID);
  if userClass = 'OWNER' then
    insert into IDs( ID) 
      select distinct s.divisionid from iqxnetuser as i key join staff as s where i.iqxnetuserid = pwebuserid;
    if not ptempprovtimesheetid = any(select t.tempprovtimesheetid from tempprovtimesheet as t key join person as p join IDs on p.divisionid = IDs.ID) then
      select '99:~Permission denied';
      return
    end if
  else
    if not ptempprovtimesheetid = any(select t.tempprovtimesheetid
        from tempprovtimesheet as t key join person key join pay_employee key join company as agcomp key join employment as agemp key join iqxnetuserlink
        where iqxnetuserlink.iqxnetuserid = pwebuserid union
      select t.tempprovtimesheetid
        from tempprovtimesheet as t key join person key join iqxnetuserlink
        where iqxnetuserlink.iqxnetuserid = pwebuserid union
      select t.tempprovtimesheetid from tempprovtimesheet as t key join vacancy key join employment as vacemp key join company key join employment key join iqxnetuserlink
        where iqxnetuserlink.iqxnetuserid = pwebuserid) then
      select '99:~Permission denied';
      return
    end if
  end if;
  if ucase(isnull(pInstruction,'')) = 'REVERSE' then
    set newstat=1;
    set oldstat=2;
    set statdesc='Timesheet Un-filled'
  else
    set newstat=2;
    set oldstat=1;
    set statdesc='Timesheet Filled'
  end if;
  update tempprovtimesheet set extnumber = newstat where tempprovtimesheetid = ptempprovtimesheetid;
  if @@rowcount = 1 then
    insert into tempprovtimesheethistory( tempprovtimesheethistoryid,tempprovtimesheetid,serialnumber,description,oldstatus,newstatus,staffid,whenentered,externaluserid) 
      select uniquekey(ptempprovtimesheetid),ptempprovtimesheetid,serialnumber,statdesc,oldstat,newstat,userstaffid,current timestamp,pwebuserid from tempprovtimesheet where tempprovtimesheetid = ptempprovtimesheetid;
    select '0:~Success'
  else
    select '98:~Timesheet already finalised or deleted'
  end if
end]]>
  </SQLExec>
  <SQLExec ignoreerror="YES">
<![CDATA[grant execute on pears.NetProvTimesheetComplete to IQXNet]]>
  </SQLExec>
  <SQLExec ignoreerror="YES">
<![CDATA[drop procedure pears.NetProvTimesheetRates]]>
  </SQLExec>
  <SQLExec parameters="NO" xProcName="NetProvTimesheetRates">
<![CDATA[create procedure pears.NetProvTimesheetRates(in pWebUserID char(20),in pTempProvTimesheetID char(20))
result(TempProvTimesheetLineID char(20),IsExpenses smallint,BandDescription char(50),UnitDescription char(100),Units decimal(12,2),Rate decimal(12,2),Total decimal(12,2),CanEditUnits smallint,CanEdit smallint,Rate2 decimal(12,2),Total2 decimal(12,2))
begin
  declare userclass char(20);
  set userclass=(select first iqxnetuserclassid from iqxnetuser where iqxnetuserid = pWebUserID);
  if userclass = 'CLIENT' then
    select TempProvTimesheetLine.TempProvTimesheetLineID,
      (if isnull(temppayband.payrollflag,'') = 'EXPENSES' or isnull(temppayband.isexpenses,0) = 1 then 1 else 0
      endif) as IsExpenses,temppayband.description,
      (if IsExpenses = 1 then tempprovtimesheetline.description else temppayband.unit
      endif),nullif(tempprovtimesheetline.unitscharged,0.0) as units,nullif(tempprovtimesheetline.chargerate,0.0) as rate,isnull(units*rate,0.0) as total,
      (if units is null or isnull(tempprovtimesheetline.description,'') = 'Units Edited' or NetVacancyHasRateScript(t.tempjobtypeid,t.vacancyid) = 0 then 1 else 0
      endif) as CanEditUnits,(if IsExpenses = 1 or CanEditUnits = 1 then 1 else 0
      endif) as CanEdit,null,null
      from tempprovtimesheetline key join(temppayband,tempprovtimesheet as t)
      where tempprovtimesheetline.tempprovtimesheetid = pTempProvTimesheetID order by
      tempprovtimesheetline.linenumber asc
  else
    if userclass = 'OWNER' then
      select TempProvTimesheetLine.TempProvTimesheetLineID,
        (if isnull(temppayband.payrollflag,'') = 'EXPENSES' or isnull(temppayband.isexpenses,0) = 1 then 1 else 0
        endif) as IsExpenses,temppayband.description,
        (if IsExpenses = 1 then tempprovtimesheetline.description else temppayband.unit
        endif),nullif(tempprovtimesheetline.unitspaid,0.0) as units,nullif(tempprovtimesheetline.payrate,0.0) as rate,isnull(units*rate,0.0) as total,
        (if units is null or isnull(tempprovtimesheetline.description,'') = 'Units Edited' or NetVacancyHasRateScript(t.tempjobtypeid,t.vacancyid) = 0 then 1 else 0
        endif) as CanEditUnits,(if IsExpenses = 1 or CanEditUnits = 1 then 1 else 0
        endif) as CanEdit,nullif(tempprovtimesheetline.chargerate,0.0) as rate2,isnull(units*rate2,0.0) as total2
        from tempprovtimesheetline key join(temppayband,tempprovtimesheet as t)
        where tempprovtimesheetline.tempprovtimesheetid = pTempProvTimesheetID order by
        tempprovtimesheetline.linenumber asc
    else
      select TempProvTimesheetLine.TempProvTimesheetLineID,
        (if isnull(temppayband.payrollflag,'') = 'EXPENSES' or isnull(temppayband.isexpenses,0) = 1 then 1 else 0
        endif) as IsExpenses,temppayband.description,
        (if IsExpenses = 1 then tempprovtimesheetline.description else temppayband.unit
        endif),nullif(tempprovtimesheetline.unitspaid,0.0) as units,nullif(tempprovtimesheetline.payrate,0.0) as rate,isnull(units*rate,0.0) as total,
        (if units is null or isnull(tempprovtimesheetline.description,'') = 'Units Edited' or NetVacancyHasRateScript(t.tempjobtypeid,t.vacancyid) = 0 then 1 else 0
        endif) as CanEditUnits,(if IsExpenses = 1 or CanEditUnits = 1 then 1 else 0
        endif) as CanEdit,null,null
        from tempprovtimesheetline key join(temppayband,tempprovtimesheet as t)
        where tempprovtimesheetline.tempprovtimesheetid = pTempProvTimesheetID order by
        tempprovtimesheetline.linenumber asc
    end if
  end if
end]]>
  </SQLExec>
  <SQLExec ignoreerror="YES">
<![CDATA[grant execute on pears.NetProvTimesheetRates to IQXNet]]>
  </SQLExec>
  <SQLExec ignoreerror="YES">
<![CDATA[drop procedure pears.NetProvTimesheetRateSet]]>
  </SQLExec>
  <SQLExec parameters="NO" xProcName="NetProvTimesheetRateSet">
<![CDATA[create procedure pears.NetProvTimesheetRateSet(in pWebUserID char(20),in pTempProvTimesheetLineID char(250),in pUnitDescription char(250) default null,in pUnits char(250) default null,in pRate char(250) default null)
result(pResult char(250))
begin
  declare i smallint;
  declare isnewline smallint;
  declare newlineid char(20);
  declare ptempprovtimesheetid char(20);
  declare userClass char(20);
  declare divid char(20);
  declare local temporary table IDs(
    ID char(20) null,
    ) not transactional;
  if pTempProvTimesheetLineID like 'Copy%' then
    set isnewline=1
  else
    set isnewline=0
  end if;
  set i=charindex('_',pTempProvTimesheetLineID);
  if i > 0 then
    set pTempProvTimesheetLineID="right"(pTempProvTimesheetLineID,length(pTempProvTimesheetLineID)-i)
  end if;
  set ptempprovtimesheetid=(select first tempprovtimesheetid from tempprovtimesheetline where tempprovtimesheetlineid = pTempProvTimesheetLineID);
  set userClass=(select first iqxnetuserclassid from iqxnetuser where iqxnetuserid = pWebUserID);
  if userClass = 'OWNER' then
    insert into IDs( ID) 
      select distinct s.divisionid from iqxnetuser as i key join staff as s where i.iqxnetuserid = pwebuserid;
    if not ptempprovtimesheetid = any(select t.tempprovtimesheetid from tempprovtimesheet as t key join person as p join IDs on p.divisionid = IDs.ID) then
      select '99:~Permission denied';
      return
    end if
  else
    if not ptempprovtimesheetid = any(select t.tempprovtimesheetid
        from tempprovtimesheet as t key join person key join pay_employee key join company as agcomp key join employment as agemp key join iqxnetuserlink
        where iqxnetuserlink.iqxnetuserid = pwebuserid union
      select t.tempprovtimesheetid
        from tempprovtimesheet as t key join person key join iqxnetuserlink
        where iqxnetuserlink.iqxnetuserid = pwebuserid union
      select t.tempprovtimesheetid from tempprovtimesheet as t key join vacancy key join employment as vacemp key join company key join employment key join iqxnetuserlink
        where iqxnetuserlink.iqxnetuserid = pwebuserid) then
      select '99:~Permission denied';
      return
    end if
  end if;
  if isnewline = 1 then
    set newlineid=uniquekey(pTempProvTimesheetLineID);
    insert into tempprovtimesheetline( tempprovtimesheetlineid,tempprovtimesheetid,temppaybandid,linenumber,unitspaid,unitscharged,payrate,chargerate,
      description) select newlineid,ptempprovtimesheetid,temppaybandid,
        isnull((select 1+max(linenumber) from tempprovtimesheetline where tempprovtimesheetid = ptempprovtimesheetid),1),
        isnull(punits,unitspaid),isnull(punits,unitscharged),isnull(prate,payrate),isnull(prate,chargerate),
        isnull(punitdescription,nullif(trim(description),''),'Units Edited') from tempprovtimesheetline where tempprovtimesheetlineid = ptempprovtimesheetlineid
  else
    update tempprovtimesheetline set unitspaid = isnull(punits,unitspaid),unitscharged = isnull(punits,unitscharged),payrate = isnull(prate,payrate),chargerate = isnull(prate,chargerate),
      description = isnull(punitdescription,nullif(trim(description),''),'Units Edited') where tempprovtimesheetlineid = pTempProvTimesheetLineID
  end if;
  select '0:~Success'
end]]>
  </SQLExec>
  <SQLExec ignoreerror="YES">
<![CDATA[grant execute on pears.NetProvTimesheetRateSet to IQXNet]]>
  </SQLExec>
  <SQLExec ignoreerror="YES">
<![CDATA[drop procedure pears.NetProvTimesheetSetTheirRef]]>
  </SQLExec>
  <SQLExec parameters="NO" xProcName="NetProvTimesheetSetTheirRef">
<![CDATA[create procedure pears.NetProvTimesheetSetTheirRef(in pWebUserID char(20),in ptempprovtimesheetid char(20),in pTheirRef char(100) default null)
result(pResult char(250))
begin
  if not ptempprovtimesheetid
     = any(select t.tempprovtimesheetid from tempprovtimesheet as t key join vacancy key join employment as vacemp key join company key join employment key join iqxnetuserlink
      where iqxnetuserlink.iqxnetuserid = pwebuserid) then
    select '99:~Permission denied';
    return
  end if;
  update tempprovtimesheet set theirref = ucase(ptheirref) where tempprovtimesheetid = ptempprovtimesheetid;
  select '0:~Success'
end]]>
  </SQLExec>
  <SQLExec ignoreerror="YES">
<![CDATA[grant execute on pears.NetProvTimesheetSetTheirRef to IQXNet]]>
  </SQLExec>
  <SQLExec ignoreerror="YES">
<![CDATA[drop procedure pears.NetProvTimesheetShifts]]>
  </SQLExec>
  <SQLExec parameters="NO" xProcName="NetProvTimesheetShifts">
<![CDATA[create procedure pears.NetProvTimesheetShifts(in pWebUserID char(20),in pTempProvTimesheetID char(20))
result(tempshiftid char(20),shiftdate date,timefrom time,timeto time,breakminutes smallint,tick smallint,description char(50),weekenddate date,shiftduration double)
begin
  select s.tempshiftid,s.shiftdate,s.timefrom,s.timeto,s.breakminutes,
    (if t.extnumber = 2 then(select first 1 from tempprovtimesheetshift where tempprovtimesheetid = t.tempprovtimesheetid and tempshiftid = s.tempshiftid) else 1
    endif) as tick,p.description,weekmonthenddate(t.period,t.periodlength) as weekenddate,getshiftlength(s.timefrom,s.timeto,s.breakminutes) as shiftduration
    from tempshift as s join tempprovtimesheet as t on s.personid = t.personid and s.vacancyid = t.vacancyid
    ,tempshift as s key left outer join tempshiftplan as p
    ,tempprovtimesheet as t key join person
    where t.tempprovtimesheetid = pTempProvTimesheetID
    and t.extnumber > 0 and s.state in( 'P','B') and tick = 1
    and s.shiftdate between weekenddate-6 and weekenddate order by
    s.shiftdate asc,s.timefrom asc
end]]>
  </SQLExec>
  <SQLExec ignoreerror="YES">
<![CDATA[grant execute on pears.NetProvTimesheetShifts to IQXNet]]>
  </SQLExec>
  <SQLExec ignoreerror="YES">
<![CDATA[drop procedure pears.NetProvTimesheetShiftSet]]>
  </SQLExec>
  <SQLExec parameters="NO" xProcName="NetProvTimesheetShiftSet">
<![CDATA[create procedure pears.NetProvTimesheetShiftSet(in pWebUserID char(20),in ptempshiftid char(250),in pshiftdate char(250) default 'NOT_SET',in ptimefrom char(250) default 'NOT_SET',in ptimeto char(250) default 'NOT_SET',in pbreakminutes char(250) default 'NOT_SET')
result(pResult char(250))
begin
  declare i smallint;
  declare isnewshift smallint;
  declare newshiftid char(20);
  declare userClass char(20);
  declare divid char(20);
  declare local temporary table IDs(
    ID char(20) null,
    ) not transactional;
  if trim(pbreakminutes) = '' then
    set pbreakminutes='0'
  end if;
  if ptempshiftid like 'Copy%' then
    set isnewshift=1
  else
    set isnewshift=0
  end if;
  set i=charindex('_',ptempshiftid);
  if i > 0 then
    set ptempshiftid="right"(ptempshiftid,length(ptempshiftid)-i)
  end if;
  set userClass=(select first iqxnetuserclassid from iqxnetuser where iqxnetuserid = pWebUserID);
  if userClass = 'OWNER' then
    insert into IDs( ID) 
      select distinct s.divisionid from iqxnetuser as i key join staff as s where i.iqxnetuserid = pwebuserid;
    if not ptempshiftid = any(select s.tempshiftid from tempshift as s key join person as p join IDs on p.divisionid = IDs.ID) then
      select '99:~Permission denied';
      return
    end if
  else
    if not pTempShiftID = any(
      select t.TempShiftID from tempshift as t key join person key join iqxnetuserlink where iqxnetuserid = pwebuserid union
      select t.TempShiftID from tempshift as t key join person key join pay_employee key join company as agcomp key join employment as agemp key join iqxnetuserlink
        where iqxnetuserlink.iqxnetuserid = pwebuserid union
      select t.TempShiftID from tempshift as t key join vacancy key join employment as vacemp key join company key join employment key join iqxnetuserlink
        where iqxnetuserlink.iqxnetuserid = pwebuserid) then
      select '99:~Permission denied';
      return
    end if
  end if;
  if isnewshift = 1 then
    set newshiftid=uniquekey(ptempshiftid);
    insert into tempshiftplan( TempShiftPlanID,VacancyID,ShiftDate,TimeFrom,TimeTo,BreakMinutes,Description,EssentialSkill,EssentialSkillGradeID,ReferenceCode,
      EssentialSkillChoiceList,TempShiftTypeID,AnalysisCode,RecoveryHours) 
      select newshiftid,VacancyID,isnull(iqxnetstringtodate(pshiftdate),shiftdate),isnull(iqxnetstringtotime(ptimefrom),timefrom),
        isnull(iqxnetstringtotime(ptimeto),timeto),isnull(iqxnetstringtointeger(pbreakminutes),breakminutes),Description,EssentialSkill,EssentialSkillGradeID,'Self-booked',
        EssentialSkillChoiceList,TempShiftTypeID,AnalysisCode,RecoveryHours from tempshiftplan
        where tempshiftplanid = (select tempshiftplanid from tempshift where tempshiftid = ptempshiftid);
    insert into tempshift( TempShiftID,VacancyID,PersonID,PlacementID,ShiftDate,TimeFrom,TimeTo,BreakMinutes,State,TempShiftPlanID,EssentialSkillGradeID,ReferenceCode,
      ClientConfirmed,TempConfirmed,TempShiftTypeID,AnalysisCode,RecoveryHours) 
      select NewShiftID,VacancyID,PersonID,PlacementID,isnull(iqxnetstringtodate(pshiftdate),shiftdate),isnull(iqxnetstringtotime(ptimefrom),timefrom),
        isnull(iqxnetstringtotime(ptimeto),timeto),isnull(iqxnetstringtointeger(pbreakminutes),breakminutes),'B',NewShiftID,EssentialSkillGradeID,'Self-booked',
        1,1,TempShiftTypeID,AnalysisCode,RecoveryHours from tempshift
        where tempshiftid = ptempshiftid
  else
    update tempshift set shiftdate = isnull(iqxnetstringtodate(pshiftdate),shiftdate),timefrom = isnull(iqxnetstringtotime(ptimefrom),timefrom),
      timeto = isnull(iqxnetstringtotime(ptimeto),timeto),breakminutes = isnull(iqxnetstringtointeger(pbreakminutes),breakminutes)
      where tempshiftid = ptempshiftid
  end if;
  select '0:~Success'
end]]>
  </SQLExec>
  <SQLExec ignoreerror="YES">
<![CDATA[grant execute on pears.NetProvTimesheetShiftSet to IQXNet]]>
  </SQLExec>
  <SQLExec ignoreerror="YES">
<![CDATA[drop procedure pears.NetProvTimesheetShiftsSelect]]>
  </SQLExec>
  <SQLExec parameters="NO" xProcName="NetProvTimesheetShiftsSelect">
<![CDATA[create procedure pears.NetProvTimesheetShiftsSelect(in pWebUserID char(20),in pTempProvTimesheetID char(20),in pShiftList long varchar)
result(pResult char(250))
begin
  declare i smallint;
  declare dummy smallint;
  declare s char(30);
  declare userClass char(20);
  declare divid char(20);
  declare local temporary table IDs(
    ID char(20) null,
    ) not transactional;
  set userClass=(select first iqxnetuserclassid from iqxnetuser where iqxnetuserid = pWebUserID);
  if userClass = 'OWNER' then
    insert into IDs( ID) 
      select distinct s.divisionid from iqxnetuser as i key join staff as s where i.iqxnetuserid = pwebuserid;
    if not ptempprovtimesheetid = any(select first t.tempprovtimesheetid from tempprovtimesheet as t key join person as p join IDs on p.divisionid = IDs.ID) then
      select '99:~Permission denied';
      return
    end if
  else
    if not pTempProvTimesheetID = any(
      select t.TempProvTimesheetID from tempprovtimesheet as t key join person key join iqxnetuserlink where iqxnetuserid = pwebuserid union
      select t.TempProvTimesheetID from tempprovtimesheet as t key join person key join pay_employee key join company as agcomp key join employment as agemp key join iqxnetuserlink
        where iqxnetuserlink.iqxnetuserid = pwebuserid union
      select t.TempProvTimesheetID from tempprovtimesheet as t key join vacancy key join employment as vacemp key join company key join employment key join iqxnetuserlink
        where iqxnetuserlink.iqxnetuserid = pwebuserid) then
      select '99:~Permission denied';
      return
    end if
  end if;
  delete from tempprovtimesheetshift where tempprovtimesheetid = pTempprovtimesheetid;
  set pShiftList=replace(pShiftList,'Shift_','');
  looplabel: loop
    set i=charindex(',',pShiftList);
    if i = 0 then
      set s=pshiftlist
    else
      set s="left"(pshiftlist,i-1);
      set pshiftlist="right"(pshiftlist,length(pshiftlist)-i)
    end if;
    set s=trim(s);
    if s <> '' then
      begin
        insert into tempprovtimesheetshift( tempprovtimesheetid,tempshiftid) values( ptempprovtimesheetid,s) 
      exception
        when others then
          set dummy=0
      end
    end if;
    if i = 0 then
      leave looplabel
    end if
  end loop looplabel;
  select '0:~Success'
end]]>
  </SQLExec>
  <SQLExec ignoreerror="YES">
<![CDATA[grant execute on pears.NetProvTimesheetShiftsSelect to IQXNet]]>
  </SQLExec>
  <SQLExec ignoreerror="YES">
<![CDATA[drop procedure pears.NetProvTimesheetTimes]]>
  </SQLExec>
  <SQLExec parameters="NO" xProcName="NetProvTimesheetTimes">
<![CDATA[create procedure pears.NetProvTimesheetTimes(in pWebUserID char(20),in pTempProvTimesheetID char(20))
result(placementid char(20),weekstartdate date,shiftdate date,dayticked smallint,tickednormalhours double,hours double,timefrom time)
begin
  select p.placementid,
    weekmonthenddate(t.period,t.periodlength)-6 as weekstartdate,
    "date"(dateadd(day,r.row_num-1,weekstartdate)) as shiftdate,
    (case dow(shiftdate)-1 when 0 then p.worksunday when 1 then p.workmonday when 2 then p.worktuesday when 3 then p.workwednesday
    when 4 then p.workthursday when 5 then p.workfriday when 6 then p.worksaturday end) as dayticked,
    (if isnull(dayticked,0) = 1 then p.worknormalhours else null
    endif) as tickednormalhours,(if isnull(v.workcancelled,0) = 0 then isnull(v.workhours,tickednormalhours) else null
    endif) as hours,isnull(v.workstarttime,p.workstarttime) as timefrom
    from(placement as p left outer join placementdayvariation as v
    on p.placementid = v.placementid and v.variationdate = shiftdate)
    ,placement as p join dbo.rowgenerator as r on r.row_num between 1 and 7
    ,placement as p key join tempprovtimesheet as t
    ,placement as p key join employment as e
    where t.tempprovtimesheetid = pTempProvTimesheetID
    and shiftdate between isnull(e.startdate,shiftdate) and isnull(e.leavedate,shiftdate)
end]]>
  </SQLExec>
  <SQLExec ignoreerror="YES">
<![CDATA[grant execute on pears.NetProvTimesheetTimes to IQXNet]]>
  </SQLExec>
  <SQLExec ignoreerror="YES">
<![CDATA[drop procedure pears.NetProvTimesheetTimeSet]]>
  </SQLExec>
  <SQLExec parameters="NO" xProcName="NetProvTimesheetTimeSet">
<![CDATA[create procedure pears.NetProvTimesheetTimeSet(in pWebUserID char(20),in pplacementid_date char(250),in phours char(250) default null,in ptimefrom char(250) default null)
result(pResult char(250))
begin
  declare i smallint;
  declare pplacementid char(20);
  declare pdate date;
  declare pptime time;
  declare pphours double;
  declare pcancelled tinyint;
  declare userClass char(20);
  declare divid char(20);
  declare local temporary table IDs(
    ID char(20) null,
    ) not transactional;
  set i=locate(pplacementid_date,'_',-1);
  if i > 0 then
    set pdate=iqxnetstringtodate("right"(pplacementid_date,length(pplacementid_date)-i));
    set pplacementid="left"(pplacementid_date,i-1)
  else
    select '101:~Invalid data';
    return
  end if;
  set pphours=nullif(iqxnetstringtodouble(phours),0.0);
  if pphours is null then
    set pptime=null;
    set pcancelled=1
  else
    set pptime=iqxnetstringtotime(ptimefrom);
    set pcancelled=0
  end if;
  set userClass=(select first iqxnetuserclassid from iqxnetuser where iqxnetuserid = pWebUserID);
  if userClass = 'OWNER' then
    insert into IDs( ID) 
      select distinct s.divisionid from iqxnetuser as i key join staff as s where i.iqxnetuserid = pwebuserid;
    if not pplacementid = any(select first pl.placementid from placement as pl key join employment key join person as pe join IDs on pe.divisionid = IDs.ID) then
      select '99:~Permission denied';
      return
    end if
  else
    if not pplacementid = any(
      select p.placementid from placement as p key join employment key join person key join iqxnetuserlink where iqxnetuserid = pwebuserid union
      select p.placementid from placement as p key join employment key join person key join pay_employee key join company as agcomp key join employment as agemp key join iqxnetuserlink
        where iqxnetuserlink.iqxnetuserid = pwebuserid union
      select p.placementid from placement as p key join vacancy key join employment as vacemp key join company key join employment key join iqxnetuserlink
        where iqxnetuserlink.iqxnetuserid = pwebuserid) then
      select '99:~Permission denied';
      return
    end if
  end if;
  delete from placementdayvariation where placementid = pplacementid and variationdate = pdate;
  insert into placementdayvariation( placementid,variationdate,workstarttime,workhours,workcancelled) values( pplacementid,pdate,pptime,pphours,pcancelled) ;
  select '0:~Success'
end]]>
  </SQLExec>
  <SQLExec ignoreerror="YES">
<![CDATA[grant execute on pears.NetProvTimesheetTimeSet to IQXNet]]>
  </SQLExec>
  <SQLExec ignoreerror="YES">
<![CDATA[drop procedure pears.NetQuestionnaire]]>
  </SQLExec>
  <SQLExec parameters="NO" xProcName="NetQuestionnaire">
<![CDATA[create procedure pears.NetQuestionnaire(in pWebUserID char(20),in ptaglocation char(3),in pid char(20) default null,in pgroup smallint default null)
result(tagsortorder smallint,tagid char(3),sortX smallint,choicesortorder smallint,tagchoiceid char(4),rectype smallint,description char(100),tagtype char(1),minstep double,units char(10),required smallint,displaygroup smallint,value double,textvalue long varchar,taglocation char(3))
begin
  // sortX=0 for tags, 1 for subchoices, 2 for choices and values
  // rectype=0 for tags, 1 for choices, 2 for subchoices, 3 for values
  declare ispublic smallint;
  declare divid char(20);
  declare userclass char(20);
  if pid is null then
    set ispublic=0;
    if ptaglocation like '[PA]%' then
      set pid=(select first personid from iqxnetuserlink where iqxnetuserid = pwebuserid)
    else if ptaglocation = 'E' then
        set pid=(select first employmentid from iqxnetuserlink where iqxnetuserid = pwebuserid)
      else if ptaglocation = 'C' then
          set pid=(select first employment.companyid from iqxnetuserlink key join employment where iqxnetuserlink.iqxnetuserid = pwebuserid)
        end if
      end if
    end if
  else
    set userclass=(select first iqxnetuserclassid from iqxnetuser where iqxnetuserid = pwebuserid);
    if userclass = 'OWNER' then
      set ispublic=0; // Owner rights to all record types but they only see the data if they own the record
      set DivID=(select first staff.divisionid from iqxnetuser key join staff where iqxnetuser.iqxnetuserid = pWebUserID);
      if ptaglocation like '[PA]%' then
        set pid=(select first personid from person where personid = pid and divisionid = divid)
      else if ptaglocation = 'E' then
          set pid=(select first e.employmentid from employment as e key join company as c where e.employmentid = pid and c.divisionid = divid)
        else if ptaglocation = 'C' then
            set pid=(select first companyid from company where companyid = pid and divisionid = divid)
          end if
        end if
      end if
    else
      set ispublic=1 // Read only access to web view questions only
    end if
  end if;
  select tag.sortorder,tag.tagid,0 as sortX,cast(null as smallint),cast(null as char(4)),0 as rectype,tag.description,tag.tagtype,tag.minstep,tag.units,
    tag.required,isnull(tag.displaygroup,0) as displaygroup,cast(null as double),cast(null as long varchar),tag.taglocation
    from tag where tag.taglocation = ptaglocation and(if ispublic = 1 then tag.publiconweb else tag.publishtoweb
    endif) = 1 and(isnull(pgroup,0) = 0 or displaygroup = pgroup) union all
  select tag.sortorder,tag.tagid,3-(isnull(tagchoice.subchoice,0)+1) as sortX,tagchoice.sortorder,tagchoice.tagchoiceid,isnull(tagchoice.subchoice,0)+1 as rectype,
    tagchoice.description,null,null,null,null,isnull(tag.displaygroup,0) as displaygroup,tagchoice.value,cast(null as long varchar),null
    from tagchoice key join tag where tag.taglocation = ptaglocation and(if ispublic = 1 then tag.publiconweb else tag.publishtoweb
    endif) = 1 and isnull(tagchoice.donotpublishtoweb,0) = 0
    and(isnull(pgroup,0) = 0 or displaygroup = pgroup) union all
  select tag.sortorder,tag.tagid,2 as sortX,tagchoice.sortorder,tagchoice.tagchoiceid,3 as rectype,null,null,null,null,null,
    isnull(tag.displaygroup,0) as displaygroup,tagvalue.value,tagvalue.textvalue,null
    from tagvalue key join tag,tagvalue key left outer join tagchoice
    where tagvalue.id = pid and tag.taglocation = ptaglocation and(if ispublic = 1 then tag.publiconweb else tag.publishtoweb
    endif) = 1 and isnull(tagchoice.donotpublishtoweb,0) = 0
    and(isnull(pgroup,0) = 0 or displaygroup = pgroup) order by
    1 asc,2 asc,3 asc,4 asc,5 asc,6 asc
end]]>
  </SQLExec>
  <SQLExec ignoreerror="YES">
<![CDATA[grant execute on pears.NetQuestionnaire to IQXNet]]>
  </SQLExec>
  <SQLExec ignoreerror="YES">
<![CDATA[drop procedure pears.NetQuestSet]]>
  </SQLExec>
  <SQLExec parameters="NO" xProcName="NetQuestSet">
<![CDATA[create procedure pears.NetQuestSet(in pWebUserID char(20),in qanswers long varchar default null)
result(pResult char(250))
begin
  declare cid char(20);
  set cid=(select first employment.companyid from iqxnetuserlink key join employment where iqxnetuserlink.iqxnetuserid = pwebuserid);
  if cid is not null then
    call IQXNetSaveQuestionnaire(cid,qanswers);
    select '0:~Success'
  else
    select '1:~Company not found'
  end if
end]]>
  </SQLExec>
  <SQLExec ignoreerror="YES">
<![CDATA[grant execute on pears.NetQuestSet to IQXNet]]>
  </SQLExec>
  <SQLExec ignoreerror="YES">
<![CDATA[drop procedure pears.NetReportAgedDebtors]]>
  </SQLExec>
  <SQLExec parameters="NO" xProcName="NetReportAgedDebtors">
<![CDATA[create procedure pears.NetReportAgedDebtors(in pwebuserid char(20),in Date__D31a char(20))
/* RESULT( column_name column_type, ... ) */
begin
  declare repdate date;
  declare divid char(20);
  set repdate=iqxnetstringtodate(Date__D31a);
  set divid=(select first staff.divisionid from iqxnetuser key join staff where iqxnetuser.iqxnetuserid = pwebuserid);
  select IQAcA.AccountCode,
    IQAcA.Name,
    IQAcD.AccountingDate as AcDate,
    IQAcD.DocumentID,
    IQAcD.DocumentType as TranType,
    IQAcD.OurRef,
    IQAcD.Amount,
    IQacDocumentOutstandingAmount(IQAcD.documentid,:REPDATE) as OutStanding,
    IQAcD.XRefID as PlacementID,
    IQAcD.TheirRef,
    repdate-AcDate as Age
    from IQacDocument as IQAcD key join IQacAccount as IQacA
    where IQAcD.LedgerID = 'Sales'
    and AcDate <= "date"(:REPDATE)
    and(fullyallocated is null or fullyallocated > "date"(:REPDATE)) order by
    IQAcA.Name asc,AcDate asc
end]]>
  </SQLExec>
  <SQLExec ignoreerror="YES">
<![CDATA[grant execute on pears.NetReportAgedDebtors to IQXNet]]>
  </SQLExec>
  <SQLExec ignoreerror="YES">
<![CDATA[drop procedure pears.NetReportASAShiftFill]]>
  </SQLExec>
  <SQLExec parameters="NO" xProcName="NetReportASAShiftFill">
<![CDATA[create procedure pears.NetReportASAShiftFill(in pWebUserID char(20),in From__D char(20),in To__D char(20),in Site__XClientSite char(250))
result(Title__H char(100),CoID__H char(20),Site__1A char(100),xDate__DH date,prefilled__H integer,preunfilledcanc__H integer,preunfilled__H integer,Shifts_Added__RT integer,Filled__RT integer,Unfilled__RT integer,Fill_Percentage__RMT double)
begin
  declare pstart date;
  declare pend date;
  declare rTitle char(100);
  declare sites char(250);
  declare local temporary table Cos(
    CompanyID char(20) null,
    ) not transactional;
  set sites=string("char"(9),Site__XClientSite,"char"(9));
  insert into Cos( CompanyID) select distinct companyid from employment key join iqxnetuserlink
      where iqxnetuserid = pWebUserID and charindex(string("char"(9),companyid,"char"(9)),sites) > 0;
  set pstart=iqxnetstringtodate(From__D);
  set pend=iqxnetstringtodate(To__D);
  set rTitle=dateformat(pstart,'dd/mm/yyyy')+' - '+dateformat(pend,'dd/mm/yyyy');
  select rTitle,
    company.companyid,
    (company.name+', '+getCompanyAddressOnline(company.companyid)) as Site,
    IQXNetCompanyStartDate(Company.companyid) as NetStart,
    sum((select count(*) from tempshift as s key join tempshiftplan as p key join vacancy key join employment
      where employment.companyid = company.companyid and s.state <> 'C' and p.shiftdate between pstart and pend and p.shiftdate >= NetStart)) as ShiftsFilled,
    sum((select count(*) from tempshift as s key join tempshiftplan as p key join vacancy key join employment
      where employment.companyid = company.companyid and s.state = 'C' and s.cancelreason in( 'U','M') and p.shiftdate between pstart and pend and p.shiftdate >= NetStart)) as ShiftsUnfilledCanc,
    sum((select count(*) from tempshiftplan as p key join vacancy key join employment
      where employment.companyid = company.companyid and p.shiftdate between pstart and pend and p.shiftdate >= NetStart
      and not p.tempshiftplanid = any(select tempshiftplanid from tempshift where vacancyid = p.vacancyid and shiftdate = p.shiftdate and not(state = 'C' and crefill = 1)))) as ShiftsUnfilled,
    ShiftsFilled+ShiftsUnfilled+ShiftsUnfilledCanc as Added,
    ShiftsFilled as Filled,
    ShiftsUnfilled+ShiftsUnfilledCanc as Unfilled,
    if Added > 0 then 100.0*(1.0*Filled/Added) else 0.0
    endif as FillPercentage from company join cos on company.companyid = Cos.CompanyID
    group by grouping sets((),(rTitle,company.companyid,Site,NetStart))
end]]>
  </SQLExec>
  <SQLExec ignoreerror="YES">
<![CDATA[grant execute on pears.NetReportASAShiftFill to IQXNet]]>
  </SQLExec>
  <SQLExec ignoreerror="YES">
<![CDATA[drop procedure pears.NetReportASAShiftHours]]>
  </SQLExec>
  <SQLExec parameters="NO" xProcName="NetReportASAShiftHours">
<![CDATA[create procedure pears.NetReportASAShiftHours(in pWebUserID char(20),in From__D char(20),in To__D char(20),in Site__XClientSite char(250))
result(Title__Hr char(100),Site__1S char(100),Job__2S char(100),Shift__3S char(100),Hours__RMT double)
begin
  declare pstart date;
  declare pend date;
  declare rTitle char(100);
  declare sites char(250);
  declare local temporary table Cos(
    CompanyID char(20) null,
    ) not transactional;
  set sites=string("char"(9),Site__XClientSite,"char"(9));
  insert into Cos( CompanyID) select distinct companyid from employment key join iqxnetuserlink
      where iqxnetuserid = pWebUserID and charindex(string("char"(9),companyid,"char"(9)),sites) > 0;
  set pstart=iqxnetstringtodate(From__D);
  set pend=iqxnetstringtodate(To__D);
  set rTitle=dateformat(pstart,'dd/mm/yyyy')+' - '+dateformat(pend,'dd/mm/yyyy');
  select rTitle,
    (company.name+', '+getCompanyAddressOnline(company.companyid)) as Site,
    v.position as ShiftDesc,
    string(case dow(s.shiftdate) when 1 then 'Sunday ' when 7 then 'Saturday '
    else 'Weekday '
    end,st.description) as ShiftType,
    sum(getshiftlength(s.timefrom,s.timeto,s.breakminutes)) as ShiftHours
    from tempshift as s key join tempshiftplan as p key left outer join tempshifttype as st
    ,tempshiftplan as p key join vacancy as v key join employment join cos on employment.companyid = cos.companyid join company on employment.companyid = company.companyid
    where s.state <> 'C' and s.shiftdate between pstart and pend
    group by grouping sets((),(Site),(ShiftDesc),(ShiftType),((Site),(ShiftDesc),(ShiftType),rTitle))
end]]>
  </SQLExec>
  <SQLExec ignoreerror="YES">
<![CDATA[grant execute on pears.NetReportASAShiftHours to IQXNet]]>
  </SQLExec>
  <SQLExec ignoreerror="YES">
<![CDATA[drop procedure pears.NetReportClientStats]]>
  </SQLExec>
  <SQLExec parameters="NO" xProcName="NetReportClientStats">
<![CDATA[create procedure pears.NetReportClientStats(in pWebUserID char(20),in Start_Date__d char(20) default null,in Weeks__i char(20) default null)
result(Serial__H integer,Week_Start_Date__DX1Z date,Week_End_Date__DH date,New_Vacancies__GRT integer,New_Vacancies_Temp__RT integer,New_Vacancies_Perm__RT integer,New_Placements__GRT integer,New_Placements_Temp__RT integer,New_Placements_Perm__RT integer)
begin
  declare pWeeks integer;
  declare pStartDate date;
  declare local temporary table Cos(
    CompanyID char(20) not null,
    primary key(CompanyID),
    ) not transactional;
  set pWeeks=isnull(nullif(trim(Weeks__I),''),52);
  set pStartDate=IQXNetStringToDate(Start_Date__D);
  if pStartDate is null then
    set pStartDate=dateadd(week,-52,current date)
  end if;
  insert into Cos( CompanyID) select distinct companyid from employment key join iqxnetuserlink where iqxnetuserid = pWebUserID;
  select(a.row_num-1)*255+(b.row_num-1) as Serial,
    dateadd(week,Serial,pStartDate) as WeekStartDate,
    dateadd(day,6,WeekStartDate) as WeekEndDate,
    (select count(vacancyid) from vacancy key join employment where EntryDate between WeekStartDate and WeekEndDate and employment.companyid = any(select companyid from Cos)) as NewVacanciesAll,
    (select count(vacancyid) from vacancy key join employment where EntryDate between WeekStartDate and WeekEndDate and employment.companyid = any(select companyid from Cos) and vacancy.temp = 1) as NewVacanciesTemp,
    NewVacanciesAll-NewVacanciesTemp as NewVacanciesPerm,
    (select count(placementid) from placement key join employment where PlaceDate between WeekStartDate and WeekEndDate and employment.companyid = any(select companyid from Cos)) as NewPlacementsAll,
    (select count(placementid) from placement key join employment where PlaceDate between WeekStartDate and WeekEndDate and employment.companyid = any(select companyid from Cos) and employment.temp = 1) as NewPlacementsTemp,
    NewPlacementsAll-NewPlacementsTemp as NewPlacementsPerm
    from rowgenerator as a cross join rowgenerator as b
    where Serial < pWeeks order by
    Serial asc
end]]>
  </SQLExec>
  <SQLExec ignoreerror="YES">
<![CDATA[grant execute on pears.NetReportClientStats to IQXNet]]>
  </SQLExec>
  <SQLExec ignoreerror="YES">
<![CDATA[drop procedure pears.NetReportCombo_ClientSite]]>
  </SQLExec>
  <SQLExec parameters="NO" xProcName="NetReportCombo_ClientSite">
<![CDATA[create procedure pears.NetReportCombo_ClientSite(in pWebUserID char(20))
result(Description char(250),Value char(250),SortStr char(250))
begin
  select distinct getCompanyAddressOnline(company.companyid) as Descr,company.companyid,if isnumeric("left"(Descr,charindex(' ',Descr)-1)) = 1 then "right"(Descr,length(Descr)-charindex(' ',Descr)) else Descr
    endif as SortStr from company key join employment key join iqxnetuserlink where iqxnetuserlink.iqxnetuserid = pWebUserID order by SortStr asc
end]]>
  </SQLExec>
  <SQLExec ignoreerror="YES">
<![CDATA[grant execute on pears.NetReportCombo_ClientSite to IQXNet]]>
  </SQLExec>
  <SQLExec ignoreerror="YES">
<![CDATA[drop procedure pears.NetReportCombo_department]]>
  </SQLExec>
  <SQLExec parameters="NO" xProcName="NetReportCombo_department">
<![CDATA[create procedure pears.NetReportCombo_department(in pWebUserID char(20))
result(Description char(250),Value char(250))
begin
  select name,departmentid from department where searchable = 1 and publishtoweb = 1 order by sortorder asc,departmentid asc
end]]>
  </SQLExec>
  <SQLExec ignoreerror="YES">
<![CDATA[grant execute on pears.NetReportCombo_department to IQXNet]]>
  </SQLExec>
  <SQLExec ignoreerror="YES">
<![CDATA[drop procedure pears.NetReportCombo_gender]]>
  </SQLExec>
  <SQLExec parameters="NO" xProcName="NetReportCombo_gender">
<![CDATA[create procedure pears.NetReportCombo_gender(in pWebUserID char(20))
result(Description char(250),Value char(250))
begin
  select 'Male','M' union all
  select 'Female','F'
end]]>
  </SQLExec>
  <SQLExec ignoreerror="YES">
<![CDATA[grant execute on pears.NetReportCombo_gender to IQXNet]]>
  </SQLExec>
  <SQLExec ignoreerror="YES">
<![CDATA[drop procedure pears.NetReportDebtorsDetailed]]>
  </SQLExec>
  <SQLExec parameters="NO" xProcName="NetReportDebtorsDetailed">
<![CDATA[create procedure pears.NetReportDebtorsDetailed(in pWebUserID char(20),in Cutoff_Date__D31a char(20),in DSO_Period__I30 integer)
result(Title__Hr char(50),CompanyID__H char(20),Client__S1 char(50),Invoice_No__BT2 char(50),Days_Elapsed__IH integer,OutstandingAmount__IH decimal(10,2),Credit_Limit__R integer,DSO__IR integer,Days_0_to_14__MR decimal(10,2),Days_15_to_30__MR decimal(10,2),Days_31_to_40__MR decimal(10,2),Days_41_to_45__MR decimal(10,2),Days_46_to_60__MR decimal(10,2),Days_61_to_90__MR decimal(10,2),Days_over_90__MR decimal(10,2),Total__MR decimal(10,2))
begin
  declare DivID char(20);
  declare CompID char(20);
  declare CutOffDate date;
  declare rTitle char(50);
  set DivID=(select first staff.divisionid from iqxnetuser key join staff where iqxnetuser.iqxnetuserid = pwebuserid);
  set CutOffDate=iqxnetstringtodate(Cutoff_Date__D31a);
  set rTitle=dateformat(cutoffdate,'dd/mm/yyyy');
  select rTitle,
    GetInvoiceCompanyID(d.AccountCode) as InvoiceCompanyID,
    company.name as Client,
    d.OurRef as Invoice_No,
    DateDiff(day,d.AccountingDate,CutoffDate) as Days_Elapsed,
    IQacDocumentOutstandingAmount(d.DocumentID,CutOffDate) as OutstandingAmount,
    (select CreditLimit from CompanyAccount key join company where company.companyid = InvoiceCompanyID) as Credit_Limit,
    NetDebtorsDaySalesOutstanding(d.AccountCode,DSO_Period__I30,CutOffDate) as DSO,
    sum((if Days_Elapsed <= 14 then OutstandingAmount else 0
    endif)) as Days_0_to_14,sum((if Days_Elapsed between 15 and 30 then OutstandingAmount else 0
    endif)) as Days_15_to_30,sum((if Days_Elapsed between 31 and 40 then OutstandingAmount else 0
    endif)) as Days_31_to_40,sum((if Days_Elapsed between 41 and 45 then OutstandingAmount else 0
    endif)) as Days_41_to_45,sum((if Days_Elapsed between 46 and 60 then OutstandingAmount else 0
    endif)) as Days_46_to_60,sum((if Days_Elapsed between 61 and 90 then OutstandingAmount else 0
    endif)) as Days_61_to_90,sum((if Days_Elapsed >= 91 then OutstandingAmount else 0
    endif)) as Days_over_90,
    sum(OutstandingAmount) as Total
    from IQacDocument as d join company on company.companyid = InvoiceCompanyID
    where company.divisionid = DivID and OutstandingAmount <> 0 and d.AccountingDate <= CutoffDate
    group by grouping sets((),(InvoiceCompanyID,Client,dso,Credit_Limit,d.AccountCode),(InvoiceCompanyID,Client,d.AccountCode,d.OurRef,d.accountingDate,d.DocumentID))
end]]>
  </SQLExec>
  <SQLExec ignoreerror="YES">
<![CDATA[grant execute on pears.NetReportDebtorsDetailed to IQXNet]]>
  </SQLExec>
  <SQLExec ignoreerror="YES">
<![CDATA[drop procedure pears.NetReportDoubtfulDebtors]]>
  </SQLExec>
  <SQLExec parameters="NO" xProcName="NetReportDoubtfulDebtors">
<![CDATA[create procedure pears.NetReportDoubtfulDebtors(in pWebUserID char(20))
result(Title__Hr char(50),Client__S1 char(50),InvoiceCompanyID__H char(20),Invoice_No__B2 char(50),Last_Receipt_Date__D date,Last_Unpaid_Invoice_Date__DH integer,Days_Elapsed__IH integer,OutstandingAmount__IH decimal(10,2),Days_31_to_40__MR decimal(10,2),Days_41_to_45__MR decimal(10,2),Days_46_to_60__MR decimal(10,2),Days_61_to_90__MR decimal(10,2),Days_over_90__MR decimal(10,2))
begin
  declare DivID char(20);
  declare rTitle char(50);
  declare local temporary table Cos(
    CompanyID char(20) null,
    CliCode char(12) null,
    Last_Receipt date null,
    Last_Unpaid_Invoice date null,
    ) not transactional;
  set DivID=(select first staff.divisionid from iqxnetuser key join staff where iqxnetuser.iqxnetuserid = pwebuserid);
  insert into cos( companyid,clicode) select companyid,clientcode from company where divisionid = divid and invoiceaddress = 1 and trim(isnull(clientcode,'')) <> '';
  update cos set Last_Receipt = (select max(AccountingDate) from IQacDocument where DocumentClass = 'Payment' and AccountCode = clicode);
  delete from cos where isnull(datediff(day,Last_Receipt,current date),31) <= 30;
  update cos set Last_unpaid_invoice = (select max(AccountingDate) from IQacDocument where DocumentClass = 'Invoice' and AccountCode = cliCode and IQacDocumentOutstandingAmount(DocumentID,null) > 0);
  delete from cos where last_unpaid_invoice is null;
  delete from cos where datediff(day,Last_Unpaid_Invoice,current date) <= 45;
  set rTitle='';
  select rTitle,
    company.name as Client,
    cos.CompanyID as InvoiceCompanyID,
    d.OurRef as Invoice_No,
    cos.last_receipt as Last_Receipt_Date,
    cos.last_unpaid_invoice as Last_Unpaid_Invoice_Date,
    DateDiff(day,d.AccountingDate,current date) as Days_Elapsed,
    IQacDocumentOutstandingAmount(d.DocumentID,null) as OutstandingAmount,
    sum((if Days_Elapsed between 31 and 40 then OutstandingAmount else 0
    endif)) as Days_31_to_40,sum((if Days_Elapsed between 41 and 45 then OutstandingAmount else 0
    endif)) as Days_41_to_45,sum((if Days_Elapsed between 46 and 60 then OutstandingAmount else 0
    endif)) as Days_46_to_60,sum((if Days_Elapsed between 61 and 90 then OutstandingAmount else 0
    endif)) as Days_61_to_90,sum((if Days_Elapsed >= 91 then OutstandingAmount else 0
    endif)) as Days_over_90
    from IQacDocument as d join cos on d.accountcode = cos.clicode join Company on company.companyid = cos.CompanyID
    where OutstandingAmount <> 0
    group by grouping sets((),(InvoiceCompanyID,Client,Last_Receipt_Date,d.AccountCode,Last_Unpaid_Invoice_Date),(InvoiceCompanyID,Client,d.OurRef,DocumentID,d.AccountingDate))
end]]>
  </SQLExec>
  <SQLExec ignoreerror="YES">
<![CDATA[grant execute on pears.NetReportDoubtfulDebtors to IQXNet]]>
  </SQLExec>
  <SQLExec ignoreerror="YES">
<![CDATA[drop procedure pears.NetReportFulfilment]]>
  </SQLExec>
  <SQLExec parameters="NO" xProcName="NetReportFulfilment">
<![CDATA[create procedure pears.NetReportFulfilment(in pWebUserID char(20),in From__D char(20),in To__D char(20))
result(Title__H char(100),Position__1A char(100),Bookings_Received__RT integer,Bookings_Filled__RT integer,Fill_Percentage__RMT double)
begin
  declare pstart date;
  declare pend date;
  declare rTitle char(100);
  declare local temporary table Cos(
    CompanyID char(20) null,
    ) not transactional;
  set pstart=iqxnetstringtodate(From__D);
  set pend=iqxnetstringtodate(To__D);
  set rTitle=dateformat(pstart,'dd/mm/yyyy')+' - '+dateformat(pend,'dd/mm/yyyy');
  -- Get all the Companies the WebUser is Associated with
  insert into Cos( CompanyID) 
    select distinct companyid from employment key join iqxnetuserlink where iqxnetuserid = pWebUserID;
  select rTitle,vacancy.position,sum(isnull(nullif(vacancy.noofposts,0),1)) as Books,
    sum((select count(*) from placement where vacancyid = vacancy.vacancyid)) as Fills,
    100.0*(cast(Fills as double)/cast(Books as double)) as FillPercent
    from vacancy key join employment key join company join cos on company.companyid = cos.companyid
    where vacancy.entrydate between pstart and pend and vacancy.entrydate >= IQXNetCompanyStartDate(Company.companyid)
    group by grouping sets((),(rTitle,vacancy.position))
end]]>
  </SQLExec>
  <SQLExec ignoreerror="YES">
<![CDATA[grant execute on pears.NetReportFulfilment to IQXNet]]>
  </SQLExec>
  <SQLExec ignoreerror="YES">
<![CDATA[drop procedure pears.NetReportReceipts]]>
  </SQLExec>
  <SQLExec parameters="NO" xProcName="NetReportReceipts">
<![CDATA[create procedure pears.NetReportReceipts(in pWebUserID char(20),in From_Date__D31a char(20),in To_Date__D0 char(20))
result(Title__Hr char(50),Client__1 char(50),Amount__MR decimal(10,2),Method__2 char(50),Paying_In_Slip char(20),Cheque_Number char(50),Allocation_Date__DR date,Allocation__MR decimal(10,2),Invoice__R char(20),Unallocated__MR decimal(10,2))
begin
  declare DivID char(20);
  declare fDate date;
  declare tDate date;
  declare DocID char(12);
  declare RecieptAmount decimal(10,2);
  declare rTitle char(50);
  set DivID=(select first staff.divisionid from iqxnetuser key join staff where iqxnetuser.iqxnetuserid = pwebuserid);
  set fDate=iqxnetstringtodate(From_Date__D31a);
  set tDate=iqxnetstringtodate(To_Date__D0);
  set rTitle=dateformat(fDate,'dd/mm/yyyy')+' to '+dateformat(tDate,'dd/mm/yyyy');
  select rTitle,
    (select name from company where company.companyid = GetInvoiceCompanyID(d.AccountCode)) as Client,
    d.Amount*-1 as Amount,
    (select name from IQacPaymentMethod where PaymentMethodCode = d.PaymentMethod) as Method,
    d.OurRef as Paying_In_Slip,
    d.TheirRef as Cheque_Number,
    a.AllocationDate as Allocation_Date,
    a.allocatedAmount as Allocation,
    (select OurRef from IqAcDocument where DocumentID = a.AllocatedDocumentid) as Invoice,
    IQacDocumentOutstandingAmount(a.AllocationDocumentID,tDate)*-1 as Unallocated
    from IQacDocument as d left outer join IQacAllocation as a
    where a.AllocationDocumentID <> a.AllocatedDocumentID and d.DocumentClass = 'Payment'
    and d.AccountingDate between fDate and tDate and d.AccountCode = any(select ClientCode from company where divisionid = DivID) order by
    Client asc,Invoice asc
end]]>
  </SQLExec>
  <SQLExec ignoreerror="YES">
<![CDATA[grant execute on pears.NetReportReceipts to IQXNet]]>
  </SQLExec>
  <SQLExec ignoreerror="YES">
<![CDATA[drop procedure pears.NetReports]]>
  </SQLExec>
  <SQLExec parameters="NO" xProcName="NetReports">
<![CDATA[create procedure pears.NetReports(in pWebUserID char(20))
result(ReportTitle char(200),ReportSource char(100),ReportParams long varchar)
begin
  select r.Description as ReportTitle,r.DBProcedure as ReportSource,
    (select list(parm_name order by parm_id asc) from sysprocparm key join sysprocedure
      where proc_name = r.DBProcedure and parm_mode_in = 'Y' and parm_name <> 'pWebUserID') as ReportParams
    from iqxnetreport as r key join iqxnetuserclass key join iqxnetuser
    where iqxnetuser.iqxnetuserid = pWebUserID and(r.IQXNetRightID is null or iqxnethaspermission(pWebUserID,r.IQXNetRightID) > 0) order by
    r.sortorder asc,r.iqxnetreportid asc
end]]>
  </SQLExec>
  <SQLExec ignoreerror="YES">
<![CDATA[grant execute on pears.NetReports to IQXNet]]>
  </SQLExec>
  <SQLExec ignoreerror="YES">
<![CDATA[drop procedure pears.NetReportShiftFill]]>
  </SQLExec>
  <SQLExec parameters="NO" xProcName="NetReportShiftFill">
<![CDATA[create procedure pears.NetReportShiftFill(in pWebUserID char(20),in From__D char(20),in To__D char(20))
result(Title__H char(100),CoID__H char(20),Company__1A char(100),Address__2 char(150),xDate__DH date,Shifts_Added__RT integer,Filled__RT integer,Unfilled__RT integer,Fill_Percentage__RMT double)
begin
  declare pstart date;
  declare pend date;
  declare rTitle char(100);
  declare local temporary table Cos(
    CompanyID char(20) null,
    ) not transactional;
  set pstart=iqxnetstringtodate(From__D);
  set pend=iqxnetstringtodate(To__D);
  set rTitle=dateformat(pstart,'dd/mm/yyyy')+' - '+dateformat(pend,'dd/mm/yyyy');
  -- Get all the Companies the WebUser is Associated with
  insert into Cos( CompanyID) 
    select distinct companyid from employment key join iqxnetuserlink where iqxnetuserid = pWebUserID;
  select rTitle,
    company.companyid,
    company.name as CompanyName,
    GetCompanyAddressOnLine(company.companyid) as CompanyAddress,
    IQXNetCompanyStartDate(Company.companyid) as NetStart,
    sum((select count(*) from tempshiftplan as p key join vacancy key join employment
      where employment.companyid = company.companyid and p.shiftdate between pstart and pend and p.shiftdate >= NetStart)) as ShiftsEntered,
    sum((select count(*) from tempshift as s key join tempshiftplan as p key join vacancy key join employment
      where employment.companyid = company.companyid and s.state <> 'C' and p.shiftdate between pstart and pend and p.shiftdate >= NetStart)) as ShiftsFilled,
    ShiftsEntered-ShiftsFilled as ShiftsUnfilled,
    if ShiftsEntered > 0 then 100.0*(1.0*ShiftsFilled/ShiftsEntered) else 0.0
    endif as FillPercentage from company join cos on company.companyid = cos.companyid
    group by grouping sets((),(rTitle,company.companyid,CompanyName,CompanyAddress,NetStart))
end]]>
  </SQLExec>
  <SQLExec ignoreerror="YES">
<![CDATA[grant execute on pears.NetReportShiftFill to IQXNet]]>
  </SQLExec>
  <SQLExec ignoreerror="YES">
<![CDATA[drop procedure pears.NetReportShiftHours]]>
  </SQLExec>
  <SQLExec parameters="NO" xProcName="NetReportShiftHours">
<![CDATA[create procedure pears.NetReportShiftHours(in pWebUserID char(20),in From__D char(20),in To__D char(20))
result(Title__Hr char(100),Job__1S char(100),Shift__2S char(100),Hours__RMT double)
begin
  declare pstart date;
  declare pend date;
  declare rTitle char(100);
  declare local temporary table Cos(
    CompanyID char(20) null,
    xDate date null,
    ) not transactional;
  set pstart=iqxnetstringtodate(From__D);
  set pend=iqxnetstringtodate(To__D);
  set rTitle=dateformat(pstart,'dd/mm/yyyy')+' - '+dateformat(pend,'dd/mm/yyyy');
  -- Get all the Companies the WebUser is Associated with
  insert into Cos( CompanyID) 
    select distinct companyid from employment key join iqxnetuserlink where iqxnetuserid = pWebUserID;
  update Cos set xDate = IQXNetCompanyStartDate(companyid);
  select rTitle,
    p.description as ShiftDesc,
    string(case dow(s.shiftdate) when 1 then 'Sunday ' when 7 then 'Saturday '
    else 'Weekday '
    end,st.description) as ShiftType,
    sum(getshiftlength(s.timefrom,s.timeto,s.breakminutes)) as ShiftHours
    from tempshift as s key join tempshiftplan as p key left outer join tempshifttype as st
    ,tempshiftplan as p key join vacancy key join employment join cos on employment.companyid = cos.companyid
    where s.state <> 'C' and s.shiftdate between pstart and pend and s.shiftdate >= cos.xDate
    group by grouping sets((),(ShiftDesc),(ShiftType),((ShiftDesc),(ShiftType),rTitle))
end]]>
  </SQLExec>
  <SQLExec ignoreerror="YES">
<![CDATA[grant execute on pears.NetReportShiftHours to IQXNet]]>
  </SQLExec>
  <SQLExec ignoreerror="YES">
<![CDATA[drop procedure pears.NetReportSpend]]>
  </SQLExec>
  <SQLExec parameters="NO" xProcName="NetReportSpend">
<![CDATA[create procedure pears.NetReportSpend(in pWebUserID char(20),in From__D char(20),in To__D char(20))
result(Title__H char(100),Company__1 char(100),Location__2 char(150),Job_Title__3 char(100),Timesheet_Count__RT integer,Hours__RMT double,Net_Charge__RMT double,Charge_Inc_VAT__RMT double)
begin
  declare pstart date;
  declare pend date;
  declare pStartPeriod integer;
  declare pEndPeriod integer;
  declare rTitle char(100);
  declare VATRate decimal(9,2);
  declare local temporary table Cos(
    CompanyID char(20) null,
    ) not transactional;
  set pstart=iqxnetstringtodate(From__D);
  set pend=iqxnetstringtodate(To__D);
  set rTitle=dateformat(pstart,'dd/mm/yyyy')+' - '+dateformat(pend,'dd/mm/yyyy');
  set pStartPeriod=weekcontaining(pstart);
  set pEndPeriod=weekcontaining(pend);
  set VATRate=(select VATRate from IQacVATRate where Vatcode = (select DefaultVATCode from IQacParams));
  set VATRate=((VATRate/100)+1);
  -- Get all the Companies the WebUser is Associated with
  insert into Cos( CompanyID) 
    select distinct companyid from employment key join iqxnetuserlink where iqxnetuserid = pWebUserID;
  select rTitle,
    Company.Name,
    string(Company.Addr1,', ',Company.Town) as Location,
    Vacancy.Position,
    count(distinct TempTimeSheet.TempTimeSheetID) as NumTimeSheets,
    sum(TempTimeSheetLine.UnitsCharged) as Hours,
    sum(TempTimeSheetLine.UnitsCharged*TempTimeSheetLine.ChargeRate) as Charge,
    (Charge*VATRate) as ChargeWVAT
    from TempTimeSheet
    key join(TempTimeSheetLine,Placement key join(Employment as PEmp key join Person
    ,Vacancy key join(Employment key join(Company join cos on company.companyid = cos.companyid))))
    where TempTimeSheet.TransferBatch >= 1
    and TempTimeSheet.Period between pStartPeriod and pEndPeriod
    and TempTimeSheet.PeriodLength = 'W'
    and weekmonthenddate(TempTimeSheet.period,TempTimeSheet.periodlength) >= IQXNetCompanyStartDate(company.companyid)
    group by Company.name,Company.Addr1,Company.Town,Vacancy.Position
end]]>
  </SQLExec>
  <SQLExec ignoreerror="YES">
<![CDATA[grant execute on pears.NetReportSpend to IQXNet]]>
  </SQLExec>
  <SQLExec ignoreerror="YES">
<![CDATA[drop procedure pears.NetReportTimesheetLines]]>
  </SQLExec>
  <SQLExec parameters="NO" xProcName="NetReportTimesheetLines">
<![CDATA[create procedure pears.NetReportTimesheetLines(in pWebUserID char(20),in pTimesheetID char(20))
result(Pay_Type char(100),Unit char(100),Units__R double,Rate__MR double,Total__MR double)
begin
  declare userClass char(20);
  set userClass=(select first iqxnetuserclassid from iqxnetuser where iqxnetuserid = pWebUserID);
  select b.description,
    b.unit,
    (if userclass = 'CLIENT' then l.unitscharged else l.unitspaid
    endif),(if userclass = 'CLIENT' then l.chargerate else l.payrate
    endif),(if userclass = 'CLIENT' then l.unitscharged*l.chargerate else l.unitspaid*l.payrate
    endif) from temptimesheetline as l key join temppayband as b
    where l.temptimesheetid = pTimesheetID order by
    b.sortorder asc,b.description asc
end]]>
  </SQLExec>
  <SQLExec ignoreerror="YES">
<![CDATA[grant execute on pears.NetReportTimesheetLines to IQXNet]]>
  </SQLExec>
  <SQLExec ignoreerror="YES">
<![CDATA[drop procedure pears.NetReportTimesheets]]>
  </SQLExec>
  <SQLExec parameters="NO" xProcName="NetReportTimesheets">
<![CDATA[create procedure pears.NetReportTimesheets(in pWebUserID char(20),in From__D char(20),in To__D char(20))
result(Title__H char(100),Number__1 char(20),Temp char(60),Position char(60),Client__B char(100),End_Date__DXA date,Total__RMTG double,Details__Eat char(100))
begin
  declare pstart date;
  declare pend date;
  declare pStartPeriod integer;
  declare pEndPeriod integer;
  declare rTitle char(100);
  declare userClass char(20);
  declare local temporary table IDs(
    ID char(20) null,
    ) not transactional;set pstart=iqxnetstringtodate(From__D);
  set pend=iqxnetstringtodate(To__D);
  set rTitle=dateformat(pstart,'dd/mm/yyyy')+' - '+dateformat(pend,'dd/mm/yyyy');
  set pStartPeriod=weekcontaining(pstart);
  set pEndPeriod=weekcontaining(pend);
  set userClass=(select first iqxnetuserclassid from iqxnetuser where iqxnetuserid = pWebUserID);
  if userClass = 'CANDIDATE' then
    insert into IDs( ID) 
      select distinct personid from iqxnetuserlink where iqxnetuserid = pWebUserID;
    select rTitle,t.serialnumber,string(person.surname,', ',person.forenames) as tempname,vacancy.position,company.name as companyname,weekmonthenddate(t.period,t.periodlength) as weekenddate,
      Sum((select sum(unitspaid*payrate) from temptimesheetline where temptimesheetid = t.temptimesheetid)) as timesheettotal,'NetReportTimesheetLines&pTimesheetID='
      +t.temptimesheetid as Details
      from temptimesheet as t key join placement key join vacancy key join employment key join company
      ,temptimesheet as t key join tempdesk
      ,temptimesheet as t key join person
      where t.personid = any(select id from ids)
      and t.Period between pStartPeriod and pEndPeriod
      and t.PeriodLength = 'W'
      group by grouping sets((),(weekenddate),((weekenddate),rTitle,t.serialnumber,tempname,vacancy.position,companyname,Details))
  else if userClass = 'AGENCY' then
      insert into IDs( ID) 
        select distinct e.companyid from iqxnetuserlink as l key join employment as e where l.iqxnetuserid = pWebUserID;
      select rTitle,t.serialnumber,string(person.surname,', ',person.forenames) as tempname,vacancy.position,company.name as companyname,weekmonthenddate(t.period,t.periodlength) as weekenddate,
        sum((select sum(unitspaid*payrate) from temptimesheetline where temptimesheetid = t.temptimesheetid)) as timesheettotal,'NetReportTimesheetLines&pTimesheetID='
        +t.temptimesheetid as Details
        from temptimesheet as t key join placement key join vacancy key join employment key join company
        ,temptimesheet as t key join tempdesk
        ,temptimesheet as t key join person key join pay_employee key join company as agcomp
        where agcomp.companyid = any(select id from ids)
        and weekenddate >= IQXNetCompanyStartDate(agcomp.companyid)
        and t.Period between pStartPeriod and pEndPeriod
        and t.PeriodLength = 'W'
        group by grouping sets((),(weekenddate),((weekenddate),rTitle,t.serialnumber,tempname,vacancy.position,companyname,Details))
    else -- CLIENT
      insert into IDs( ID) 
        select distinct e.companyid from iqxnetuserlink as l key join employment as e where l.iqxnetuserid = pWebUserID;
      select rTitle,t.serialnumber,string(person.surname,', ',person.forenames) as tempname,vacancy.position,company.name as companyname,weekmonthenddate(t.period,t.periodlength) as weekenddate,
        sum((select sum(unitscharged*chargerate) from temptimesheetline where temptimesheetid = t.temptimesheetid)) as timesheettotal,'NetReportTimesheetLines&pTimesheetID='
        +t.temptimesheetid as Details
        from temptimesheet as t key join placement key join vacancy key join employment key join company
        ,temptimesheet as t key join tempdesk
        ,temptimesheet as t key join person
        where company.companyid = any(select id from ids)
        and weekenddate >= IQXNetCompanyStartDate(company.companyid)
        and t.Period between pStartPeriod and pEndPeriod
        and t.PeriodLength = 'W'
        group by grouping sets((),(weekenddate),((weekenddate),t.serialnumber,tempname,vacancy.position,companyname,t.temptimesheetid))
    end if
  end if
end]]>
  </SQLExec>
  <SQLExec ignoreerror="YES">
<![CDATA[grant execute on pears.NetReportTimesheets to IQXNet]]>
  </SQLExec>
  <SQLExec ignoreerror="YES">
<![CDATA[drop procedure pears.NetReportUniTimesheetLines]]>
  </SQLExec>
  <SQLExec parameters="NO" xProcName="NetReportUniTimesheetLines">
<![CDATA[create procedure pears.NetReportUniTimesheetLines(in pWebUserID char(20),in pTimesheetID char(20))
result(Pay_Type char(100),Unit char(100),Units__R double,Pay_Rate__MR double,Charge_Rate__MR double,Total_Charge__MR double)
begin
  select b.description,
    b.unit,
    l.unitspaid,
    l.payrate,
    l.chargerate,
    l.unitscharged*l.chargerate
    from temptimesheetline as l key join temppayband as b
    where l.temptimesheetid = pTimesheetID order by
    b.sortorder asc,b.description asc
end]]>
  </SQLExec>
  <SQLExec ignoreerror="YES">
<![CDATA[grant execute on pears.NetReportUniTimesheetLines to IQXNet]]>
  </SQLExec>
  <SQLExec ignoreerror="YES">
<![CDATA[drop procedure pears.NetReportUniTimesheets]]>
  </SQLExec>
  <SQLExec parameters="NO" xProcName="NetReportUniTimesheets">
<![CDATA[create procedure pears.NetReportUniTimesheets(in pWebUserID char(20),in From__D char(20),in To__D char(20))
result(Title__H char(100),Company__1 char(100),Address__2 char(100),Department__3 char(100),Candidate__4 char(100),Contact char(100),Job_Title char(100),Start_Date__D date,End_Date__D date,Hours__RMT double,Gross_Pay__RMT double,Net_Charge__RMT double,Charge_Inc_VAT__RMT double,Details__Eat char(100))
begin
  declare pstart date;
  declare pend date;
  declare pStartPeriod integer;
  declare pEndPeriod integer;
  declare rTitle char(100);
  declare VATRate decimal(9,2);
  declare local temporary table Cos(
    CompanyID char(20) null,
    ) not transactional;
  set pstart=iqxnetstringtodate(From__D);
  set pend=iqxnetstringtodate(To__D);
  set rTitle=dateformat(pstart,'dd/mm/yyyy')+' - '+dateformat(pend,'dd/mm/yyyy');
  set pStartPeriod=weekcontaining(pstart);
  set pEndPeriod=weekcontaining(pend);
  set VATRate=(select VATRate from IQacVATRate where Vatcode = (select DefaultVATCode from IQacParams));
  set VATRate=((VATRate/100)+1);
  -- Get all the Companies the WebUser is Associated with
  insert into Cos( CompanyID) 
    select distinct companyid from employment key join iqxnetuserlink where iqxnetuserid = pWebUserID;
  select rTitle,
    Company.Name as CompanyName,
    company.addr1 as Address,
    Employment.Department,
    Person.Name as Candidate,
    Contact.Name as ContactName,
    PEmp.Position,
    Pemp.startdate as EmpStartdate,
    Pemp.leavedate as EmpLeavedate,
    (select sum(UnitsCharged) from TempTimeSheetLine key join TempPayBand where TempTimeSheetID = TempTimeSheet.TempTimeSheetID and TempPayBand.Unit like 'Hour%') as TotHours,
    (select sum(UnitsPaid*PayRate) from TempTimeSheetLine where TempTimeSheetID = TempTimeSheet.TempTimesheetID) as TotPaid,
    (select sum(UnitsCharged*ChargeRate) from TempTimesheetLine where TempTimeSheetID = TempTimeSheet.TempTimeSheetID) as TotCharged,
    (TotCharged*VATRate) as ChargeWVAT,'NetReportUniTimesheetLines&pTimesheetID='+temptimesheet.temptimesheetid as Details
    from TempTimeSheet
    key join(Placement key join(Employment as PEmp key join Person,Vacancy
    key join(Employment key join(Person as Contact,(Company join cos on company.companyid = cos.companyid)))))
    where TempTimeSheet.TransferBatch >= 1
    and TempTimeSheet.Period between pStartPeriod and pEndPeriod
    and TempTimeSheet.PeriodLength = 'W'
    and weekmonthenddate(TempTimeSheet.period,TempTimeSheet.periodlength) >= IQXNetCompanyStartDate(company.companyid)
end]]>
  </SQLExec>
  <SQLExec ignoreerror="YES">
<![CDATA[grant execute on pears.NetReportUniTimesheets to IQXNet]]>
  </SQLExec>
  <SQLExec ignoreerror="YES">
<![CDATA[drop procedure pears.NetReportVacShiftsCountOfHoursIncSite]]>
  </SQLExec>
  <SQLExec parameters="NO" xProcName="NetReportVacShiftsCountOfHoursIncSite">
<![CDATA[create procedure pears.NetReportVacShiftsCountOfHoursIncSite(in pWebUserID char(20),in From__D char(20),in To__D char(20),in Site__XClientSite char(250))
result(Title__H char(100),Company_Name__1 char(100),Position__2 char(50),Shift_Date_Sort__H char(15),Shift_Date char(15),VacID__H char(20),Total_Shifts__IRT integer,Total_Hours__NRT decimal(10,2),Details__Eta char(200))
begin
  declare pstart date;
  declare pend date;
  declare sites char(250);
  declare rTitle char(100);
  declare local temporary table Cos(
    CompanyID char(20) null,
    ) not transactional;
  set sites=string("char"(9),Site__XClientSite,"char"(9));
  insert into Cos( CompanyID) select distinct companyid from employment key join iqxnetuserlink
      where iqxnetuserid = pWebUserID and charindex(string("char"(9),companyid,"char"(9)),sites) > 0;
  set pstart=iqxnetstringtodate(From__D);
  set pend=iqxnetstringtodate(To__D);
  set rTitle=dateformat(pstart,'dd/mm/yyyy')+' - '+dateformat(pend,'dd/mm/yyyy');
  select distinct rTitle,Company.Name as Company_Name,
    Vacancy.Position as Position,
    TempShift.ShiftDate as Shift_Date_Sort,
    dateformat(TempShift.ShiftDate,'Ddd dd/mm/yyyy') as Shift_Date,
    Vacancy.VacancyID as VacID,
    (select count(*) from Vacancy key join TempShift key join Person as Temp
      ,vacancy key join(employment key join(company,person))
      ,vacancy join status on vacancy.status = status.status and status.type = 'V'
      where TempShift.State in( 'P','B','W') and Vacancy.VacancyID = VacID and ShiftDate = Shift_Date_Sort) as Total_Shifts,
    (select sum(getshiftlength(TempShift.TimeFrom,TempShift.TimeTo,isnull(TempShift.BreakMinutes,0))) from Vacancy key join TempShift key join Person as Temp
      ,vacancy key join(employment key join(company,person))
      ,vacancy join status on vacancy.status = status.status and status.type = 'V'
      where TempShift.State in( 'P','B','W') and Vacancy.VacancyID = VacID and ShiftDate = Shift_Date_Sort) as Total_Hours,
    string('NetReportVacShiftsCountOfHoursIncSiteLines&pVacancyID=',vacancy.vacancyID,'&pshiftdate=',Shift_Date_Sort) as Details
    from Vacancy key join TempShift key join Person as Temp
    ,vacancy key join(employment key join((company join Cos on Cos.CompanyID = company.CompanyID),person))
    ,vacancy join status on vacancy.status = status.status and status.type = 'V'
    where TempShift.State in( 'P','B','W') 
    and ShiftDate between pstart and pend order by
    Company_Name asc,Position asc,Shift_Date_Sort asc
end]]>
  </SQLExec>
  <SQLExec ignoreerror="YES">
<![CDATA[grant execute on pears.NetReportVacShiftsCountOfHoursIncSite to IQXNet]]>
  </SQLExec>
  <SQLExec ignoreerror="YES">
<![CDATA[drop procedure pears.NetReportVacShiftsCountOfHoursIncSiteLines]]>
  </SQLExec>
  <SQLExec parameters="NO" xProcName="NetReportVacShiftsCountOfHoursIncSiteLines">
<![CDATA[create procedure pears.NetReportVacShiftsCountOfHoursIncSiteLines(in pWebUserID char(20),in pVacancyID char(20),in pShiftDate char(15))
result(Shift_Date__R date,Shift_Times__R char(50),Break_Time__R char(20),State__R char(1),Candidate__R char(50),Total_Hours__R decimal(10,2))
begin
  select TempShift.ShiftDate as Shift_Date,
    string(dateformat(TempShift.TimeFrom,'hh:nn'),' - ',dateformat(TempShift.TimeTo,'hh:nn')) as Shift_Times,
    TempShift.BreakMinutes,
    TempShift.State,
    String(Temp.Surname,', ',GetWord(Temp.Forenames,1)) as Candidate,
    getshiftlength(TempShift.TimeFrom,TempShift.TimeTo,isnull(TempShift.BreakMinutes,0)) as Total_Hours
    from Vacancy key join TempShift key join Person as Temp
    ,vacancy key join(employment key join(company,person))
    ,vacancy join status on vacancy.status = status.status and status.type = 'V'
    where TempShift.State in( 'P','B','W') and Vacancy.VacancyID = pVacancyID and ShiftDate = pShiftDate order by
    Tempshift.TimeFrom asc,Candidate asc
end]]>
  </SQLExec>
  <SQLExec ignoreerror="YES">
<![CDATA[grant execute on pears.NetReportVacShiftsCountOfHoursIncSiteLines to IQXNet]]>
  </SQLExec>
  <SQLExec ignoreerror="YES">
<![CDATA[drop procedure pears.NetSetShiftplanCascade]]>
  </SQLExec>
  <SQLExec parameters="NO" xProcName="NetSetShiftplanCascade">
<![CDATA[create procedure pears.NetSetShiftplanCascade(in splanid char(20))
begin
  declare dtCascade datetime;
  select GetCascadeTime(employment.companyid,vacancy.vacancyid,current timestamp,p.shiftdate+p.timefrom,current timestamp,1) into dtCascade
    from tempshiftplan as p key join vacancy key join employment where p.tempshiftplanid = splanid;
  if dtCascade is not null then
    update tempshiftplan set cascadedatetime = dtCascade where tempshiftplanid = splanid
  end if
end]]>
  </SQLExec>
  <SQLExec ignoreerror="YES">
<![CDATA[grant execute on pears.NetSetShiftplanCascade to IQXNet]]>
  </SQLExec>
  <SQLExec ignoreerror="YES">
<![CDATA[drop procedure pears.NetSetVacancyCascade]]>
  </SQLExec>
  <SQLExec parameters="NO" xProcName="NetSetVacancyCascade">
<![CDATA[create procedure pears.NetSetVacancyCascade(in svacid char(20))
begin
  declare dtCascade datetime;
  select getvacancycascadetime(employment.companyid,vacancy.vacancyid,current timestamp,vacancy.startdate,current timestamp,1) into dtCascade
    from vacancy key join employment where vacancy.vacancyid = svacid;
  if dtCascade is not null then
    update vacancy set cascadedatetime = dtCascade where vacancyid = svacid
  end if
end]]>
  </SQLExec>
  <SQLExec ignoreerror="YES">
<![CDATA[grant execute on pears.NetSetVacancyCascade to IQXNet]]>
  </SQLExec>
  <SQLExec ignoreerror="YES">
<![CDATA[drop procedure pears.NetTimesheet]]>
  </SQLExec>
  <SQLExec parameters="NO" xProcName="NetTimesheet">
<![CDATA[create procedure pears.NetTimesheet(in pWebUserID char(20),in pTempTimesheetID char(20))
result(temptimesheetid char(20),serialnumber char(20),tempname char(60),position char(60),companyname char(60),weekenddate date,completedby char(50),completedat datetime)
begin
  select t.temptimesheetid,t.serialnumber,string(person.surname,', ',person.forenames) as tempname,
    vacancy.position,company.name as companyname,weekmonthenddate(t.period,t.periodlength) as weekenddate,
    (select first i.name from tempprovtimesheethistory as h join iqxnetuser as i on h.externaluserid = i.iqxnetuserid
      where h.temptimesheetid = t.temptimesheetid and h.newstatus = 100) as completedby,
    t.whenentered as completedat
    from temptimesheet as t key join placement key join vacancy key join employment key join company
    ,temptimesheet as t key join tempdesk
    ,temptimesheet as t key join person
    where t.temptimesheetid = ptemptimesheetid
end]]>
  </SQLExec>
  <SQLExec ignoreerror="YES">
<![CDATA[grant execute on pears.NetTimesheet to IQXNet]]>
  </SQLExec>
  <SQLExec ignoreerror="YES">
<![CDATA[drop function pears.NetTimesheetEndDate]]>
  </SQLExec>
  <SQLExec parameters="NO" xProcName="NetTimesheetEndDate">
<![CDATA[create function pears.NetTimesheetEndDate(in isProvisional tinyint,in byShift tinyint,in id char(20))
returns date
begin
  declare lastShiftdate date;
  declare Weekenddate date;
  declare DeskType char(1);
  declare ExtNo smallint; -- 2 denotes completed provisonal - can look up tempprovtimesheetshift
  declare VacID char(20);
  declare PersID char(20);
  set lastShiftdate=null;
  set Weekenddate=null;
  if isProvisional = 1 then
    select d.desktype,t.extnumber,t.vacancyid,t.personid,weekmonthenddate(t.period,t.periodlength) into DeskType,
      ExtNo,VacID,PersID,
      Weekenddate from tempprovtimesheet as t key join tempdesk as d where t.tempprovtimesheetid = id;
    if DeskType = 'S' and byShift = 1 then
      if ExtNo = 2 then
        select max(s.shiftdate) into lastShiftdate from tempprovtimesheetshift as t key join tempshift as s where t.tempprovtimesheetid = id
          and s.state in( 'P','B') and s.shiftdate between Weekenddate-6 and Weekenddate
      else
        select max(s.shiftdate) into lastShiftdate from tempshift as s where s.personid = PersID and s.vacancyid = VacID
          and s.state in( 'P','B') and s.shiftdate between Weekenddate-6 and Weekenddate
      end if
    end if
  else
    select d.desktype,isnull(t.enddate,weekmonthenddate(t.period,t.periodlength)) into DeskType,
      Weekenddate from temptimesheet as t key join tempdesk as d where t.temptimesheetid = id;
    if DeskType = 'S' and byShift = 1 then
      select max(s.shiftdate) into lastShiftdate from temptimesheetline as t key join tempshift as s where t.temptimesheetid = id
        and s.state = 'W'
    end if
  end if;
  return isnull(lastShiftdate,Weekenddate)
end]]>
  </SQLExec>
  <SQLExec ignoreerror="YES">
<![CDATA[grant execute on pears.NetTimesheetEndDate to IQXNet]]>
  </SQLExec>
  <SQLExec ignoreerror="YES">
<![CDATA[drop procedure pears.NetTimesheetHeader]]>
  </SQLExec>
  <SQLExec parameters="NO" xProcName="NetTimesheetHeader">
<![CDATA[create procedure pears.NetTimesheetHeader(in pWebUserID char(20),in pTempTimesheetID char(20))
result(temptimesheetid char(20),serialnumber char(20),tempname char(60),position char(60),companyname char(60),weekenddate date,timesheettype char(1),timesheettotal double)
begin
  select s.tempshiftid,s.shiftdate,s.timefrom,s.timeto,s.breakminutes,
    p.description,weekmonthenddate(t.period,t.periodlength) as weekenddate
    from tempshift as s key join temptimesheet as t
    ,tempshift as s key left outer join tempshiftplan as p
    ,temptimesheet as t key join person
    where t.temptimesheetid = pTempTimesheetID
    and s.shiftdate between weekenddate-6 and weekenddate order by
    s.shiftdate asc,s.timefrom asc
end]]>
  </SQLExec>
  <SQLExec ignoreerror="YES">
<![CDATA[grant execute on pears.NetTimesheetHeader to IQXNet]]>
  </SQLExec>
  <SQLExec ignoreerror="YES">
<![CDATA[drop procedure pears.NetTimesheetRates]]>
  </SQLExec>
  <SQLExec parameters="NO" xProcName="NetTimesheetRates">
<![CDATA[create procedure pears.NetTimesheetRates(in pWebUserID char(20),in pTempTimesheetID char(20))
result(TempTimesheetLineID char(20),IsExpenses smallint,BandDescription char(50),UnitDescription char(100),Units decimal(12,2),Rate decimal(12,2),Total decimal(12,2),Rate2 decimal(12,2),Total2 decimal(12,2))
begin
  declare uclass char(20);
  declare divid char(20);
  set uclass=(select first iqxnetuserclassid from iqxnetuser where iqxnetuserid = pWebUserID);
  if uclass = 'CLIENT' then
    select TempTimesheetLine.TempTimesheetLineID,
      (if isnull(temppayband.payrollflag,'') = 'EXPENSES' or isnull(temppayband.isexpenses,0) = 1 then 1 else 0
      endif) as IsExpenses,temppayband.description,
      (if IsExpenses = 1 then temptimesheetline.description else temppayband.unit
      endif),nullif(temptimesheetline.unitscharged,0.0) as units,nullif(temptimesheetline.chargerate,0.0) as rate,isnull(units*rate,0.0) as total,null,null
      from temptimesheetline key join temppayband where temptimesheetline.temptimesheetid = pTempTimesheetID order by
      temptimesheetline.linenumber asc
  else if uclass = 'OWNER' then
      select TempTimesheetLine.TempTimesheetLineID,
        (if isnull(temppayband.payrollflag,'') = 'EXPENSES' or isnull(temppayband.isexpenses,0) = 1 then 1 else 0
        endif) as IsExpenses,temppayband.description,
        (if IsExpenses = 1 then temptimesheetline.description else temppayband.unit
        endif),nullif(temptimesheetline.unitspaid,0.0) as units,nullif(temptimesheetline.payrate,0.0) as rate,isnull(units*rate,0.0) as total,
        nullif(temptimesheetline.chargerate,0.0) as rate2,isnull(units*rate2,0.0) as total2
        from temptimesheetline key join temppayband where temptimesheetline.temptimesheetid = pTempTimesheetID order by
        temptimesheetline.linenumber asc
    else
      select TempTimesheetLine.TempTimesheetLineID,
        (if isnull(temppayband.payrollflag,'') = 'EXPENSES' or isnull(temppayband.isexpenses,0) = 1 then 1 else 0
        endif) as IsExpenses,temppayband.description,
        (if IsExpenses = 1 then temptimesheetline.description else temppayband.unit
        endif),nullif(temptimesheetline.unitspaid,0.0) as units,nullif(temptimesheetline.payrate,0.0) as rate,isnull(units*rate,0.0) as total,null,null
        from temptimesheetline key join temppayband where temptimesheetline.temptimesheetid = pTempTimesheetID order by
        temptimesheetline.linenumber asc
    end if
  end if
end]]>
  </SQLExec>
  <SQLExec ignoreerror="YES">
<![CDATA[grant execute on pears.NetTimesheetRates to IQXNet]]>
  </SQLExec>
  <SQLExec ignoreerror="YES">
<![CDATA[drop procedure pears.NetTimesheets]]>
  </SQLExec>
  <SQLExec parameters="NO" xProcName="NetTimesheets">
<![CDATA[create procedure pears.NetTimesheets(in pWebUserID char(20),in pSlice integer default 0)
result(temptimesheetid char(20),serialnumber char(20),tempname char(60),position char(60),companyname char(60),weekenddate date,timesheettype char(1),timesheettotal double)
begin
  declare userClass char(20);
  declare x integer;
  declare y integer;
  set x=20;
  set y=x*pSlice+1;
  set userClass=(select first iqxnetuserclassid from iqxnetuser where iqxnetuserid = pWebUserID);
  if userClass = 'CANDIDATE' then
    select top x start at y t.temptimesheetid,t.serialnumber,string(person.surname,', ',person.forenames) as tempname,vacancy.position,company.name as companyname,weekmonthenddate(t.period,t.periodlength) as weekenddate,
      if tempdesk.desktype = 'S' then 'S' else if tempdesk.desktype = 'W'
      and exists(select * from placement where placementid = t.placementid and worknormalhours is not null and workstarttime is not null
        and(isnull(workmonday,0) = 1 or isnull(worktuesday,0) = 1 or isnull(workwednesday,0) = 1 or isnull(workthursday,0) = 1 or isnull(workfriday,0) = 1
        or isnull(worksaturday,0) = 1 or isnull(worksunday,0) = 1)) then 'T'
      else 'C'
      endif
      endif as timesheettype,(select sum(unitspaid*payrate) from temptimesheetline where temptimesheetid = t.temptimesheetid) as timesheettotal
      from temptimesheet as t key join placement key join vacancy key join employment key join company
      ,temptimesheet as t key join tempdesk
      ,temptimesheet as t key join person key join iqxnetuserlink
      where iqxnetuserlink.iqxnetuserid = pwebuserid order by
      t.serialnumber desc
  else if userClass = 'AGENCY' then
      select top x start at y t.temptimesheetid,t.serialnumber,string(person.surname,', ',person.forenames) as tempname,vacancy.position,company.name as companyname,weekmonthenddate(t.period,t.periodlength) as weekenddate,
        if tempdesk.desktype = 'S' then 'S' else if tempdesk.desktype = 'W'
        and exists(select * from placement where placementid = t.placementid and worknormalhours is not null and workstarttime is not null
          and(isnull(workmonday,0) = 1 or isnull(worktuesday,0) = 1 or isnull(workwednesday,0) = 1 or isnull(workthursday,0) = 1 or isnull(workfriday,0) = 1
          or isnull(worksaturday,0) = 1 or isnull(worksunday,0) = 1)) then 'T'
        else 'C'
        endif
        endif as timesheettype,(select sum(unitspaid*payrate) from temptimesheetline where temptimesheetid = t.temptimesheetid) as timesheettotal
        from temptimesheet as t key join placement key join vacancy key join employment key join company
        ,temptimesheet as t key join tempdesk
        ,temptimesheet as t key join person key join pay_employee key join company as agcomp key join employment as agemp key join iqxnetuserlink
        where iqxnetuserlink.iqxnetuserid = pwebuserid and weekenddate >= IQXNetCompanyStartDate(agcomp.companyid) order by
        t.serialnumber desc
    else -- CLIENT
      select top x start at y t.temptimesheetid,t.serialnumber,string(person.surname,', ',person.forenames) as tempname,vacancy.position,company.name as companyname,weekmonthenddate(t.period,t.periodlength) as weekenddate,
        if tempdesk.desktype = 'S' then 'S' else if tempdesk.desktype = 'W'
        and exists(select * from placement where placementid = t.placementid and worknormalhours is not null and workstarttime is not null
          and(isnull(workmonday,0) = 1 or isnull(worktuesday,0) = 1 or isnull(workwednesday,0) = 1 or isnull(workthursday,0) = 1 or isnull(workfriday,0) = 1
          or isnull(worksaturday,0) = 1 or isnull(worksunday,0) = 1)) then 'T'
        else 'C'
        endif
        endif as timesheettype,(select sum(unitscharged*chargerate) from temptimesheetline where temptimesheetid = t.temptimesheetid) as timesheettotal
        from temptimesheet as t key join placement key join vacancy key join employment key join company key join employment as allemps key join iqxnetuserlink
        ,temptimesheet as t key join tempdesk
        ,temptimesheet as t key join person
        where iqxnetuserlink.iqxnetuserid = pwebuserid and weekenddate >= IQXNetCompanyStartDate(company.companyid) order by
        t.serialnumber desc
    end if
  end if
end]]>
  </SQLExec>
  <SQLExec ignoreerror="YES">
<![CDATA[grant execute on pears.NetTimesheets to IQXNet]]>
  </SQLExec>
  <SQLExec ignoreerror="YES">
<![CDATA[drop procedure pears.NetTimesheetsAll]]>
  </SQLExec>
  <SQLExec parameters="NO" xProcName="NetTimesheetsAll">
<![CDATA[create procedure pears.NetTimesheetsAll(in pWebUserID char(20))
result(temptimesheetid char(20),serialnumber char(20),tempname char(60),position char(60),companyname char(60),weekenddate date,timesheettype char(1),timesheettotal double,companyaddress char(250),theirref char(50))
begin
  declare userClass char(20);
  declare @companycount integer;
  declare divid char(20);
  set userClass=(select first iqxnetuserclassid from iqxnetuser where iqxnetuserid = pWebUserID);
  if userClass = 'CANDIDATE' then
    select t.temptimesheetid,t.serialnumber,string(person.surname,', ',person.forenames) as tempname,vacancy.position,company.name as companyname,weekmonthenddate(t.period,t.periodlength) as weekenddate,
      if tempdesk.desktype = 'S' then 'S' else if tempdesk.desktype = 'W'
      and exists(select * from placement where placementid = t.placementid and worknormalhours is not null and workstarttime is not null
        and(isnull(workmonday,0) = 1 or isnull(worktuesday,0) = 1 or isnull(workwednesday,0) = 1 or isnull(workthursday,0) = 1 or isnull(workfriday,0) = 1
        or isnull(worksaturday,0) = 1 or isnull(worksunday,0) = 1)) then 'T'
      else 'C'
      endif
      endif as timesheettype,(select sum(unitspaid*payrate) from temptimesheetline where temptimesheetid = t.temptimesheetid) as timesheettotal,'' as CompanyAddress,
      t.theirref
      from temptimesheet as t key join placement key join vacancy key join employment key join company
      ,temptimesheet as t key join tempdesk
      ,temptimesheet as t key join person key join iqxnetuserlink
      where iqxnetuserlink.iqxnetuserid = pwebuserid order by
      t.serialnumber desc
  else if userClass = 'AGENCY' then
      select t.temptimesheetid,t.serialnumber,string(person.surname,', ',person.forenames) as tempname,vacancy.position,company.name as companyname,weekmonthenddate(t.period,t.periodlength) as weekenddate,
        if tempdesk.desktype = 'S' then 'S' else if tempdesk.desktype = 'W'
        and exists(select * from placement where placementid = t.placementid and worknormalhours is not null and workstarttime is not null
          and(isnull(workmonday,0) = 1 or isnull(worktuesday,0) = 1 or isnull(workwednesday,0) = 1 or isnull(workthursday,0) = 1 or isnull(workfriday,0) = 1
          or isnull(worksaturday,0) = 1 or isnull(worksunday,0) = 1)) then 'T'
        else 'C'
        endif
        endif as timesheettype,(select sum(unitspaid*payrate) from temptimesheetline where temptimesheetid = t.temptimesheetid) as timesheettotal,'' as CompanyAddress,
        t.theirref
        from temptimesheet as t key join placement key join vacancy key join employment key join company
        ,temptimesheet as t key join tempdesk
        ,temptimesheet as t key join person key join pay_employee key join company as agcomp key join employment as agemp key join iqxnetuserlink
        where iqxnetuserlink.iqxnetuserid = pwebuserid and weekenddate >= IQXNetCompanyStartDate(agcomp.companyid) order by
        t.serialnumber desc
    else if userClass = 'OWNER' then
        set divid=(select first staff.divisionid from iqxnetuser key join staff where iqxnetuser.iqxnetuserid = pwebuserid);
        select t.temptimesheetid,t.serialnumber,string(person.surname,', ',person.forenames) as tempname,vacancy.position,company.name as companyname,weekmonthenddate(t.period,t.periodlength) as weekenddate,
          if tempdesk.desktype = 'S' then 'S' else if tempdesk.desktype = 'W'
          and exists(select * from placement where placementid = t.placementid and worknormalhours is not null and workstarttime is not null
            and(isnull(workmonday,0) = 1 or isnull(worktuesday,0) = 1 or isnull(workwednesday,0) = 1 or isnull(workthursday,0) = 1 or isnull(workfriday,0) = 1
            or isnull(worksaturday,0) = 1 or isnull(worksunday,0) = 1)) then 'T'
          else 'C'
          endif
          endif as timesheettype,(select sum(unitspaid*payrate) from temptimesheetline where temptimesheetid = t.temptimesheetid) as timesheettotal,'' as CompanyAddress,
          t.theirref
          from temptimesheet as t key join placement key join vacancy key join employment key join company
          ,temptimesheet as t key join tempdesk
          ,temptimesheet as t key join person
          where company.divisionid = divid and person.divisionid = divid order by
          t.serialnumber desc
      else -- CLIENT
        set @companycount=(select count(*) from iqxnetuserlink where iqxnetuserid = pWebUserID);
        select t.temptimesheetid,t.serialnumber,string(person.surname,', ',person.forenames) as tempname,vacancy.position,company.name as companyname,weekmonthenddate(t.period,t.periodlength) as weekenddate,
          if tempdesk.desktype = 'S' then 'S' else if tempdesk.desktype = 'W'
          and exists(select * from placement where placementid = t.placementid and worknormalhours is not null and workstarttime is not null
            and(isnull(workmonday,0) = 1 or isnull(worktuesday,0) = 1 or isnull(workwednesday,0) = 1 or isnull(workthursday,0) = 1 or isnull(workfriday,0) = 1
            or isnull(worksaturday,0) = 1 or isnull(worksunday,0) = 1)) then 'T'
          else 'C'
          endif
          endif as timesheettype,(select sum(unitscharged*chargerate) from temptimesheetline where temptimesheetid = t.temptimesheetid) as timesheettotal,
          (if @companycount > 1 then GetCompanyAddressOnLine(company.companyid)
          else ''
          endif) as CompanyAddress,t.theirref
          from temptimesheet as t key join placement key join vacancy key join employment key join company key join employment as allemps key join iqxnetuserlink
          ,temptimesheet as t key join tempdesk
          ,temptimesheet as t key join person
          where iqxnetuserlink.iqxnetuserid = pwebuserid and weekenddate >= IQXNetCompanyStartDate(company.companyid) order by
          t.serialnumber desc
      end if
    end if
  end if
end]]>
  </SQLExec>
  <SQLExec ignoreerror="YES">
<![CDATA[grant execute on pears.NetTimesheetsAll to IQXNet]]>
  </SQLExec>
  <SQLExec ignoreerror="YES">
<![CDATA[drop procedure pears.NetTimesheetShifts]]>
  </SQLExec>
  <SQLExec parameters="NO" xProcName="NetTimesheetShifts">
<![CDATA[create procedure pears.NetTimesheetShifts(in pWebUserID char(20),in pTempTimesheetID char(20))
result(tempshiftid char(20),shiftdate date,timefrom time,timeto time,breakminutes smallint,description char(50),weekenddate date)
begin
  select s.tempshiftid,s.shiftdate,s.timefrom,s.timeto,s.breakminutes,
    p.description,weekmonthenddate(t.period,t.periodlength) as weekenddate
    from tempshift as s key join temptimesheet as t
    ,tempshift as s key left outer join tempshiftplan as p
    ,temptimesheet as t key join person
    where t.temptimesheetid = pTempTimesheetID
    and s.shiftdate between weekenddate-6 and weekenddate order by
    s.shiftdate asc,s.timefrom asc
end]]>
  </SQLExec>
  <SQLExec ignoreerror="YES">
<![CDATA[grant execute on pears.NetTimesheetShifts to IQXNet]]>
  </SQLExec>
  <SQLExec ignoreerror="YES">
<![CDATA[drop procedure pears.NetTimesheetTimes]]>
  </SQLExec>
  <SQLExec parameters="NO" xProcName="NetTimesheetTimes">
<![CDATA[create procedure pears.NetTimesheetTimes(in pWebUserID char(20),in pTempTimesheetID char(20))
result(placementid char(20),weekstartdate date,shiftdate date,dayticked smallint,tickednormalhours double,hours double,timefrom time)
begin
  select p.placementid,
    weekmonthenddate(t.period,t.periodlength)-6 as weekstartdate,
    "date"(dateadd(day,r.row_num-1,weekstartdate)) as shiftdate,
    (case dow(shiftdate)-1 when 0 then p.worksunday when 1 then p.workmonday when 2 then p.worktuesday when 3 then p.workwednesday
    when 4 then p.workthursday when 5 then p.workfriday when 6 then p.worksaturday end) as dayticked,
    (if isnull(dayticked,0) = 1 then p.worknormalhours else null
    endif) as tickednormalhours,(if isnull(v.workcancelled,0) = 0 then isnull(v.workhours,tickednormalhours) else null
    endif) as hours,isnull(v.workstarttime,p.workstarttime) as timefrom
    from(placement as p left outer join placementdayvariation as v
    on p.placementid = v.placementid and v.variationdate = shiftdate)
    ,placement as p join dbo.rowgenerator as r on r.row_num between 1 and 7
    ,placement as p key join temptimesheet as t
    ,placement as p key join employment as e
    where t.temptimesheetid = pTempTimesheetID
    and shiftdate between isnull(e.startdate,shiftdate) and isnull(e.leavedate,shiftdate)
end]]>
  </SQLExec>
  <SQLExec ignoreerror="YES">
<![CDATA[grant execute on pears.NetTimesheetTimes to IQXNet]]>
  </SQLExec>
  <SQLExec ignoreerror="YES">
<![CDATA[drop procedure pears.NetUploadTypes]]>
  </SQLExec>
  <SQLExec parameters="NO" xProcName="NetUploadTypes">
<![CDATA[create procedure pears.NetUploadTypes(in pWebUserID char(20),in pOwnerType char(1))
result(UploadTypes char(900))
begin
  declare rv char(900);
  if pOwnerType = 'P' then
    set rv='primary_cv]~[CV]~[primary_photo]~[Photo]~['
  else
    set rv=''
  end if;
  set rv=rv+isnull((select list(string(DocumentTypeID,']~[',Description),']~[' order by SortOrder asc,Description asc) from DocumentType where isnull(Class,pownertype) = pownertype and CanLoadFromWeb = 1),'');
  select rv
end]]>
  </SQLExec>
  <SQLExec ignoreerror="YES">
<![CDATA[grant execute on pears.NetUploadTypes to IQXNet]]>
  </SQLExec>
  <SQLExec ignoreerror="YES">
<![CDATA[drop procedure pears.NetVacancyCancel]]>
  </SQLExec>
  <SQLExec parameters="NO" xProcName="NetVacancyCancel">
<![CDATA[create procedure pears.NetVacancyCancel(in pWebUserID char(20),in pvacancyid char(20),in pshiftplanid char(20))
result(pResult char(250))
begin
  declare local temporary table IDs(
    ID char(20) null,
    ) not transactional;
  insert into IDs( ID) 
    select distinct e.companyid from employment as e key join iqxnetuserlink as i where i.iqxnetuserid = pWebUserID;
  if not pvacancyid = any(select first v.vacancyid from vacancy as v key join employment as e join IDs on e.CompanyID = IDs.ID) then
    select '99:~Permission denied';
    return
  end if;
  if IQXNetHasPermission(pWebUserID,'AUTHORISEJOBS') = 0 then
    select '99:~Permission denied';
    return
  end if;
  if trim(isnull(pshiftplanid,'')) = '' then
    update vacancy set status = 'X' where status = ']' and vacancyid = pvacancyid
  else
    update tempshift set cancelreason = 'C' where tempshiftplanid = pshiftplanid and vacancyid = pvacancyid and state = 'C' and cancelreason = '~'
  end if;
  if @@rowcount = 0 then
    select '1:~Cancellation failed';
    return
  end if;
  select '0:~Success'
end]]>
  </SQLExec>
  <SQLExec ignoreerror="YES">
<![CDATA[grant execute on pears.NetVacancyCancel to IQXNet]]>
  </SQLExec>
  <SQLExec ignoreerror="YES">
<![CDATA[drop procedure pears.NetVacancyConfirm]]>
  </SQLExec>
  <SQLExec parameters="NO" xProcName="NetVacancyConfirm">
<![CDATA[create procedure pears.NetVacancyConfirm(in pWebUserID char(20),in pvacancyid char(20),in pshiftplanid char(20))
result(pResult char(250))
begin
  declare spopup char(100);
  declare local temporary table IDs(
    ID char(20) null,
    ) not transactional;
  insert into IDs( ID) 
    select distinct e.companyid from employment as e key join iqxnetuserlink as i where i.iqxnetuserid = pWebUserID;
  if not pvacancyid = any(select v.vacancyid from vacancy as v key join employment as e join IDs on e.CompanyID = IDs.ID) then
    select '99:~Permission denied';
    return
  end if;
  if IQXNetHasPermission(pWebUserID,'AUTHORISEJOBS') = 0 then
    select '99:~Permission denied';
    return
  end if;
  set pshiftplanid=nullif(trim(pshiftplanid),'');
  if pshiftplanid is null then
    update vacancy set status = 'C' where status = ']' and vacancyid = pvacancyid;
    update vacancy key join employment join params on params.secondarycascade = 1 set
      vacancy.CascadeDateTime = GetCascadeTime(employment.CompanyID,vacancy.VacancyID,current timestamp,vacancy.startdate,current timestamp,0)
      where vacancy.vacancyid = pvacancyid
  else
    delete from tempshift where tempshiftplanid = pshiftplanid and vacancyid = pvacancyid and state = 'C' and cancelreason = '~';
    update TempShiftPlan as p key join vacancy key join employment join params on params.secondarycascade = 1 set
      p.CascadeDateTime = GetCascadeTime(employment.CompanyID,vacancy.VacancyID,current timestamp,p.ShiftDate+p.TimeFrom,current timestamp,0)
      where p.TempShiftPlanID = pshiftplanid
  end if;
  if @@rowcount = 0 then
    select '1:~Confirmation failed';
    return
  end if;
  if pshiftplanid is not null then
    set spopup='New shift requirement confirmed '+dateformat((select first shiftdate from tempshiftplan where tempshiftplanid = pshiftplanid),'Ddd dd/mm/yyyy')
  else
    set spopup='New vacancy requirement confirmed'
  end if;
  call IQXNetPopup(pWebUserID,null,null,pvacancyid,null,null,null,spopup,null);
  select '0:~Success'
end]]>
  </SQLExec>
  <SQLExec ignoreerror="YES">
<![CDATA[grant execute on pears.NetVacancyConfirm to IQXNet]]>
  </SQLExec>
  <SQLExec ignoreerror="YES">
<![CDATA[drop procedure pears.NetVacancyFill]]>
  </SQLExec>
  <SQLExec parameters="NO" xProcName="NetVacancyFill">
<![CDATA[create procedure pears.NetVacancyFill(in pWebUserID char(20),in pvacancyid char(20),in pshiftplanid char(20),in ppersonid char(20))
result(pResult char(250))
begin
  declare sid char(20);
  declare swebusername char(50);
  declare availability char(20);
  declare spopup char(100);
  declare local temporary table IDs(
    ID char(20) null,
    ) not transactional;
  insert into IDs( ID) 
    select distinct e.companyid from employment as e key join iqxnetuserlink as i where i.iqxnetuserid = pWebUserID;
  if not pvacancyid = any(select v.vacancyid from vacancy as v key join employment as e join IDs on e.CompanyID = IDs.ID) then
    select '99:~Permission denied';
    return
  end if;
  if IQXNetHasPermission(pWebUserID,'FILLJOBS') = 0 then
    select '99:~Permission denied';
    return
  end if;
  set sid=uniquekey(ppersonid);
  set swebusername=(select name from iqxnetuser where iqxnetuserid = pwebuserid);
  if trim(isnull(pshiftplanid,'')) = '' then
    insert into employment( temp,employmentid,personid,companyid,startdate,leavedate,position,department) 
      select v.temp,sid,ppersonid,e.companyid,v.startdate,v.finishdate,v.position,v.clientdepartment
        from vacancy as v key join employment as e where v.vacancyid = pvacancyid;
    insert into placement( placementid,placedate,employmentid,vacancyid,departmentid,staffid,temp,daysperweek,salary,
      TheirRef,ContractRef,Currency,WorkMonday,WorkTuesday,WorkWednesday,WorkThursday,WorkFriday,WorkSaturday,WorkSunday,
      WorkNormalHours,WorkStartTime) 
      select sid,current date,sid,pvacancyid,v.departmentid,userstaffid,v.temp,5,v.salary,v.theirref,v.contractref,v.currency,
        v.WorkMonday,v.WorkTuesday,v.WorkWednesday,v.WorkThursday,v.WorkFriday,v.WorkSaturday,v.WorkSunday,
        v.WorkNormalHours,v.WorkStartTime
        from vacancy as v where v.vacancyid = pvacancyid;
    call IQXNetPopup(pWebUserID,null,null,pvacancyid,sid,null,null,'Client made placement',null);
    call IQXNetRequestAction(pWebUserID,'ClientFill','L',sid)
  else
    set availability=isnull((select personavailableforplan(ppersonid,p.ShiftDate,p.TimeFrom,p.TimeTo,p.RecoveryHours,0,0,null,null,null,null,null)
        from tempshiftplan as p where p.tempshiftplanid = pshiftplanid),'');
    if not(trim(availability) = '' or availability like '[AM]%') then
      select '1:~Candidate not available';
      return
    end if;
    insert into tempshift( TempShiftID,VacancyID,PersonID,ShiftDate,TimeFrom,TimeTo,State,TempShiftPlanID,
      BreakMinutes,EssentialSkillGradeID,ReferenceCode,ClientConfirmed,TempConfirmed,StaffID,
      ConfirmedWith,TempShiftTypeID,AnalysisCode,RecoveryHours) 
      select sid,pVacancyID,pPersonID,p.ShiftDate,p.TimeFrom,p.TimeTo,'P',pShiftPlanID,
        p.BreakMinutes,p.EssentialSkillGradeID,p.ReferenceCode,1,0,userStaffID,
        swebusername,p.TempShiftTypeID,p.AnalysisCode,p.RecoveryHours
        from tempshiftplan as p where p.tempshiftplanid = pshiftplanid;
    set spopup=(select dateformat(p.shiftdate,'Ddd dd/mm/yyyy')+' '+dateformat(p.timefrom,'hh:nn')+' with '+person.name from tempshiftplan as p,person
        where p.tempshiftplanid = pshiftplanid and person.personid = ppersonid);
    call IQXNetPopup(pWebUserID,null,null,pvacancyid,null,null,null,'Client filled shift',spopup);
    call IQXNetRequestAction(pWebUserID,'ClientFill','SHIFT',sid)
  end if;
  select '0:~Success'
end]]>
  </SQLExec>
  <SQLExec ignoreerror="YES">
<![CDATA[grant execute on pears.NetVacancyFill to IQXNet]]>
  </SQLExec>
  <SQLExec ignoreerror="YES">
<![CDATA[drop function pears.NetVacancyHasRateScript]]>
  </SQLExec>
  <SQLExec parameters="NO" xProcName="NetVacancyHasRateScript">
<![CDATA[create function pears.NetVacancyHasRateScript(in jtypeid char(20),in vacid char(20))
returns integer
begin
  if jtypeid is not null then
    if exists(select * from tempjobtype where tempjobtypeid = jtypeid and tempratescriptid is not null) then
      return 1
    else
      return 0
    end if
  else
    if exists(select * from vacancy as v key join tempjobtype as t where v.vacancyid = vacid and t.tempratescriptid is not null) then
      return 1
    else
      return 0
    end if
  end if
end]]>
  </SQLExec>
  <SQLExec ignoreerror="YES">
<![CDATA[grant execute on pears.NetVacancyHasRateScript to IQXNet]]>
  </SQLExec>
 </IfYesDialog>
</Job>
