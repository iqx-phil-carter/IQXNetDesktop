<?php
	// load the config file  
	require_once("config.php"); 

	// Decrypt the given string
	// $string = The text to decrypt.
	// Returns the decrypted value of the passed string.
	function DecryptData($string) {

		global $config;
		$decrypted_string = "";

		if (($string != null) && ($string != "")) {
			$string = base64_decode($string);

			//key 
			$cipher_alg = MCRYPT_TRIPLEDES;
			$key = $config["serviceKey"];
			$iv = initKey($key); 

			$decrypted_string = mcrypt_decrypt($cipher_alg, $key, $string, MCRYPT_MODE_CBC, $iv); 
		}
		
		return trim($decrypted_string);		
	}
	
	// Encrypt the given string.
	// $string = The plain text to encrypt.
	// Returns the encrypted value of the passed string.
	function EncryptData($string) {
	 
		global $config;

		//Encryption
		$cipher_alg = MCRYPT_TRIPLEDES;
		$key = $config["serviceKey"];
		$iv = initKey($key); 
		 
		$encrypted_string = mcrypt_encrypt($cipher_alg, $key, $string, MCRYPT_MODE_CBC, $iv); 
		return base64_encode($encrypted_string);
	}

	// Generate the check digit for the given number.
	// $baseValue = The number to get the check digit for.
	// Returns the check digit.
	function generateCheckDigit($baseValue)
	{
		$sum = 0;
		$delta = array(0 => 0, 1 => 1, 2 => 2, 3 => 3, 4 => 4, 5 => -4, 6 => -3, 7 => -2, 8 => -1, 9 => 0 );
		$checkDigit = 0;

		for ($i = 0; $i < strlen($baseValue); $i++)
		{
			$sum += intval($baseValue[$i], 10);
		}

		for ($i = (strlen($baseValue) - 1); $i > 0; $i -= 2)
		{
			$deltaIndex = intval($baseValue[$i]);
			$deltaValue = $delta[$deltaIndex];
			$sum += $deltaValue;
		}

		$checkDigit = $sum % 10;
		$checkDigit = 10 - $checkDigit;
		if ($checkDigit == 10)
		{
			$checkDigit = 0;
		}

		return $checkDigit;
	}
	
	// Generate an authorisation code that can be used to verify service access.
	// $userId = The unique id of the client application's user id.
	// Returns an authorisation code.
	function GetServiceAuthorisationCode($userId)
	{
		// The Authorisation Code is made up of:
		//	- a check digit
		//	- the current date (to the nearest second), 
		//	- the Application Id (to a set length of 5 digits), 
		//	- a random integer number generated by us (to a set length of 10 digits),
		//	- the id of the user in the current application (to a maximum of 40 characters).
		//	  This can be blank if the user has not logged into the client application yet.

		// The format is: 
		//		n | yyyy MM dd HH mm ss | nnnnn | nnnnnnnnnn | xxxxxx....xxxx, 
		//		1 |	 14 chars	|5 chars|  10 chars  | 1 char min = 30 chars minimum
		// e.g. 
		//		820130111104332000010000000735sharon.fletcher

		global $config;
		
		$authCode = "";
		$applicationIdStr = "";
		$rndNoStr = "";
		$userIdStr = "";
		$baseValue = "";
		$rndNoStr = "";
		$rndNo = 0;
		
		// Get the info that'll make up the code
		$currentDate = date("YmdHis");

		// Get the id of the application in SCSM. This in an integer value and will be given to 
		// the client website developer by Synarbor staff.
		$applicationIdStr = $config["applicationId"];
		$applicationIdStr = str_pad($applicationIdStr, 5, "0", STR_PAD_LEFT);

		$rndNo = rand(1, 2147483647);
		$rndNoStr = str_pad($rndNo, 10, "0", STR_PAD_LEFT);

		// Get the check digit for  the numeric info
		$baseValue = $currentDate . $applicationIdStr . $rndNoStr;
		$baseValue = generateCheckDigit($baseValue) . $baseValue . $userId;

		// Now encrypt the code
		$authCode = EncryptData($baseValue);

		return $authCode;
	}

	function initKey($key)
	{		
		//Hash the key using SHA1
		$bpHash = sha1($key, true);

		// Get 8 bytes to use for the IV value
		for ($i = 8; $i < 16; $i++)
		{
			$cryptoIV .= substr($bpHash, $i, 1);
		}

		return $cryptoIV;
	}
?>	
