<?php
	// load up your config file  
	require_once("config.php"); 

	// load the encryption routines
	require_once("encryption.php"); 

	// Rather than getting the user to log into the client application using their
	// username and password, log them in automatically using the id returned to 
	// from the SCSM.
	// userId = The id for the user that was returned to us from SCSM.
	function autoLogin($userId)
	{
		global $config;

		// Authenticate the user with whatever authentication method the client application uses. In
		// this example we're just putting the userId into a cookie that will expire in 20mins
		setcookie ("LocalUserCookie", $userId, time() + (60*20));

		// Get the page to send the user onto after we've processed their login. This could be the
		// originally requested page if their SCSM session had previously timed out or the default 
		// one setup in the application
		$defaultUrl = $_REQUEST["ReturnUrl"];
		if (($defaultUrl == null) || ($defaultUrl == ""))
		{
			$defaultUrl = $config["defaultPg"];
		}

		Header("Location: $defaultUrl");
		exit();
	}

	// Perform any logout tasks that are specific to the client website and clear any SCSM 
	// information.
	// $logoutOfSCSM = Flag indicating if the user should be logged out of the local
	// website only or also out of SCSM.
	// $returnToCaller = Flag indicating if control should remain with the
	// client website once the logout tasks have been performed.
	// $scsmCookie = The cookie that may or may not contain the SCSM ticket.
	// $localCookie = The cookie that may or may not contain the user id of the
	// client application.
	function logout($logoutOfSCSM, $returnToCaller, $scsmCookie, $localCookie)
	{
		// Perform the local application's logout functionality
		if ($localCookie != null)
		{
			setcookie ("LocalUserCookie", "", time() - (60*60*24*365));
		}

		if ($scsmCookie != null)
		{
			setcookie ("SCSMTicketCookie", "", time() - (60*60*24*365));
		}

		// Unset all of the session variables.
		$_SESSION = array();

		// Kill the session, also delete the session cookie.
		if (ini_get("session.use_cookies")) {
		    $params = session_get_cookie_params();
		    setcookie(session_name(), '', time() - 42000,
			$params["path"], $params["domain"],
			$params["secure"], $params["httponly"]
		    );
		}

		// Finally, destroy the session.
		session_destroy();

		if (($logoutOfSCSM) && ($scsmCookie != null) && ($scsmCookie != ""))
		{
			/* Now log out of the SCSM by calling the Logout method in the web service. The parameters 
			   are as follows:
					
			   encryptType	      - This will always be 2 and signifies that PHP encryption is being used.

			   authorisationCode  -	This is an encrypted code generated by the client application and passed 
						to the web service. It is used by the service, along with the ticket  
						parameter, to validate the method call before it is carried out. This is 
						time sensitive so don't get it until you mean to use it.
					 
			   ticket	      - This is the encrypted ticket that was passed back to the client website
						when the user was successfully logged into the SCSM.
					 
			   logoutPg	      -	This string is populated by the method. It is the fully qualified redirection 
						string to the Central Logout page. 
					  
			   return value	      - This is used to store the return value from the web service call. It is a 
						flag indicating if the method was carried out successfully or not. The 
						following values can be returned:
			 
						    0 - Failed. An unknown error was encountered in the web service.
						    3 -	Success. The validation code was verified and the redirection string built.
						   10 -	Invalid Authorisation Code. The authorisation code passed by the 
							client application could not be validated. This could be because 
							their request has timed out.
			*/

			// Get the authorisation code to perform the web service task
			$scsmWebService = new SoapClient('http://portaltest.synarbor.net/CentralDashboard/SCSMService.svc?wsdl');
			$authCode = GetServiceAuthorisationCode($localCookie);
			$args = array('encryptType' => 2, 'authorisationCode' => $authCode, 'ticket' => $scsmCookie, 'logoutPg' => "");
			$response = $scsmWebService->GetLogoutPgWithEType($args);
			$result = $response->GetLogoutPgWithETypeResult;
			$redirectPg = $response->logoutPg;

			if (($result == 3) && (!$returnToCaller)) // Valid
			{
				Header("Location: $redirectPg");
				exit();
			}
			else if ($result != 3) 
			{
				// Method failed take appropriate action...
			}
		}
	}
	
	// SCSM is being enforced so set the page up appropriately.
	// $scsmCookie = The cookie that may or may not contain the SCSM ticket.
	// $localCookie = The cookie that may or may not contain the user id of the
	// client application.
	function scsmSetup($scsmCookie, $localCookie)
	{
		$loggedIntoSCSM = false;
		$result = 0; //	Failed
		
		try
		{
			// Compare the ticket that may have been previously stored in the client application with any
			// ticket that we may have just received from the SCSM. If the tickets are set but do not 
			// match then it could be that a different user has logged into SCSM and is now trying to 
			// access the website.
			if (($scsmCookie != null) && ($scsmCookie.Value != ""))
			{
				$appTicket = $scsmCookie;
			}
			if (($localCookie != null) && ($localCookie != ""))
			{
				$appUserId = $localCookie;
			}
echo ' ticket='.$_REQUEST["scsmtkt"];
			$passedTicket = ($_REQUEST["scsmtkt"] == null ? "" : $_REQUEST["scsmtkt"]);
			$passedUserId = $_REQUEST["scsmuid"];
			
			// The user id is encrypted when it is passed from the Central Login page
			$passedUserId = DecryptData($passedUserId);

			if ((($appTicket != "") && ($passedTicket != "") && ($appTicket != $passedTicket)) ||
				(($appUserId != "") && ($passedUserId != "") && ($appUserId != $passedUserId)))
			{
				// The user is logged in as somebody else so log them out and back in again
				logout(false, true, $scsmCookie, $localCookie);
				setcookie("SCSMTicketCookie", $passedTicket, time() + 1200);
				$scsmCookie = $passedTicket;

				setcookie("LocalUserCookie", $passedUserId, time() + 1200);
				$localCookie = $passedUserId;
				$loggedIntoSCSM = true;
			}
			else if ($scsmCookie == null)
			{
				// We haven't used the website yet so we don't have a ticket already stored for it
				if (($passedTicket != null) && ($passedTicket != ""))
				{
					// The user has just been authenticated store their ticket and user id that 
					// we have been passed back to from the Central Login page. We need to store 
					// the information that the user has been issued with so we can use it when 
					// calling the web service methods
					setcookie("SCSMTicketCookie", $passedTicket, time() + 1200);
					$scsmCookie = $passedTicket;

					setcookie("LocalUserCookie", $passedUserId, time() + 1200);
					$localCookie = $passedUserId;
					$loggedIntoSCSM = true;
				}
			}
			else
			{
				// The user has already been authenticated by SCSM as far as the client website is concerned
				// so we just need to validate their credentials in case they've timed out
				$loggedIntoSCSM = true;
			}
echo '### loggedin='.$loggedIntoSCSM;
			if ($loggedIntoSCSM)
			{
				/* The user has already been authenticated so make sure their ticket is still valid and 
				   then send them onto the default page if it is. The parameters on the web service 
				   validation method are as follows:
					
				   authorisationCode  -	This is an encrypted code generated by the client application and passed 
							to the web service. It is used by the service, along with the ticket  
							parameter, to validate the method call before it is carried out. This is 
							time sensitive so don't get it until you mean to use it.
					 
				   ticket	      - This is the encrypted ticket that was passed back to the client website
							when the user was successfully logged into the SCSM.

				   return value	      - This is used to store the return value from the web service call. It is a 
							flag indicating if the method was carried out successfully or not. The 
							following values can be returned:
			 
							    0 - Failed. An unknown error was encountered in the web service.
							    3 - Valid. The authorisation code is valid and the user has a current 
								SCSM session.
							    6 -	Login Required. The authorisation code is correct but the user's 
								session has timed out or their authentication ticket has changed 
								in the database.
							    9 -	Invalid ticket. The encryted ticket could not be decrypted or is
								not in the expected format.
							    10-	Invalid Authorisation Code. The authorisation code passed by the 
								client application could not be validated. This could be because 
								their request has timed out.
				*/

				$scsmWebService = new SoapClient('http://portaltest.synarbor.net/CentralDashboard/SCSMService.svc?wsdl');
				$authCode = GetServiceAuthorisationCode($localCookie);
				$args = array('encryptType' => 2, 'authorisationCode' => $authCode, 'ticket' => $scsmCookie);
				$response = $scsmWebService->ValidateUserWithEType($args);
				$result = $response->ValidateUserWithETypeResult;
				
				if ($result == 3) // Valid
				{
					// The user has been authenticated log them in locally and get their apps
					autoLogin($localCookie);
				}
				else if (result == 0)
				{
					// Web service method failed unexpectedly take the appropriate action...
				}
				else if (result == 9)
				{
					// Invalid ticket take the appropriate action...
				}
				else if (result == 10) 
				{
					// Invalid Authorisation Code take the appropriate action...
				}
			}
			else
			{
				// The user is not logged into SCSM. Make sure they are not logged in locally
				// and then try to log them into SCSM
				logout(false, true, $scsmCookie, $localCookie);				
				$result = 6; // Login Required
			}
echo 'result='.$result;
			if ((!$loggedIntoSCSM) || ($result == 6)) // Login Required
			{
				/*	The user needs to log into SCSM. We need to get the redirection string to the Central Login 
					page from the web service. The parameters on the GetLoginPg method are as follows:
					
					encryptType	      - This will always be 2 and signifies that PHP encryption is being used.
					
					authorisationCode     -	This is an encrypted code generated by the client application and passed 
								to the web service. It is used by the service to validate the method call 
								before it is carried out. This is time sensitive so don't get it until you 
								mean to use it. This should not contain a user id in this scenario.
					 
					returnPage	      - The relative path and name of the client application's calling page (normally
								the login page). This should NOT include the website's root path as this will 
								be acquired from the SCSM records and prefixed to the returnPage parameter. 
								E.g. If the page calling this method is http://www.mywebsite.com/account/login.aspx
								then account/login.aspx would be passed in the parameter.

					returnPageQueryStr    -	Any query string information that was passed to the client application page 
								that is calling the login method.
					 
					loginPg		      -	This string is populated by the method. It is the fully qualified redirection 
								string to the Central Login page. It also contains the encrypted details 
								necessary to return to the calling application.

					return value	      - This is used to store the return value from the web service call. It is a flag 
								indicating if the method was carried out successfully or not. The following 
								values can be returned:
			 
								    0 -	Failed. An unknown error was encountered in the web service.
								    3 -	Success. The validation code was verified and the redirection string built.
								   10 -	Invalid Authorisation Code. The authorisation code passed by the 
									client application could not be validated. This could be because 
									their request has timed out.
								   14 - Invalid Encryption Type. The specified type of encryption used with the 
									authentication code is invalid.
				*/

				// Get the authorisation code to perform the web service task
				$scsmWebService = new SoapClient('http://portaltest.synarbor.net/CentralDashboard/SCSMService.svc?wsdl');
				$authCode = GetServiceAuthorisationCode($localCookie);
				$args = array('encryptType' => 2, 'authorisationCode' => $authCode, 'returnPage' => $_SERVER['PHP_SELF'], 'returnPageQueryStr' => $_SERVER['QUERY_STRING'], 'loginPg' => "");
				$response = $scsmWebService->GetLoginPgWithEType($args);
				$result = $response->GetLoginPgWithETypeResult;
				$redirectPg = $response->loginPg;

				if ($result == 3) // Valid
				{
					// Redirect the user to the SCSM Central Login page
					Header("Location: $redirectPg");
					exit();
				}
				else
				{
					// Method failed take appropriate action...
				}
			}
		}
		catch (Exception $e) {
		       echo 'Caught exception in scsmSetup:',  $e->getMessage(), "<br/>";
		}
	}
?>
 <html>
	<head>
		<title>PHP Test</title>
	</head>
	<body>
		Start here
		<?php
			if(!isset($_POST['op'])) {
				echo 'inside loop';
				global $config;

				// Get the application setting that indicates if SCSM is being enforced. 
				$scsmEnabled = $config["scsmEnabled"];
				if ($scsmEnabled) {
					// If the SCSM is being used then get the rest of the SCSM related info

					// Get the ticket cookie that may or may not contain the SCSM ticket. If the user has 
					// already visited this website at an earlier point in the day and they are now
					// returning to it then this cookie may already have been set. It could also have been
					// set if another user has visited the website on this machine. This will be validated
					// as part of the page setup process.
					echo 'inside $scsmEnabled';
					if (isset($_COOKIE["SCSMTicketCookie"])) {
						$scsmCookie = $_COOKIE["SCSMTicketCookie"];
					}
				}

				// Get the id of any user that is currently logged into the client application. For the 
				// purposes of this example we have stored this in the "LocalUserCookie" cookie
				if (isset($_COOKIE["LocalUserCookie"])) {
					$localCookie = $_COOKIE["LocalUserCookie"];
				}
				
				// See if the user is logging out
				if ($_REQUEST["action"] == "lo")
				{
					echo ' ## logout ##';
					logout($scsmEnabled, false, $scsmCookie, $localCookie);
				}

				// Set the page up for the user to login. First see if SCSM is being enforced
				if ($scsmEnabled)
				{
					echo ' 1:$scsmEnabled';
					// SCSM is being enforced so set the page up appropriately
					scsmSetup($scsmCookie, $localCookie);
				}
				else
				{
					echo 'login naturally';
					// SCSM is not being enforced to just load up the page and let the user log into
					// the client application as they normally would

					// Do client application stuff...
				}
		?>
		<form id="frmLogin" name="frmLogin" method="post" action="">
		  <input type="hidden" value="op" name="op" />
		  Username: 
		  <input name="txtUsername" type="text" /><br/><br/>
		  Password: 
		  <input name="txtPassword" type="password" /><br/><br/>
		  <input type="submit" name="Submit" value="Login" />
		</form>
		<?php
			}else {
				// Do client application login stuff...
				echo 'SCSM is disabled so log the user into the local application however you want...';
			}
		?>
	</body>
</html>
